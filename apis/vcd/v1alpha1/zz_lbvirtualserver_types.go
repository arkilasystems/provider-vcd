// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LbVirtualServerInitParameters struct {

	// Application profile ID to be associated with the virtual server
	// Application profile ID to be associated with the virtual server
	AppProfileID *string `json:"appProfileId,omitempty" tf:"app_profile_id,omitempty"`

	// List of attached application rule IDs
	// List of attached application rule IDs
	AppRuleIds []*string `json:"appRuleIds,omitempty" tf:"app_rule_ids,omitempty"`

	// Maximum concurrent connections that the virtual server can process
	// Maximum concurrent connections that the virtual server can process
	ConnectionLimit *float64 `json:"connectionLimit,omitempty" tf:"connection_limit,omitempty"`

	// Maximum incoming new connection requests per second
	// Maximum incoming new connection requests per second
	ConnectionRateLimit *float64 `json:"connectionRateLimit,omitempty" tf:"connection_rate_limit,omitempty"`

	// Virtual server description
	// Virtual Server description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the edge gateway on which the virtual server is to be
	// created
	// Edge gateway name in which the LB Virtual Server is located
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// Defines if the virtual server uses acceleration. Default
	// false
	// Enable virtual server acceleration
	EnableAcceleration *bool `json:"enableAcceleration,omitempty" tf:"enable_acceleration,omitempty"`

	// Defines if the virtual server is enabled. Default true
	// Defines if the virtual server is enabled
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Set the IP address that the load balancer listens on
	// IP address that the load balancer listens on
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Virtual server name
	// Unique Virtual Server name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// The port number that the load balancer listens on
	// Port number that the load balancer listens on
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Select the protocol that the virtual server accepts. One of tcp, udp,
	// http, or https Note: You must select the same protocol used by the selected
	// Application Profile
	// Protocol that the virtual server accepts
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The server pool that the load balancer will use
	// The server pool that the load balancer will use
	ServerPoolID *string `json:"serverPoolId,omitempty" tf:"server_pool_id,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type LbVirtualServerObservation struct {

	// Application profile ID to be associated with the virtual server
	// Application profile ID to be associated with the virtual server
	AppProfileID *string `json:"appProfileId,omitempty" tf:"app_profile_id,omitempty"`

	// List of attached application rule IDs
	// List of attached application rule IDs
	AppRuleIds []*string `json:"appRuleIds,omitempty" tf:"app_rule_ids,omitempty"`

	// Maximum concurrent connections that the virtual server can process
	// Maximum concurrent connections that the virtual server can process
	ConnectionLimit *float64 `json:"connectionLimit,omitempty" tf:"connection_limit,omitempty"`

	// Maximum incoming new connection requests per second
	// Maximum incoming new connection requests per second
	ConnectionRateLimit *float64 `json:"connectionRateLimit,omitempty" tf:"connection_rate_limit,omitempty"`

	// Virtual server description
	// Virtual Server description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the edge gateway on which the virtual server is to be
	// created
	// Edge gateway name in which the LB Virtual Server is located
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// Defines if the virtual server uses acceleration. Default
	// false
	// Enable virtual server acceleration
	EnableAcceleration *bool `json:"enableAcceleration,omitempty" tf:"enable_acceleration,omitempty"`

	// Defines if the virtual server is enabled. Default true
	// Defines if the virtual server is enabled
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The NSX ID of the load balancer virtual server
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Set the IP address that the load balancer listens on
	// IP address that the load balancer listens on
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Virtual server name
	// Unique Virtual Server name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// The port number that the load balancer listens on
	// Port number that the load balancer listens on
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Select the protocol that the virtual server accepts. One of tcp, udp,
	// http, or https Note: You must select the same protocol used by the selected
	// Application Profile
	// Protocol that the virtual server accepts
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The server pool that the load balancer will use
	// The server pool that the load balancer will use
	ServerPoolID *string `json:"serverPoolId,omitempty" tf:"server_pool_id,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type LbVirtualServerParameters struct {

	// Application profile ID to be associated with the virtual server
	// Application profile ID to be associated with the virtual server
	// +kubebuilder:validation:Optional
	AppProfileID *string `json:"appProfileId,omitempty" tf:"app_profile_id,omitempty"`

	// List of attached application rule IDs
	// List of attached application rule IDs
	// +kubebuilder:validation:Optional
	AppRuleIds []*string `json:"appRuleIds,omitempty" tf:"app_rule_ids,omitempty"`

	// Maximum concurrent connections that the virtual server can process
	// Maximum concurrent connections that the virtual server can process
	// +kubebuilder:validation:Optional
	ConnectionLimit *float64 `json:"connectionLimit,omitempty" tf:"connection_limit,omitempty"`

	// Maximum incoming new connection requests per second
	// Maximum incoming new connection requests per second
	// +kubebuilder:validation:Optional
	ConnectionRateLimit *float64 `json:"connectionRateLimit,omitempty" tf:"connection_rate_limit,omitempty"`

	// Virtual server description
	// Virtual Server description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the edge gateway on which the virtual server is to be
	// created
	// Edge gateway name in which the LB Virtual Server is located
	// +kubebuilder:validation:Optional
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// Defines if the virtual server uses acceleration. Default
	// false
	// Enable virtual server acceleration
	// +kubebuilder:validation:Optional
	EnableAcceleration *bool `json:"enableAcceleration,omitempty" tf:"enable_acceleration,omitempty"`

	// Defines if the virtual server is enabled. Default true
	// Defines if the virtual server is enabled
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Set the IP address that the load balancer listens on
	// IP address that the load balancer listens on
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Virtual server name
	// Unique Virtual Server name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// The port number that the load balancer listens on
	// Port number that the load balancer listens on
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Select the protocol that the virtual server accepts. One of tcp, udp,
	// http, or https Note: You must select the same protocol used by the selected
	// Application Profile
	// Protocol that the virtual server accepts
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The server pool that the load balancer will use
	// The server pool that the load balancer will use
	// +kubebuilder:validation:Optional
	ServerPoolID *string `json:"serverPoolId,omitempty" tf:"server_pool_id,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

// LbVirtualServerSpec defines the desired state of LbVirtualServer
type LbVirtualServerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LbVirtualServerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LbVirtualServerInitParameters `json:"initProvider,omitempty"`
}

// LbVirtualServerStatus defines the observed state of LbVirtualServer.
type LbVirtualServerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LbVirtualServerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// LbVirtualServer is the Schema for the LbVirtualServers API. Provides an NSX edge gateway load balancer virtual server resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type LbVirtualServer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.edgeGateway) || (has(self.initProvider) && has(self.initProvider.edgeGateway))",message="spec.forProvider.edgeGateway is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ipAddress) || (has(self.initProvider) && has(self.initProvider.ipAddress))",message="spec.forProvider.ipAddress is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.port) || (has(self.initProvider) && has(self.initProvider.port))",message="spec.forProvider.port is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.protocol) || (has(self.initProvider) && has(self.initProvider.protocol))",message="spec.forProvider.protocol is a required parameter"
	Spec   LbVirtualServerSpec   `json:"spec"`
	Status LbVirtualServerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LbVirtualServerList contains a list of LbVirtualServers
type LbVirtualServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LbVirtualServer `json:"items"`
}

// Repository type metadata.
var (
	LbVirtualServer_Kind             = "LbVirtualServer"
	LbVirtualServer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LbVirtualServer_Kind}.String()
	LbVirtualServer_KindAPIVersion   = LbVirtualServer_Kind + "." + CRDGroupVersion.String()
	LbVirtualServer_GroupVersionKind = CRDGroupVersion.WithKind(LbVirtualServer_Kind)
)

func init() {
	SchemeBuilder.Register(&LbVirtualServer{}, &LbVirtualServerList{})
}
