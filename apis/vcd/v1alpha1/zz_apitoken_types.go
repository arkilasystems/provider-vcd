// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApiTokenInitParameters struct {

	// An additional check that the user is aware that the file contains
	// SENSITIVE information. Must be set to true or it will return a validation error.
	// Set this to true if you understand the security risks of using API token files and agree to creating them
	AllowTokenFile *bool `json:"allowTokenFile,omitempty" tf:"allow_token_file,omitempty"`

	// The name of the file which will be created containing the API token
	// Name of the file that the API token will be saved to
	FileName *string `json:"fileName,omitempty" tf:"file_name,omitempty"`

	// The unique name of the API token for a specific user.
	// Name of API token
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ApiTokenObservation struct {

	// An additional check that the user is aware that the file contains
	// SENSITIVE information. Must be set to true or it will return a validation error.
	// Set this to true if you understand the security risks of using API token files and agree to creating them
	AllowTokenFile *bool `json:"allowTokenFile,omitempty" tf:"allow_token_file,omitempty"`

	// The name of the file which will be created containing the API token
	// Name of the file that the API token will be saved to
	FileName *string `json:"fileName,omitempty" tf:"file_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The unique name of the API token for a specific user.
	// Name of API token
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ApiTokenParameters struct {

	// An additional check that the user is aware that the file contains
	// SENSITIVE information. Must be set to true or it will return a validation error.
	// Set this to true if you understand the security risks of using API token files and agree to creating them
	// +kubebuilder:validation:Optional
	AllowTokenFile *bool `json:"allowTokenFile,omitempty" tf:"allow_token_file,omitempty"`

	// The name of the file which will be created containing the API token
	// Name of the file that the API token will be saved to
	// +kubebuilder:validation:Optional
	FileName *string `json:"fileName,omitempty" tf:"file_name,omitempty"`

	// The unique name of the API token for a specific user.
	// Name of API token
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// ApiTokenSpec defines the desired state of ApiToken
type ApiTokenSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ApiTokenParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ApiTokenInitParameters `json:"initProvider,omitempty"`
}

// ApiTokenStatus defines the observed state of ApiToken.
type ApiTokenStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ApiTokenObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ApiToken is the Schema for the ApiTokens API. Provides a resource to manage API tokens. API tokens are an easy way to authenticate to VCD. They are user-based and have the same role as the user.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type ApiToken struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.allowTokenFile) || (has(self.initProvider) && has(self.initProvider.allowTokenFile))",message="spec.forProvider.allowTokenFile is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.fileName) || (has(self.initProvider) && has(self.initProvider.fileName))",message="spec.forProvider.fileName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   ApiTokenSpec   `json:"spec"`
	Status ApiTokenStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApiTokenList contains a list of ApiTokens
type ApiTokenList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApiToken `json:"items"`
}

// Repository type metadata.
var (
	ApiToken_Kind             = "ApiToken"
	ApiToken_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ApiToken_Kind}.String()
	ApiToken_KindAPIVersion   = ApiToken_Kind + "." + CRDGroupVersion.String()
	ApiToken_GroupVersionKind = CRDGroupVersion.WithKind(ApiToken_Kind)
)

func init() {
	SchemeBuilder.Register(&ApiToken{}, &ApiTokenList{})
}
