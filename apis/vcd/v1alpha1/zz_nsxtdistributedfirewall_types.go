// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NsxtDistributedFirewallInitParameters struct {

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// One or more blocks with Firewall Rule definitions. Order
	// defines firewall rule precedence
	// Ordered list of firewall rules
	Rule []RuleInitParameters `json:"rule,omitempty" tf:"rule,omitempty"`

	// The ID of VDC Group to manage Distributed Firewall in. Can be looked
	// up using vcd_vdc_group resource or data source.
	// ID of VDC Group for Distributed Firewall
	VdcGroupID *string `json:"vdcGroupId,omitempty" tf:"vdc_group_id,omitempty"`
}

type NsxtDistributedFirewallObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// One or more blocks with Firewall Rule definitions. Order
	// defines firewall rule precedence
	// Ordered list of firewall rules
	Rule []RuleObservation `json:"rule,omitempty" tf:"rule,omitempty"`

	// The ID of VDC Group to manage Distributed Firewall in. Can be looked
	// up using vcd_vdc_group resource or data source.
	// ID of VDC Group for Distributed Firewall
	VdcGroupID *string `json:"vdcGroupId,omitempty" tf:"vdc_group_id,omitempty"`
}

type NsxtDistributedFirewallParameters struct {

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// One or more blocks with Firewall Rule definitions. Order
	// defines firewall rule precedence
	// Ordered list of firewall rules
	// +kubebuilder:validation:Optional
	Rule []RuleParameters `json:"rule,omitempty" tf:"rule,omitempty"`

	// The ID of VDC Group to manage Distributed Firewall in. Can be looked
	// up using vcd_vdc_group resource or data source.
	// ID of VDC Group for Distributed Firewall
	// +kubebuilder:validation:Optional
	VdcGroupID *string `json:"vdcGroupId,omitempty" tf:"vdc_group_id,omitempty"`
}

type RuleInitParameters struct {

	// Defines if it should ALLOW, DROP, REJECT traffic. REJECT is only
	// supported in VCD 10.2.2+
	// Defines if the rule should 'ALLOW', 'DROP', 'REJECT' matching traffic
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// An optional set of Application Port Profiles.
	// A set of Application Port Profile IDs. Leaving it empty means 'Any'
	// +listType=set
	AppPortProfileIds []*string `json:"appPortProfileIds,omitempty" tf:"app_port_profile_ids,omitempty"`

	// Comment field shown in UI
	// Comment that is shown next to rule in UI (VCD 10.3.2+)
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Description of firewall rule (not shown in UI)
	// Description is not shown in UI
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// - reverses value of destination_ids for
	// the rule to match everything except specified IDs.
	// Reverses firewall matching for to match all except Destinations Groups specified in 'destination_ids' (VCD 10.3.2+)
	DestinationGroupsExcluded *bool `json:"destinationGroupsExcluded,omitempty" tf:"destination_groups_excluded,omitempty"`

	// A set of source object Firewall Groups (IP Sets or Security groups). Leaving it empty matches Any (all)
	// A set of Destination Firewall Group IDs (IP Sets or Security Groups). Leaving it empty means 'Any'
	// +listType=set
	DestinationIds []*string `json:"destinationIds,omitempty" tf:"destination_ids,omitempty"`

	// One of IN, OUT, or IN_OUT. (default IN_OUT)
	// Direction on which Firewall Rule applies (One of 'IN', 'OUT', 'IN_OUT')
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// Defines if the rule is enabled (default true)
	// Defined if Firewall Rule is active
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// One of IPV4,  IPV6, or IPV4_IPV6 (default IPV4_IPV6)
	// Firewall Rule Protocol (One of 'IPV4', 'IPV6', 'IPV4_IPV6')
	IPProtocol *string `json:"ipProtocol,omitempty" tf:"ip_protocol,omitempty"`

	// Defines if logging for this rule is enabled (default false)
	// Defines if matching traffic should be logged
	Logging *bool `json:"logging,omitempty" tf:"logging,omitempty"`

	// Explanatory name for firewall rule (uniqueness not enforced)
	// Firewall Rule name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// An optional set of Network Context Profiles. Can be
	// looked up using vcd_nsxt_network_context_profile data source.
	// A set of Network Context Profile IDs. Leaving it empty means 'Any'
	// +listType=set
	NetworkContextProfileIds []*string `json:"networkContextProfileIds,omitempty" tf:"network_context_profile_ids,omitempty"`

	// - reverses value of source_ids for the rule to
	// match everything except specified IDs.
	// Reverses firewall matching for to match all except Source Groups specified in 'source_ids' (VCD 10.3.2+)
	SourceGroupsExcluded *bool `json:"sourceGroupsExcluded,omitempty" tf:"source_groups_excluded,omitempty"`

	// A set of source object Firewall Groups (IP Sets or Security groups).
	// Leaving it empty matches Any (all)
	// A set of Source Firewall Group IDs (IP Sets or Security Groups). Leaving it empty means 'Any'
	// +listType=set
	SourceIds []*string `json:"sourceIds,omitempty" tf:"source_ids,omitempty"`
}

type RuleObservation struct {

	// Defines if it should ALLOW, DROP, REJECT traffic. REJECT is only
	// supported in VCD 10.2.2+
	// Defines if the rule should 'ALLOW', 'DROP', 'REJECT' matching traffic
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// An optional set of Application Port Profiles.
	// A set of Application Port Profile IDs. Leaving it empty means 'Any'
	// +listType=set
	AppPortProfileIds []*string `json:"appPortProfileIds,omitempty" tf:"app_port_profile_ids,omitempty"`

	// Comment field shown in UI
	// Comment that is shown next to rule in UI (VCD 10.3.2+)
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Description of firewall rule (not shown in UI)
	// Description is not shown in UI
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// - reverses value of destination_ids for
	// the rule to match everything except specified IDs.
	// Reverses firewall matching for to match all except Destinations Groups specified in 'destination_ids' (VCD 10.3.2+)
	DestinationGroupsExcluded *bool `json:"destinationGroupsExcluded,omitempty" tf:"destination_groups_excluded,omitempty"`

	// A set of source object Firewall Groups (IP Sets or Security groups). Leaving it empty matches Any (all)
	// A set of Destination Firewall Group IDs (IP Sets or Security Groups). Leaving it empty means 'Any'
	// +listType=set
	DestinationIds []*string `json:"destinationIds,omitempty" tf:"destination_ids,omitempty"`

	// One of IN, OUT, or IN_OUT. (default IN_OUT)
	// Direction on which Firewall Rule applies (One of 'IN', 'OUT', 'IN_OUT')
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// Defines if the rule is enabled (default true)
	// Defined if Firewall Rule is active
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Firewall Rule ID
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// One of IPV4,  IPV6, or IPV4_IPV6 (default IPV4_IPV6)
	// Firewall Rule Protocol (One of 'IPV4', 'IPV6', 'IPV4_IPV6')
	IPProtocol *string `json:"ipProtocol,omitempty" tf:"ip_protocol,omitempty"`

	// Defines if logging for this rule is enabled (default false)
	// Defines if matching traffic should be logged
	Logging *bool `json:"logging,omitempty" tf:"logging,omitempty"`

	// Explanatory name for firewall rule (uniqueness not enforced)
	// Firewall Rule name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// An optional set of Network Context Profiles. Can be
	// looked up using vcd_nsxt_network_context_profile data source.
	// A set of Network Context Profile IDs. Leaving it empty means 'Any'
	// +listType=set
	NetworkContextProfileIds []*string `json:"networkContextProfileIds,omitempty" tf:"network_context_profile_ids,omitempty"`

	// - reverses value of source_ids for the rule to
	// match everything except specified IDs.
	// Reverses firewall matching for to match all except Source Groups specified in 'source_ids' (VCD 10.3.2+)
	SourceGroupsExcluded *bool `json:"sourceGroupsExcluded,omitempty" tf:"source_groups_excluded,omitempty"`

	// A set of source object Firewall Groups (IP Sets or Security groups).
	// Leaving it empty matches Any (all)
	// A set of Source Firewall Group IDs (IP Sets or Security Groups). Leaving it empty means 'Any'
	// +listType=set
	SourceIds []*string `json:"sourceIds,omitempty" tf:"source_ids,omitempty"`
}

type RuleParameters struct {

	// Defines if it should ALLOW, DROP, REJECT traffic. REJECT is only
	// supported in VCD 10.2.2+
	// Defines if the rule should 'ALLOW', 'DROP', 'REJECT' matching traffic
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// An optional set of Application Port Profiles.
	// A set of Application Port Profile IDs. Leaving it empty means 'Any'
	// +kubebuilder:validation:Optional
	// +listType=set
	AppPortProfileIds []*string `json:"appPortProfileIds,omitempty" tf:"app_port_profile_ids,omitempty"`

	// Comment field shown in UI
	// Comment that is shown next to rule in UI (VCD 10.3.2+)
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Description of firewall rule (not shown in UI)
	// Description is not shown in UI
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// - reverses value of destination_ids for
	// the rule to match everything except specified IDs.
	// Reverses firewall matching for to match all except Destinations Groups specified in 'destination_ids' (VCD 10.3.2+)
	// +kubebuilder:validation:Optional
	DestinationGroupsExcluded *bool `json:"destinationGroupsExcluded,omitempty" tf:"destination_groups_excluded,omitempty"`

	// A set of source object Firewall Groups (IP Sets or Security groups). Leaving it empty matches Any (all)
	// A set of Destination Firewall Group IDs (IP Sets or Security Groups). Leaving it empty means 'Any'
	// +kubebuilder:validation:Optional
	// +listType=set
	DestinationIds []*string `json:"destinationIds,omitempty" tf:"destination_ids,omitempty"`

	// One of IN, OUT, or IN_OUT. (default IN_OUT)
	// Direction on which Firewall Rule applies (One of 'IN', 'OUT', 'IN_OUT')
	// +kubebuilder:validation:Optional
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// Defines if the rule is enabled (default true)
	// Defined if Firewall Rule is active
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// One of IPV4,  IPV6, or IPV4_IPV6 (default IPV4_IPV6)
	// Firewall Rule Protocol (One of 'IPV4', 'IPV6', 'IPV4_IPV6')
	// +kubebuilder:validation:Optional
	IPProtocol *string `json:"ipProtocol,omitempty" tf:"ip_protocol,omitempty"`

	// Defines if logging for this rule is enabled (default false)
	// Defines if matching traffic should be logged
	// +kubebuilder:validation:Optional
	Logging *bool `json:"logging,omitempty" tf:"logging,omitempty"`

	// Explanatory name for firewall rule (uniqueness not enforced)
	// Firewall Rule name
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// An optional set of Network Context Profiles. Can be
	// looked up using vcd_nsxt_network_context_profile data source.
	// A set of Network Context Profile IDs. Leaving it empty means 'Any'
	// +kubebuilder:validation:Optional
	// +listType=set
	NetworkContextProfileIds []*string `json:"networkContextProfileIds,omitempty" tf:"network_context_profile_ids,omitempty"`

	// - reverses value of source_ids for the rule to
	// match everything except specified IDs.
	// Reverses firewall matching for to match all except Source Groups specified in 'source_ids' (VCD 10.3.2+)
	// +kubebuilder:validation:Optional
	SourceGroupsExcluded *bool `json:"sourceGroupsExcluded,omitempty" tf:"source_groups_excluded,omitempty"`

	// A set of source object Firewall Groups (IP Sets or Security groups).
	// Leaving it empty matches Any (all)
	// A set of Source Firewall Group IDs (IP Sets or Security Groups). Leaving it empty means 'Any'
	// +kubebuilder:validation:Optional
	// +listType=set
	SourceIds []*string `json:"sourceIds,omitempty" tf:"source_ids,omitempty"`
}

// NsxtDistributedFirewallSpec defines the desired state of NsxtDistributedFirewall
type NsxtDistributedFirewallSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NsxtDistributedFirewallParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NsxtDistributedFirewallInitParameters `json:"initProvider,omitempty"`
}

// NsxtDistributedFirewallStatus defines the observed state of NsxtDistributedFirewall.
type NsxtDistributedFirewallStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NsxtDistributedFirewallObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NsxtDistributedFirewall is the Schema for the NsxtDistributedFirewalls API. The Distributed Firewall allows user to segment organization virtual data center entities, such as virtual machines, based on virtual machine names and attributes.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type NsxtDistributedFirewall struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rule) || (has(self.initProvider) && has(self.initProvider.rule))",message="spec.forProvider.rule is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vdcGroupId) || (has(self.initProvider) && has(self.initProvider.vdcGroupId))",message="spec.forProvider.vdcGroupId is a required parameter"
	Spec   NsxtDistributedFirewallSpec   `json:"spec"`
	Status NsxtDistributedFirewallStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtDistributedFirewallList contains a list of NsxtDistributedFirewalls
type NsxtDistributedFirewallList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NsxtDistributedFirewall `json:"items"`
}

// Repository type metadata.
var (
	NsxtDistributedFirewall_Kind             = "NsxtDistributedFirewall"
	NsxtDistributedFirewall_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NsxtDistributedFirewall_Kind}.String()
	NsxtDistributedFirewall_KindAPIVersion   = NsxtDistributedFirewall_Kind + "." + CRDGroupVersion.String()
	NsxtDistributedFirewall_GroupVersionKind = CRDGroupVersion.WithKind(NsxtDistributedFirewall_Kind)
)

func init() {
	SchemeBuilder.Register(&NsxtDistributedFirewall{}, &NsxtDistributedFirewallList{})
}
