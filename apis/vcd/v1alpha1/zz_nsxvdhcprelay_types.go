// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NsxvDhcpRelayInitParameters struct {

	// A set of domain names.
	// A set of IP domain names of DHCP servers
	// +listType=set
	DomainNames []*string `json:"domainNames,omitempty" tf:"domain_names,omitempty"`

	// The name of the edge gateway on which DHCP relay is to be configured.
	// Edge gateway name for DHCP relay settings
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// A set of IP addresses.
	// A set of IP address of DHCP servers
	// +listType=set
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// A set of IP set names.
	// A set of IP set names which consist DHCP servers
	// +listType=set
	IPSets []*string `json:"ipSets,omitempty" tf:"ip_sets,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// One or more blocks to define Org network and optional IP address of
	// edge gateway interfaces from which DHCP messages are to be relayed to the external DHCP relay
	// server(s). See Relay Agent and example for usage details.
	RelayAgent []RelayAgentInitParameters `json:"relayAgent,omitempty" tf:"relay_agent,omitempty"`

	// The name of VDC to use, optional if defined at provider level.
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type NsxvDhcpRelayObservation struct {

	// A set of domain names.
	// A set of IP domain names of DHCP servers
	// +listType=set
	DomainNames []*string `json:"domainNames,omitempty" tf:"domain_names,omitempty"`

	// The name of the edge gateway on which DHCP relay is to be configured.
	// Edge gateway name for DHCP relay settings
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A set of IP addresses.
	// A set of IP address of DHCP servers
	// +listType=set
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// A set of IP set names.
	// A set of IP set names which consist DHCP servers
	// +listType=set
	IPSets []*string `json:"ipSets,omitempty" tf:"ip_sets,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// One or more blocks to define Org network and optional IP address of
	// edge gateway interfaces from which DHCP messages are to be relayed to the external DHCP relay
	// server(s). See Relay Agent and example for usage details.
	RelayAgent []RelayAgentObservation `json:"relayAgent,omitempty" tf:"relay_agent,omitempty"`

	// The name of VDC to use, optional if defined at provider level.
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type NsxvDhcpRelayParameters struct {

	// A set of domain names.
	// A set of IP domain names of DHCP servers
	// +kubebuilder:validation:Optional
	// +listType=set
	DomainNames []*string `json:"domainNames,omitempty" tf:"domain_names,omitempty"`

	// The name of the edge gateway on which DHCP relay is to be configured.
	// Edge gateway name for DHCP relay settings
	// +kubebuilder:validation:Optional
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// A set of IP addresses.
	// A set of IP address of DHCP servers
	// +kubebuilder:validation:Optional
	// +listType=set
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// A set of IP set names.
	// A set of IP set names which consist DHCP servers
	// +kubebuilder:validation:Optional
	// +listType=set
	IPSets []*string `json:"ipSets,omitempty" tf:"ip_sets,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// One or more blocks to define Org network and optional IP address of
	// edge gateway interfaces from which DHCP messages are to be relayed to the external DHCP relay
	// server(s). See Relay Agent and example for usage details.
	// +kubebuilder:validation:Optional
	RelayAgent []RelayAgentParameters `json:"relayAgent,omitempty" tf:"relay_agent,omitempty"`

	// The name of VDC to use, optional if defined at provider level.
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type RelayAgentInitParameters struct {

	// IP address on edge gateway to be used for relaying messages.
	// Primary address of edge gateway interface will be picked if not specified.
	// Optional gateway IP address of org network which is to be used for relaying DHCP message to specified servers
	GatewayIPAddress *string `json:"gatewayIpAddress,omitempty" tf:"gateway_ip_address,omitempty"`

	// An existing Org network name from which DHCP messages are to be relayed.
	// Org network which is to be used for relaying DHCP message to specified servers
	NetworkName *string `json:"networkName,omitempty" tf:"network_name,omitempty"`
}

type RelayAgentObservation struct {

	// IP address on edge gateway to be used for relaying messages.
	// Primary address of edge gateway interface will be picked if not specified.
	// Optional gateway IP address of org network which is to be used for relaying DHCP message to specified servers
	GatewayIPAddress *string `json:"gatewayIpAddress,omitempty" tf:"gateway_ip_address,omitempty"`

	// An existing Org network name from which DHCP messages are to be relayed.
	// Org network which is to be used for relaying DHCP message to specified servers
	NetworkName *string `json:"networkName,omitempty" tf:"network_name,omitempty"`
}

type RelayAgentParameters struct {

	// IP address on edge gateway to be used for relaying messages.
	// Primary address of edge gateway interface will be picked if not specified.
	// Optional gateway IP address of org network which is to be used for relaying DHCP message to specified servers
	// +kubebuilder:validation:Optional
	GatewayIPAddress *string `json:"gatewayIpAddress,omitempty" tf:"gateway_ip_address,omitempty"`

	// An existing Org network name from which DHCP messages are to be relayed.
	// Org network which is to be used for relaying DHCP message to specified servers
	// +kubebuilder:validation:Optional
	NetworkName *string `json:"networkName" tf:"network_name,omitempty"`
}

// NsxvDhcpRelaySpec defines the desired state of NsxvDhcpRelay
type NsxvDhcpRelaySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NsxvDhcpRelayParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NsxvDhcpRelayInitParameters `json:"initProvider,omitempty"`
}

// NsxvDhcpRelayStatus defines the observed state of NsxvDhcpRelay.
type NsxvDhcpRelayStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NsxvDhcpRelayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NsxvDhcpRelay is the Schema for the NsxvDhcpRelays API. Provides an NSX edge gateway DHCP relay configuration resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type NsxvDhcpRelay struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.edgeGateway) || (has(self.initProvider) && has(self.initProvider.edgeGateway))",message="spec.forProvider.edgeGateway is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.relayAgent) || (has(self.initProvider) && has(self.initProvider.relayAgent))",message="spec.forProvider.relayAgent is a required parameter"
	Spec   NsxvDhcpRelaySpec   `json:"spec"`
	Status NsxvDhcpRelayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NsxvDhcpRelayList contains a list of NsxvDhcpRelays
type NsxvDhcpRelayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NsxvDhcpRelay `json:"items"`
}

// Repository type metadata.
var (
	NsxvDhcpRelay_Kind             = "NsxvDhcpRelay"
	NsxvDhcpRelay_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NsxvDhcpRelay_Kind}.String()
	NsxvDhcpRelay_KindAPIVersion   = NsxvDhcpRelay_Kind + "." + CRDGroupVersion.String()
	NsxvDhcpRelay_GroupVersionKind = CRDGroupVersion.WithKind(NsxvDhcpRelay_Kind)
)

func init() {
	SchemeBuilder.Register(&NsxvDhcpRelay{}, &NsxvDhcpRelayList{})
}
