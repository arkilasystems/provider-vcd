// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NsxtDistributedFirewallRuleInitParameters struct {

	// ID of an existing vcd_nsxt_distributed_firewall_rule entry, above
	// which the newly created firewall rule will be positioned. Note. By default, new rule will be
	// created at the bottom of the list
	// An optional firewall rule ID, to put new rule above during creation
	AboveRuleID *string `json:"aboveRuleId,omitempty" tf:"above_rule_id,omitempty"`

	// Defines if it should ALLOW, DROP, REJECT traffic. REJECT is only
	// supported in VCD 10.2.2+
	// Defines if the rule should 'ALLOW', 'DROP', 'REJECT' matching traffic
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// An optional set of Application Port Profiles.
	// A set of Application Port Profile IDs. Leaving it empty means 'Any'
	// +listType=set
	AppPortProfileIds []*string `json:"appPortProfileIds,omitempty" tf:"app_port_profile_ids,omitempty"`

	// Comment field shown in UI
	// Comment that is shown next to rule in UI (VCD 10.3.2+)
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Description of firewall rule (not shown in UI)
	// Description is not shown in UI
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// - reverses value of destination_ids for
	// the rule to match everything except specified IDs.
	// Reverses firewall matching for to match all except Destinations Groups specified in 'destination_ids' (VCD 10.3.2+)
	DestinationGroupsExcluded *bool `json:"destinationGroupsExcluded,omitempty" tf:"destination_groups_excluded,omitempty"`

	// A set of source object Firewall Groups (IP Sets or Security groups). Leaving it empty matches Any (all)
	// A set of Destination Firewall Group IDs (IP Sets or Security Groups). Leaving it empty means 'Any'
	// +listType=set
	DestinationIds []*string `json:"destinationIds,omitempty" tf:"destination_ids,omitempty"`

	// One of IN, OUT, or IN_OUT. (default IN_OUT)
	// Direction on which Firewall Rule applies (one of 'IN', 'OUT', 'IN_OUT')
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// Defines if the rule is enabled (default true)
	// Defined if Firewall Rule is active
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// One of IPV4,  IPV6, or IPV4_IPV6 (default IPV4_IPV6)
	// Firewall Rule Protocol (one of 'IPV4', 'IPV6', 'IPV4_IPV6')
	IPProtocol *string `json:"ipProtocol,omitempty" tf:"ip_protocol,omitempty"`

	// Defines if logging for this rule is enabled (default false)
	// Defines if matching traffic should be logged
	Logging *bool `json:"logging,omitempty" tf:"logging,omitempty"`

	// Explanatory name for firewall rule (uniqueness not enforced)
	// Firewall Rule name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// An optional set of Network Context Profiles. Can be
	// looked up using vcd_nsxt_network_context_profile data source.
	// A set of Network Context Profile IDs. Leaving it empty means 'Any'
	// +listType=set
	NetworkContextProfileIds []*string `json:"networkContextProfileIds,omitempty" tf:"network_context_profile_ids,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// - reverses value of source_ids for the rule to
	// match everything except specified IDs.
	// Reverses firewall matching for to match all except Source Groups specified in 'source_ids' (VCD 10.3.2+)
	SourceGroupsExcluded *bool `json:"sourceGroupsExcluded,omitempty" tf:"source_groups_excluded,omitempty"`

	// A set of source object Firewall Groups (IP Sets or Security groups).
	// Leaving it empty matches Any (all)
	// A set of Source Firewall Group IDs (IP Sets or Security Groups). Leaving it empty means 'Any'
	// +listType=set
	SourceIds []*string `json:"sourceIds,omitempty" tf:"source_ids,omitempty"`

	// The ID of VDC Group to manage Distributed Firewall in. Can be looked
	// up using vcd_vdc_group resource or data source.
	// ID of VDC Group for Distributed Firewall
	VdcGroupID *string `json:"vdcGroupId,omitempty" tf:"vdc_group_id,omitempty"`
}

type NsxtDistributedFirewallRuleObservation struct {

	// ID of an existing vcd_nsxt_distributed_firewall_rule entry, above
	// which the newly created firewall rule will be positioned. Note. By default, new rule will be
	// created at the bottom of the list
	// An optional firewall rule ID, to put new rule above during creation
	AboveRuleID *string `json:"aboveRuleId,omitempty" tf:"above_rule_id,omitempty"`

	// Defines if it should ALLOW, DROP, REJECT traffic. REJECT is only
	// supported in VCD 10.2.2+
	// Defines if the rule should 'ALLOW', 'DROP', 'REJECT' matching traffic
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// An optional set of Application Port Profiles.
	// A set of Application Port Profile IDs. Leaving it empty means 'Any'
	// +listType=set
	AppPortProfileIds []*string `json:"appPortProfileIds,omitempty" tf:"app_port_profile_ids,omitempty"`

	// Comment field shown in UI
	// Comment that is shown next to rule in UI (VCD 10.3.2+)
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Description of firewall rule (not shown in UI)
	// Description is not shown in UI
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// - reverses value of destination_ids for
	// the rule to match everything except specified IDs.
	// Reverses firewall matching for to match all except Destinations Groups specified in 'destination_ids' (VCD 10.3.2+)
	DestinationGroupsExcluded *bool `json:"destinationGroupsExcluded,omitempty" tf:"destination_groups_excluded,omitempty"`

	// A set of source object Firewall Groups (IP Sets or Security groups). Leaving it empty matches Any (all)
	// A set of Destination Firewall Group IDs (IP Sets or Security Groups). Leaving it empty means 'Any'
	// +listType=set
	DestinationIds []*string `json:"destinationIds,omitempty" tf:"destination_ids,omitempty"`

	// One of IN, OUT, or IN_OUT. (default IN_OUT)
	// Direction on which Firewall Rule applies (one of 'IN', 'OUT', 'IN_OUT')
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// Defines if the rule is enabled (default true)
	// Defined if Firewall Rule is active
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// One of IPV4,  IPV6, or IPV4_IPV6 (default IPV4_IPV6)
	// Firewall Rule Protocol (one of 'IPV4', 'IPV6', 'IPV4_IPV6')
	IPProtocol *string `json:"ipProtocol,omitempty" tf:"ip_protocol,omitempty"`

	// Defines if logging for this rule is enabled (default false)
	// Defines if matching traffic should be logged
	Logging *bool `json:"logging,omitempty" tf:"logging,omitempty"`

	// Explanatory name for firewall rule (uniqueness not enforced)
	// Firewall Rule name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// An optional set of Network Context Profiles. Can be
	// looked up using vcd_nsxt_network_context_profile data source.
	// A set of Network Context Profile IDs. Leaving it empty means 'Any'
	// +listType=set
	NetworkContextProfileIds []*string `json:"networkContextProfileIds,omitempty" tf:"network_context_profile_ids,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// - reverses value of source_ids for the rule to
	// match everything except specified IDs.
	// Reverses firewall matching for to match all except Source Groups specified in 'source_ids' (VCD 10.3.2+)
	SourceGroupsExcluded *bool `json:"sourceGroupsExcluded,omitempty" tf:"source_groups_excluded,omitempty"`

	// A set of source object Firewall Groups (IP Sets or Security groups).
	// Leaving it empty matches Any (all)
	// A set of Source Firewall Group IDs (IP Sets or Security Groups). Leaving it empty means 'Any'
	// +listType=set
	SourceIds []*string `json:"sourceIds,omitempty" tf:"source_ids,omitempty"`

	// The ID of VDC Group to manage Distributed Firewall in. Can be looked
	// up using vcd_vdc_group resource or data source.
	// ID of VDC Group for Distributed Firewall
	VdcGroupID *string `json:"vdcGroupId,omitempty" tf:"vdc_group_id,omitempty"`
}

type NsxtDistributedFirewallRuleParameters struct {

	// ID of an existing vcd_nsxt_distributed_firewall_rule entry, above
	// which the newly created firewall rule will be positioned. Note. By default, new rule will be
	// created at the bottom of the list
	// An optional firewall rule ID, to put new rule above during creation
	// +kubebuilder:validation:Optional
	AboveRuleID *string `json:"aboveRuleId,omitempty" tf:"above_rule_id,omitempty"`

	// Defines if it should ALLOW, DROP, REJECT traffic. REJECT is only
	// supported in VCD 10.2.2+
	// Defines if the rule should 'ALLOW', 'DROP', 'REJECT' matching traffic
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// An optional set of Application Port Profiles.
	// A set of Application Port Profile IDs. Leaving it empty means 'Any'
	// +kubebuilder:validation:Optional
	// +listType=set
	AppPortProfileIds []*string `json:"appPortProfileIds,omitempty" tf:"app_port_profile_ids,omitempty"`

	// Comment field shown in UI
	// Comment that is shown next to rule in UI (VCD 10.3.2+)
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Description of firewall rule (not shown in UI)
	// Description is not shown in UI
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// - reverses value of destination_ids for
	// the rule to match everything except specified IDs.
	// Reverses firewall matching for to match all except Destinations Groups specified in 'destination_ids' (VCD 10.3.2+)
	// +kubebuilder:validation:Optional
	DestinationGroupsExcluded *bool `json:"destinationGroupsExcluded,omitempty" tf:"destination_groups_excluded,omitempty"`

	// A set of source object Firewall Groups (IP Sets or Security groups). Leaving it empty matches Any (all)
	// A set of Destination Firewall Group IDs (IP Sets or Security Groups). Leaving it empty means 'Any'
	// +kubebuilder:validation:Optional
	// +listType=set
	DestinationIds []*string `json:"destinationIds,omitempty" tf:"destination_ids,omitempty"`

	// One of IN, OUT, or IN_OUT. (default IN_OUT)
	// Direction on which Firewall Rule applies (one of 'IN', 'OUT', 'IN_OUT')
	// +kubebuilder:validation:Optional
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// Defines if the rule is enabled (default true)
	// Defined if Firewall Rule is active
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// One of IPV4,  IPV6, or IPV4_IPV6 (default IPV4_IPV6)
	// Firewall Rule Protocol (one of 'IPV4', 'IPV6', 'IPV4_IPV6')
	// +kubebuilder:validation:Optional
	IPProtocol *string `json:"ipProtocol,omitempty" tf:"ip_protocol,omitempty"`

	// Defines if logging for this rule is enabled (default false)
	// Defines if matching traffic should be logged
	// +kubebuilder:validation:Optional
	Logging *bool `json:"logging,omitempty" tf:"logging,omitempty"`

	// Explanatory name for firewall rule (uniqueness not enforced)
	// Firewall Rule name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// An optional set of Network Context Profiles. Can be
	// looked up using vcd_nsxt_network_context_profile data source.
	// A set of Network Context Profile IDs. Leaving it empty means 'Any'
	// +kubebuilder:validation:Optional
	// +listType=set
	NetworkContextProfileIds []*string `json:"networkContextProfileIds,omitempty" tf:"network_context_profile_ids,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// - reverses value of source_ids for the rule to
	// match everything except specified IDs.
	// Reverses firewall matching for to match all except Source Groups specified in 'source_ids' (VCD 10.3.2+)
	// +kubebuilder:validation:Optional
	SourceGroupsExcluded *bool `json:"sourceGroupsExcluded,omitempty" tf:"source_groups_excluded,omitempty"`

	// A set of source object Firewall Groups (IP Sets or Security groups).
	// Leaving it empty matches Any (all)
	// A set of Source Firewall Group IDs (IP Sets or Security Groups). Leaving it empty means 'Any'
	// +kubebuilder:validation:Optional
	// +listType=set
	SourceIds []*string `json:"sourceIds,omitempty" tf:"source_ids,omitempty"`

	// The ID of VDC Group to manage Distributed Firewall in. Can be looked
	// up using vcd_vdc_group resource or data source.
	// ID of VDC Group for Distributed Firewall
	// +kubebuilder:validation:Optional
	VdcGroupID *string `json:"vdcGroupId,omitempty" tf:"vdc_group_id,omitempty"`
}

// NsxtDistributedFirewallRuleSpec defines the desired state of NsxtDistributedFirewallRule
type NsxtDistributedFirewallRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NsxtDistributedFirewallRuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NsxtDistributedFirewallRuleInitParameters `json:"initProvider,omitempty"`
}

// NsxtDistributedFirewallRuleStatus defines the observed state of NsxtDistributedFirewallRule.
type NsxtDistributedFirewallRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NsxtDistributedFirewallRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NsxtDistributedFirewallRule is the Schema for the NsxtDistributedFirewallRules API. The Distributed Firewall rule allows user to segment organization network entities by creating firewall rules.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type NsxtDistributedFirewallRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.action) || (has(self.initProvider) && has(self.initProvider.action))",message="spec.forProvider.action is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vdcGroupId) || (has(self.initProvider) && has(self.initProvider.vdcGroupId))",message="spec.forProvider.vdcGroupId is a required parameter"
	Spec   NsxtDistributedFirewallRuleSpec   `json:"spec"`
	Status NsxtDistributedFirewallRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtDistributedFirewallRuleList contains a list of NsxtDistributedFirewallRules
type NsxtDistributedFirewallRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NsxtDistributedFirewallRule `json:"items"`
}

// Repository type metadata.
var (
	NsxtDistributedFirewallRule_Kind             = "NsxtDistributedFirewallRule"
	NsxtDistributedFirewallRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NsxtDistributedFirewallRule_Kind}.String()
	NsxtDistributedFirewallRule_KindAPIVersion   = NsxtDistributedFirewallRule_Kind + "." + CRDGroupVersion.String()
	NsxtDistributedFirewallRule_GroupVersionKind = CRDGroupVersion.WithKind(NsxtDistributedFirewallRule_Kind)
)

func init() {
	SchemeBuilder.Register(&NsxtDistributedFirewallRule{}, &NsxtDistributedFirewallRuleList{})
}
