// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecurityTagInitParameters struct {

	// The name of the security tag.
	// Security tag name to be created
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// List of VM IDs that the security tag is going to be applied to.
	// List of VM IDs that the security tags is going to be tied to
	// +listType=set
	VMIds []*string `json:"vmIds,omitempty" tf:"vm_ids,omitempty"`
}

type SecurityTagObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the security tag.
	// Security tag name to be created
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// List of VM IDs that the security tag is going to be applied to.
	// List of VM IDs that the security tags is going to be tied to
	// +listType=set
	VMIds []*string `json:"vmIds,omitempty" tf:"vm_ids,omitempty"`
}

type SecurityTagParameters struct {

	// The name of the security tag.
	// Security tag name to be created
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// List of VM IDs that the security tag is going to be applied to.
	// List of VM IDs that the security tags is going to be tied to
	// +kubebuilder:validation:Optional
	// +listType=set
	VMIds []*string `json:"vmIds,omitempty" tf:"vm_ids,omitempty"`
}

// SecurityTagSpec defines the desired state of SecurityTag
type SecurityTagSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecurityTagParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecurityTagInitParameters `json:"initProvider,omitempty"`
}

// SecurityTagStatus defines the observed state of SecurityTag.
type SecurityTagStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecurityTagObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SecurityTag is the Schema for the SecurityTags API. Provides a VMware Cloud Director Security Tag resource. This can be used to assign security tag to VMs.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type SecurityTag struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vmIds) || (has(self.initProvider) && has(self.initProvider.vmIds))",message="spec.forProvider.vmIds is a required parameter"
	Spec   SecurityTagSpec   `json:"spec"`
	Status SecurityTagStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityTagList contains a list of SecurityTags
type SecurityTagList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityTag `json:"items"`
}

// Repository type metadata.
var (
	SecurityTag_Kind             = "SecurityTag"
	SecurityTag_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecurityTag_Kind}.String()
	SecurityTag_KindAPIVersion   = SecurityTag_Kind + "." + CRDGroupVersion.String()
	SecurityTag_GroupVersionKind = CRDGroupVersion.WithKind(SecurityTag_Kind)
)

func init() {
	SchemeBuilder.Register(&SecurityTag{}, &SecurityTagList{})
}
