// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VmPlacementPolicyInitParameters struct {

	// description of VM Placement Policy.
	// Description of the VM Placement Policy
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// IDs of one or more Logical VM Groups to define this VM Placement policy. There is an AND relationship among all the entries set in this attribute. Note: Either vm_group_ids or logical_vm_group_ids must be set.
	// IDs of one or more Logical VM Groups to define this VM Placement Policy. There is an AND relationship among all the entries set in this attribute
	// +listType=set
	LogicalVMGroupIds []*string `json:"logicalVmGroupIds,omitempty" tf:"logical_vm_group_ids,omitempty"`

	// The name of VM Placement Policy.
	// Name of the VM Placement Policy
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the Provider VDC to which this VM Placement Policy belongs.
	// ID of the Provider VDC to which the VM Placement Policy belongs
	ProviderVdcID *string `json:"providerVdcId,omitempty" tf:"provider_vdc_id,omitempty"`

	// IDs of the collection of VMs with similar host requirements. Note: Either vm_group_ids or logical_vm_group_ids must be set.
	// IDs of the collection of VMs with similar host requirements
	// +listType=set
	VMGroupIds []*string `json:"vmGroupIds,omitempty" tf:"vm_group_ids,omitempty"`
}

type VmPlacementPolicyObservation struct {

	// description of VM Placement Policy.
	// Description of the VM Placement Policy
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IDs of one or more Logical VM Groups to define this VM Placement policy. There is an AND relationship among all the entries set in this attribute. Note: Either vm_group_ids or logical_vm_group_ids must be set.
	// IDs of one or more Logical VM Groups to define this VM Placement Policy. There is an AND relationship among all the entries set in this attribute
	// +listType=set
	LogicalVMGroupIds []*string `json:"logicalVmGroupIds,omitempty" tf:"logical_vm_group_ids,omitempty"`

	// The name of VM Placement Policy.
	// Name of the VM Placement Policy
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the Provider VDC to which this VM Placement Policy belongs.
	// ID of the Provider VDC to which the VM Placement Policy belongs
	ProviderVdcID *string `json:"providerVdcId,omitempty" tf:"provider_vdc_id,omitempty"`

	// IDs of the collection of VMs with similar host requirements. Note: Either vm_group_ids or logical_vm_group_ids must be set.
	// IDs of the collection of VMs with similar host requirements
	// +listType=set
	VMGroupIds []*string `json:"vmGroupIds,omitempty" tf:"vm_group_ids,omitempty"`
}

type VmPlacementPolicyParameters struct {

	// description of VM Placement Policy.
	// Description of the VM Placement Policy
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// IDs of one or more Logical VM Groups to define this VM Placement policy. There is an AND relationship among all the entries set in this attribute. Note: Either vm_group_ids or logical_vm_group_ids must be set.
	// IDs of one or more Logical VM Groups to define this VM Placement Policy. There is an AND relationship among all the entries set in this attribute
	// +kubebuilder:validation:Optional
	// +listType=set
	LogicalVMGroupIds []*string `json:"logicalVmGroupIds,omitempty" tf:"logical_vm_group_ids,omitempty"`

	// The name of VM Placement Policy.
	// Name of the VM Placement Policy
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the Provider VDC to which this VM Placement Policy belongs.
	// ID of the Provider VDC to which the VM Placement Policy belongs
	// +kubebuilder:validation:Optional
	ProviderVdcID *string `json:"providerVdcId,omitempty" tf:"provider_vdc_id,omitempty"`

	// IDs of the collection of VMs with similar host requirements. Note: Either vm_group_ids or logical_vm_group_ids must be set.
	// IDs of the collection of VMs with similar host requirements
	// +kubebuilder:validation:Optional
	// +listType=set
	VMGroupIds []*string `json:"vmGroupIds,omitempty" tf:"vm_group_ids,omitempty"`
}

// VmPlacementPolicySpec defines the desired state of VmPlacementPolicy
type VmPlacementPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VmPlacementPolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VmPlacementPolicyInitParameters `json:"initProvider,omitempty"`
}

// VmPlacementPolicyStatus defines the observed state of VmPlacementPolicy.
type VmPlacementPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VmPlacementPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VmPlacementPolicy is the Schema for the VmPlacementPolicys API. Provides a VMware Cloud Director VM Placement Policy resource. This can be used to create, modify, and delete VM Placement Policies.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type VmPlacementPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.providerVdcId) || (has(self.initProvider) && has(self.initProvider.providerVdcId))",message="spec.forProvider.providerVdcId is a required parameter"
	Spec   VmPlacementPolicySpec   `json:"spec"`
	Status VmPlacementPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VmPlacementPolicyList contains a list of VmPlacementPolicys
type VmPlacementPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VmPlacementPolicy `json:"items"`
}

// Repository type metadata.
var (
	VmPlacementPolicy_Kind             = "VmPlacementPolicy"
	VmPlacementPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VmPlacementPolicy_Kind}.String()
	VmPlacementPolicy_KindAPIVersion   = VmPlacementPolicy_Kind + "." + CRDGroupVersion.String()
	VmPlacementPolicy_GroupVersionKind = CRDGroupVersion.WithKind(VmPlacementPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&VmPlacementPolicy{}, &VmPlacementPolicyList{})
}
