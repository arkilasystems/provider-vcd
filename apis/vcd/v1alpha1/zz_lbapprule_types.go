// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LbAppRuleInitParameters struct {

	// The name of the edge gateway on which the application rule is to be created
	// Edge gateway name in which the LB Application Rule is located
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// Application rule name
	// Unique LB Application Rule name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// A multiline application rule script. Note: For information on
	// the application rule syntax, see more in [VMware Cloud Director documentation]
	// (https://docs.vmware.com/en/vCloud-Director/9.7/com.vmware.vcloud.tenantportal.doc/GUID-AFF9F70F-85C9-4053-BA69-F2B062F34C7F.html)
	// The script for the application rule. Note - you may find HEREDOC useful to pass multiline strings
	Script *string `json:"script,omitempty" tf:"script,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type LbAppRuleObservation struct {

	// The name of the edge gateway on which the application rule is to be created
	// Edge gateway name in which the LB Application Rule is located
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// The NSX ID of the load balancer application rule
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Application rule name
	// Unique LB Application Rule name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// A multiline application rule script. Note: For information on
	// the application rule syntax, see more in [VMware Cloud Director documentation]
	// (https://docs.vmware.com/en/vCloud-Director/9.7/com.vmware.vcloud.tenantportal.doc/GUID-AFF9F70F-85C9-4053-BA69-F2B062F34C7F.html)
	// The script for the application rule. Note - you may find HEREDOC useful to pass multiline strings
	Script *string `json:"script,omitempty" tf:"script,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type LbAppRuleParameters struct {

	// The name of the edge gateway on which the application rule is to be created
	// Edge gateway name in which the LB Application Rule is located
	// +kubebuilder:validation:Optional
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// Application rule name
	// Unique LB Application Rule name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// A multiline application rule script. Note: For information on
	// the application rule syntax, see more in [VMware Cloud Director documentation]
	// (https://docs.vmware.com/en/vCloud-Director/9.7/com.vmware.vcloud.tenantportal.doc/GUID-AFF9F70F-85C9-4053-BA69-F2B062F34C7F.html)
	// The script for the application rule. Note - you may find HEREDOC useful to pass multiline strings
	// +kubebuilder:validation:Optional
	Script *string `json:"script,omitempty" tf:"script,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

// LbAppRuleSpec defines the desired state of LbAppRule
type LbAppRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LbAppRuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LbAppRuleInitParameters `json:"initProvider,omitempty"`
}

// LbAppRuleStatus defines the observed state of LbAppRule.
type LbAppRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LbAppRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// LbAppRule is the Schema for the LbAppRules API. Provides an NSX edge gateway load balancer application rule resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type LbAppRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.edgeGateway) || (has(self.initProvider) && has(self.initProvider.edgeGateway))",message="spec.forProvider.edgeGateway is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.script) || (has(self.initProvider) && has(self.initProvider.script))",message="spec.forProvider.script is a required parameter"
	Spec   LbAppRuleSpec   `json:"spec"`
	Status LbAppRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LbAppRuleList contains a list of LbAppRules
type LbAppRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LbAppRule `json:"items"`
}

// Repository type metadata.
var (
	LbAppRule_Kind             = "LbAppRule"
	LbAppRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LbAppRule_Kind}.String()
	LbAppRule_KindAPIVersion   = LbAppRule_Kind + "." + CRDGroupVersion.String()
	LbAppRule_GroupVersionKind = CRDGroupVersion.WithKind(LbAppRule_Kind)
)

func init() {
	SchemeBuilder.Register(&LbAppRule{}, &LbAppRuleList{})
}
