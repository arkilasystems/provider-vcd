// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NsxtAlbCloudInitParameters struct {

	// ALB Controller ID
	// NSX-T ALB Controller ID
	ControllerID *string `json:"controllerId,omitempty" tf:"controller_id,omitempty"`

	// An optional description ALB Cloud
	// NSX-T ALB Cloud description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Importable Cloud ID. Can be looked up using vcd_nsxt_alb_importable_cloud data
	// source
	// NSX-T ALB Importable Cloud ID
	ImportableCloudID *string `json:"importableCloudId,omitempty" tf:"importable_cloud_id,omitempty"`

	// A name for ALB Cloud
	// NSX-T ALB Cloud name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Network pool ID for ALB Cloud. Can be looked up using vcd_nsxt_alb_importable_cloud data
	// source
	// Network pool ID for NSX-T ALB Importable Cloud
	NetworkPoolID *string `json:"networkPoolId,omitempty" tf:"network_pool_id,omitempty"`
}

type NsxtAlbCloudObservation struct {

	// ALB Controller ID
	// NSX-T ALB Controller ID
	ControllerID *string `json:"controllerId,omitempty" tf:"controller_id,omitempty"`

	// An optional description ALB Cloud
	// NSX-T ALB Cloud description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// DetailedHealthMessage contains detailed message on the health of the Cloud
	// NSX-T ALB Cloud detailed health message
	HealthMessage *string `json:"healthMessage,omitempty" tf:"health_message,omitempty"`

	// HealthStatus contains status of the Load Balancer Cloud. Possible values are:
	// NSX-T ALB Cloud health status
	HealthStatus *string `json:"healthStatus,omitempty" tf:"health_status,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Importable Cloud ID. Can be looked up using vcd_nsxt_alb_importable_cloud data
	// source
	// NSX-T ALB Importable Cloud ID
	ImportableCloudID *string `json:"importableCloudId,omitempty" tf:"importable_cloud_id,omitempty"`

	// A name for ALB Cloud
	// NSX-T ALB Cloud name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Network pool ID for ALB Cloud. Can be looked up using vcd_nsxt_alb_importable_cloud data
	// source
	// Network pool ID for NSX-T ALB Importable Cloud
	NetworkPoolID *string `json:"networkPoolId,omitempty" tf:"network_pool_id,omitempty"`

	// Network Pool Name used by the Cloud
	// Network pool name of NSX-T ALB Cloud
	NetworkPoolName *string `json:"networkPoolName,omitempty" tf:"network_pool_name,omitempty"`
}

type NsxtAlbCloudParameters struct {

	// ALB Controller ID
	// NSX-T ALB Controller ID
	// +kubebuilder:validation:Optional
	ControllerID *string `json:"controllerId,omitempty" tf:"controller_id,omitempty"`

	// An optional description ALB Cloud
	// NSX-T ALB Cloud description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Importable Cloud ID. Can be looked up using vcd_nsxt_alb_importable_cloud data
	// source
	// NSX-T ALB Importable Cloud ID
	// +kubebuilder:validation:Optional
	ImportableCloudID *string `json:"importableCloudId,omitempty" tf:"importable_cloud_id,omitempty"`

	// A name for ALB Cloud
	// NSX-T ALB Cloud name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Network pool ID for ALB Cloud. Can be looked up using vcd_nsxt_alb_importable_cloud data
	// source
	// Network pool ID for NSX-T ALB Importable Cloud
	// +kubebuilder:validation:Optional
	NetworkPoolID *string `json:"networkPoolId,omitempty" tf:"network_pool_id,omitempty"`
}

// NsxtAlbCloudSpec defines the desired state of NsxtAlbCloud
type NsxtAlbCloudSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NsxtAlbCloudParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NsxtAlbCloudInitParameters `json:"initProvider,omitempty"`
}

// NsxtAlbCloudStatus defines the observed state of NsxtAlbCloud.
type NsxtAlbCloudStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NsxtAlbCloudObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NsxtAlbCloud is the Schema for the NsxtAlbClouds API. Provides a resource to manage ALB Clouds for Providers. An NSX-T Cloud is a service provider-level construct that consists of an NSX-T Manager and an NSX-T Data Center transport zone.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type NsxtAlbCloud struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.controllerId) || (has(self.initProvider) && has(self.initProvider.controllerId))",message="spec.forProvider.controllerId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.importableCloudId) || (has(self.initProvider) && has(self.initProvider.importableCloudId))",message="spec.forProvider.importableCloudId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.networkPoolId) || (has(self.initProvider) && has(self.initProvider.networkPoolId))",message="spec.forProvider.networkPoolId is a required parameter"
	Spec   NsxtAlbCloudSpec   `json:"spec"`
	Status NsxtAlbCloudStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtAlbCloudList contains a list of NsxtAlbClouds
type NsxtAlbCloudList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NsxtAlbCloud `json:"items"`
}

// Repository type metadata.
var (
	NsxtAlbCloud_Kind             = "NsxtAlbCloud"
	NsxtAlbCloud_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NsxtAlbCloud_Kind}.String()
	NsxtAlbCloud_KindAPIVersion   = NsxtAlbCloud_Kind + "." + CRDGroupVersion.String()
	NsxtAlbCloud_GroupVersionKind = CRDGroupVersion.WithKind(NsxtAlbCloud_Kind)
)

func init() {
	SchemeBuilder.Register(&NsxtAlbCloud{}, &NsxtAlbCloudList{})
}
