// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NsxtAlbVirtualServiceInitParameters struct {

	// One of HTTP, HTTPS, L4, L4_TLS.
	// HTTP, HTTPS, L4, L4_TLS
	ApplicationProfileType *string `json:"applicationProfileType,omitempty" tf:"application_profile_type,omitempty"`

	// ID reference of CA certificate. Required when application_profile_type is HTTPS
	// or L4_TLS
	// Optional certificate ID to use for exposing service
	CACertificateID *string `json:"caCertificateId,omitempty" tf:"ca_certificate_id,omitempty"`

	// An optional description ALB Virtual Service
	// Description of ALB Virtual Service
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// An ID of NSX-T Edge Gateway. Can be looked up using
	// vcd_nsxt_edgegateway data source
	// Edge gateway ID in which ALB Pool should be created
	EdgeGatewayID *string `json:"edgeGatewayId,omitempty" tf:"edge_gateway_id,omitempty"`

	// Virtual Service is enabled or disabled (default true)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// IPv6 Address for the service to listen on.
	// IPv6 Virtual IP address (VIP) for Virtual Service (VCD 10.4.0+)
	IPv6VirtualIPAddress *string `json:"ipv6VirtualIpAddress,omitempty" tf:"ipv6_virtual_ip_address,omitempty"`

	// Preserves Client IP on a
	// Virtual Service. Note - the following criteria must be matched to make transparent mode work:
	// Preserves Client IP on a Virtual Service (VCD 10.4.1+)
	IsTransparentModeEnabled *bool `json:"isTransparentModeEnabled,omitempty" tf:"is_transparent_mode_enabled,omitempty"`

	// A name for ALB Virtual Service
	// Name of ALB Virtual Service
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// A reference to ALB Pool. Can be looked up using vcd_nsxt_alb_pool resource or data
	// source
	// Pool ID
	PoolID *string `json:"poolId,omitempty" tf:"pool_id,omitempty"`

	// A reference to ALB Service Engine Group. Can be looked up using
	// vcd_nsxt_alb_edgegateway_service_engine_group resource or data source
	// Service Engine Group ID
	ServiceEngineGroupID *string `json:"serviceEngineGroupId,omitempty" tf:"service_engine_group_id,omitempty"`

	// A block to define port, port range and traffic type. Multiple can be used. See
	// service_port and example for usage details.
	ServicePort []ServicePortInitParameters `json:"servicePort,omitempty" tf:"service_port,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`

	// IP Address for the service to listen on.
	// Virtual IP address (VIP) for Virtual Service
	VirtualIPAddress *string `json:"virtualIpAddress,omitempty" tf:"virtual_ip_address,omitempty"`
}

type NsxtAlbVirtualServiceObservation struct {

	// One of HTTP, HTTPS, L4, L4_TLS.
	// HTTP, HTTPS, L4, L4_TLS
	ApplicationProfileType *string `json:"applicationProfileType,omitempty" tf:"application_profile_type,omitempty"`

	// ID reference of CA certificate. Required when application_profile_type is HTTPS
	// or L4_TLS
	// Optional certificate ID to use for exposing service
	CACertificateID *string `json:"caCertificateId,omitempty" tf:"ca_certificate_id,omitempty"`

	// An optional description ALB Virtual Service
	// Description of ALB Virtual Service
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// An ID of NSX-T Edge Gateway. Can be looked up using
	// vcd_nsxt_edgegateway data source
	// Edge gateway ID in which ALB Pool should be created
	EdgeGatewayID *string `json:"edgeGatewayId,omitempty" tf:"edge_gateway_id,omitempty"`

	// Virtual Service is enabled or disabled (default true)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IPv6 Address for the service to listen on.
	// IPv6 Virtual IP address (VIP) for Virtual Service (VCD 10.4.0+)
	IPv6VirtualIPAddress *string `json:"ipv6VirtualIpAddress,omitempty" tf:"ipv6_virtual_ip_address,omitempty"`

	// Preserves Client IP on a
	// Virtual Service. Note - the following criteria must be matched to make transparent mode work:
	// Preserves Client IP on a Virtual Service (VCD 10.4.1+)
	IsTransparentModeEnabled *bool `json:"isTransparentModeEnabled,omitempty" tf:"is_transparent_mode_enabled,omitempty"`

	// A name for ALB Virtual Service
	// Name of ALB Virtual Service
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// A reference to ALB Pool. Can be looked up using vcd_nsxt_alb_pool resource or data
	// source
	// Pool ID
	PoolID *string `json:"poolId,omitempty" tf:"pool_id,omitempty"`

	// A reference to ALB Service Engine Group. Can be looked up using
	// vcd_nsxt_alb_edgegateway_service_engine_group resource or data source
	// Service Engine Group ID
	ServiceEngineGroupID *string `json:"serviceEngineGroupId,omitempty" tf:"service_engine_group_id,omitempty"`

	// A block to define port, port range and traffic type. Multiple can be used. See
	// service_port and example for usage details.
	ServicePort []ServicePortObservation `json:"servicePort,omitempty" tf:"service_port,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`

	// IP Address for the service to listen on.
	// Virtual IP address (VIP) for Virtual Service
	VirtualIPAddress *string `json:"virtualIpAddress,omitempty" tf:"virtual_ip_address,omitempty"`
}

type NsxtAlbVirtualServiceParameters struct {

	// One of HTTP, HTTPS, L4, L4_TLS.
	// HTTP, HTTPS, L4, L4_TLS
	// +kubebuilder:validation:Optional
	ApplicationProfileType *string `json:"applicationProfileType,omitempty" tf:"application_profile_type,omitempty"`

	// ID reference of CA certificate. Required when application_profile_type is HTTPS
	// or L4_TLS
	// Optional certificate ID to use for exposing service
	// +kubebuilder:validation:Optional
	CACertificateID *string `json:"caCertificateId,omitempty" tf:"ca_certificate_id,omitempty"`

	// An optional description ALB Virtual Service
	// Description of ALB Virtual Service
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// An ID of NSX-T Edge Gateway. Can be looked up using
	// vcd_nsxt_edgegateway data source
	// Edge gateway ID in which ALB Pool should be created
	// +kubebuilder:validation:Optional
	EdgeGatewayID *string `json:"edgeGatewayId,omitempty" tf:"edge_gateway_id,omitempty"`

	// Virtual Service is enabled or disabled (default true)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// IPv6 Address for the service to listen on.
	// IPv6 Virtual IP address (VIP) for Virtual Service (VCD 10.4.0+)
	// +kubebuilder:validation:Optional
	IPv6VirtualIPAddress *string `json:"ipv6VirtualIpAddress,omitempty" tf:"ipv6_virtual_ip_address,omitempty"`

	// Preserves Client IP on a
	// Virtual Service. Note - the following criteria must be matched to make transparent mode work:
	// Preserves Client IP on a Virtual Service (VCD 10.4.1+)
	// +kubebuilder:validation:Optional
	IsTransparentModeEnabled *bool `json:"isTransparentModeEnabled,omitempty" tf:"is_transparent_mode_enabled,omitempty"`

	// A name for ALB Virtual Service
	// Name of ALB Virtual Service
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// A reference to ALB Pool. Can be looked up using vcd_nsxt_alb_pool resource or data
	// source
	// Pool ID
	// +kubebuilder:validation:Optional
	PoolID *string `json:"poolId,omitempty" tf:"pool_id,omitempty"`

	// A reference to ALB Service Engine Group. Can be looked up using
	// vcd_nsxt_alb_edgegateway_service_engine_group resource or data source
	// Service Engine Group ID
	// +kubebuilder:validation:Optional
	ServiceEngineGroupID *string `json:"serviceEngineGroupId,omitempty" tf:"service_engine_group_id,omitempty"`

	// A block to define port, port range and traffic type. Multiple can be used. See
	// service_port and example for usage details.
	// +kubebuilder:validation:Optional
	ServicePort []ServicePortParameters `json:"servicePort,omitempty" tf:"service_port,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`

	// IP Address for the service to listen on.
	// Virtual IP address (VIP) for Virtual Service
	// +kubebuilder:validation:Optional
	VirtualIPAddress *string `json:"virtualIpAddress,omitempty" tf:"virtual_ip_address,omitempty"`
}

type ServicePortInitParameters struct {

	// Only required to specify port range and is not needed for single port values
	// Last port in the range
	EndPort *float64 `json:"endPort,omitempty" tf:"end_port,omitempty"`

	// Must be enabled if CA certificate is to be used for this port. Default false
	// Defines if certificate should be used
	SSLEnabled *bool `json:"sslEnabled,omitempty" tf:"ssl_enabled,omitempty"`

	// Starting port in the range or exact port number
	// Starting port in the range
	StartPort *float64 `json:"startPort,omitempty" tf:"start_port,omitempty"`

	// One of TCP_PROXY, TCP_FAST_PATH, UDP_FAST_PATH
	// One of 'TCP_PROXY', 'TCP_FAST_PATH', 'UDP_FAST_PATH'
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ServicePortObservation struct {

	// Only required to specify port range and is not needed for single port values
	// Last port in the range
	EndPort *float64 `json:"endPort,omitempty" tf:"end_port,omitempty"`

	// Must be enabled if CA certificate is to be used for this port. Default false
	// Defines if certificate should be used
	SSLEnabled *bool `json:"sslEnabled,omitempty" tf:"ssl_enabled,omitempty"`

	// Starting port in the range or exact port number
	// Starting port in the range
	StartPort *float64 `json:"startPort,omitempty" tf:"start_port,omitempty"`

	// One of TCP_PROXY, TCP_FAST_PATH, UDP_FAST_PATH
	// One of 'TCP_PROXY', 'TCP_FAST_PATH', 'UDP_FAST_PATH'
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ServicePortParameters struct {

	// Only required to specify port range and is not needed for single port values
	// Last port in the range
	// +kubebuilder:validation:Optional
	EndPort *float64 `json:"endPort,omitempty" tf:"end_port,omitempty"`

	// Must be enabled if CA certificate is to be used for this port. Default false
	// Defines if certificate should be used
	// +kubebuilder:validation:Optional
	SSLEnabled *bool `json:"sslEnabled,omitempty" tf:"ssl_enabled,omitempty"`

	// Starting port in the range or exact port number
	// Starting port in the range
	// +kubebuilder:validation:Optional
	StartPort *float64 `json:"startPort" tf:"start_port,omitempty"`

	// One of TCP_PROXY, TCP_FAST_PATH, UDP_FAST_PATH
	// One of 'TCP_PROXY', 'TCP_FAST_PATH', 'UDP_FAST_PATH'
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

// NsxtAlbVirtualServiceSpec defines the desired state of NsxtAlbVirtualService
type NsxtAlbVirtualServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NsxtAlbVirtualServiceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NsxtAlbVirtualServiceInitParameters `json:"initProvider,omitempty"`
}

// NsxtAlbVirtualServiceStatus defines the observed state of NsxtAlbVirtualService.
type NsxtAlbVirtualServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NsxtAlbVirtualServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NsxtAlbVirtualService is the Schema for the NsxtAlbVirtualServices API. Provides a resource to manage ALB Virtual services for particular NSX-T Edge Gateway. A virtual service advertises an IP address and ports to the external world and listens for client traffic. When a virtual service receives traffic, it directs it to members in ALB Pool.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type NsxtAlbVirtualService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.applicationProfileType) || (has(self.initProvider) && has(self.initProvider.applicationProfileType))",message="spec.forProvider.applicationProfileType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.edgeGatewayId) || (has(self.initProvider) && has(self.initProvider.edgeGatewayId))",message="spec.forProvider.edgeGatewayId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.poolId) || (has(self.initProvider) && has(self.initProvider.poolId))",message="spec.forProvider.poolId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceEngineGroupId) || (has(self.initProvider) && has(self.initProvider.serviceEngineGroupId))",message="spec.forProvider.serviceEngineGroupId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.virtualIpAddress) || (has(self.initProvider) && has(self.initProvider.virtualIpAddress))",message="spec.forProvider.virtualIpAddress is a required parameter"
	Spec   NsxtAlbVirtualServiceSpec   `json:"spec"`
	Status NsxtAlbVirtualServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtAlbVirtualServiceList contains a list of NsxtAlbVirtualServices
type NsxtAlbVirtualServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NsxtAlbVirtualService `json:"items"`
}

// Repository type metadata.
var (
	NsxtAlbVirtualService_Kind             = "NsxtAlbVirtualService"
	NsxtAlbVirtualService_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NsxtAlbVirtualService_Kind}.String()
	NsxtAlbVirtualService_KindAPIVersion   = NsxtAlbVirtualService_Kind + "." + CRDGroupVersion.String()
	NsxtAlbVirtualService_GroupVersionKind = CRDGroupVersion.WithKind(NsxtAlbVirtualService_Kind)
)

func init() {
	SchemeBuilder.Register(&NsxtAlbVirtualService{}, &NsxtAlbVirtualServiceList{})
}
