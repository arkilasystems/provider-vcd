// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RdeTypeBehaviorAclInitParameters struct {

	// Set of Access Level IDs to associate to the Behavior defined in behavior_id argument.
	// Take into account that "urn:vcloud:accessLevel:FullControl" implicitly contains "urn:vcloud:accessLevel:ReadOnly".
	// Set of Access Level IDs to associate to the Behavior defined in `behavior_id` argument
	// +listType=set
	AccessLevelIds []*string `json:"accessLevelIds,omitempty" tf:"access_level_ids,omitempty"`

	// The ID of either a RDE Type Behavior
	// or a RDE Interface Behavior
	// The ID of either a RDE Interface Behavior or RDE Type Behavior
	BehaviorID *string `json:"behaviorId,omitempty" tf:"behavior_id,omitempty"`

	// The ID of the RDE Type
	// The ID of the RDE Type
	RdeTypeID *string `json:"rdeTypeId,omitempty" tf:"rde_type_id,omitempty"`
}

type RdeTypeBehaviorAclObservation struct {

	// Set of Access Level IDs to associate to the Behavior defined in behavior_id argument.
	// Take into account that "urn:vcloud:accessLevel:FullControl" implicitly contains "urn:vcloud:accessLevel:ReadOnly".
	// Set of Access Level IDs to associate to the Behavior defined in `behavior_id` argument
	// +listType=set
	AccessLevelIds []*string `json:"accessLevelIds,omitempty" tf:"access_level_ids,omitempty"`

	// The ID of either a RDE Type Behavior
	// or a RDE Interface Behavior
	// The ID of either a RDE Interface Behavior or RDE Type Behavior
	BehaviorID *string `json:"behaviorId,omitempty" tf:"behavior_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the RDE Type
	// The ID of the RDE Type
	RdeTypeID *string `json:"rdeTypeId,omitempty" tf:"rde_type_id,omitempty"`
}

type RdeTypeBehaviorAclParameters struct {

	// Set of Access Level IDs to associate to the Behavior defined in behavior_id argument.
	// Take into account that "urn:vcloud:accessLevel:FullControl" implicitly contains "urn:vcloud:accessLevel:ReadOnly".
	// Set of Access Level IDs to associate to the Behavior defined in `behavior_id` argument
	// +kubebuilder:validation:Optional
	// +listType=set
	AccessLevelIds []*string `json:"accessLevelIds,omitempty" tf:"access_level_ids,omitempty"`

	// The ID of either a RDE Type Behavior
	// or a RDE Interface Behavior
	// The ID of either a RDE Interface Behavior or RDE Type Behavior
	// +kubebuilder:validation:Optional
	BehaviorID *string `json:"behaviorId,omitempty" tf:"behavior_id,omitempty"`

	// The ID of the RDE Type
	// The ID of the RDE Type
	// +kubebuilder:validation:Optional
	RdeTypeID *string `json:"rdeTypeId,omitempty" tf:"rde_type_id,omitempty"`
}

// RdeTypeBehaviorAclSpec defines the desired state of RdeTypeBehaviorAcl
type RdeTypeBehaviorAclSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RdeTypeBehaviorAclParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RdeTypeBehaviorAclInitParameters `json:"initProvider,omitempty"`
}

// RdeTypeBehaviorAclStatus defines the observed state of RdeTypeBehaviorAcl.
type RdeTypeBehaviorAclStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RdeTypeBehaviorAclObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RdeTypeBehaviorAcl is the Schema for the RdeTypeBehaviorAcls API. Provides the capability of managing RDE Type Behavior Access Levels in VMware Cloud Director.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type RdeTypeBehaviorAcl struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accessLevelIds) || (has(self.initProvider) && has(self.initProvider.accessLevelIds))",message="spec.forProvider.accessLevelIds is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.behaviorId) || (has(self.initProvider) && has(self.initProvider.behaviorId))",message="spec.forProvider.behaviorId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rdeTypeId) || (has(self.initProvider) && has(self.initProvider.rdeTypeId))",message="spec.forProvider.rdeTypeId is a required parameter"
	Spec   RdeTypeBehaviorAclSpec   `json:"spec"`
	Status RdeTypeBehaviorAclStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RdeTypeBehaviorAclList contains a list of RdeTypeBehaviorAcls
type RdeTypeBehaviorAclList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RdeTypeBehaviorAcl `json:"items"`
}

// Repository type metadata.
var (
	RdeTypeBehaviorAcl_Kind             = "RdeTypeBehaviorAcl"
	RdeTypeBehaviorAcl_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RdeTypeBehaviorAcl_Kind}.String()
	RdeTypeBehaviorAcl_KindAPIVersion   = RdeTypeBehaviorAcl_Kind + "." + CRDGroupVersion.String()
	RdeTypeBehaviorAcl_GroupVersionKind = CRDGroupVersion.WithKind(RdeTypeBehaviorAcl_Kind)
)

func init() {
	SchemeBuilder.Register(&RdeTypeBehaviorAcl{}, &RdeTypeBehaviorAclList{})
}
