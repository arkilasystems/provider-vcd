// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NsxtAlbServiceEngineGroupInitParameters struct {

	// A reference ALB Cloud. Can be looked up using vcd_nsxt_alb_cloud resource or data
	// source
	// NSX-T ALB backing Cloud ID
	ALBCloudID *string `json:"albCloudId,omitempty" tf:"alb_cloud_id,omitempty"`

	// An optional description ALB Service Engine Group
	// NSX-T ALB Service Engine Group description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name of available Service Engine Group in ALB
	// NSX-T ALB Importable Service Engine Group Name
	ImportableServiceEngineGroupName *string `json:"importableServiceEngineGroupName,omitempty" tf:"importable_service_engine_group_name,omitempty"`

	// A name for ALB Service Engine Group
	// NSX-T ALB Service Engine Group name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Boolean value stating if there are more deployed virtual services than allocated ones
	// Boolean value that shows if virtual services are overallocated
	Overallocated *bool `json:"overallocated,omitempty" tf:"overallocated,omitempty"`

	// Definition if the Service Engine Group is DEDICATED or SHARED
	// NSX-T ALB Service Engine Group reservation model. One of 'DEDICATED', 'SHARED'
	ReservationModel *string `json:"reservationModel,omitempty" tf:"reservation_model,omitempty"`

	// Feature set of this ALB Service Engine Group (STANDARD or PREMIUM)
	// Feature set for this ALB Service Engine Group. One of 'STANDARD', 'PREMIUM'.
	SupportedFeatureSet *string `json:"supportedFeatureSet,omitempty" tf:"supported_feature_set,omitempty"`

	// Note this may impact refresh performance, but should
	// ensure up-to-date information is read. Default is false.
	// Boolean value that shows if sync should be performed on every refresh
	SyncOnRefresh *bool `json:"syncOnRefresh,omitempty" tf:"sync_on_refresh,omitempty"`
}

type NsxtAlbServiceEngineGroupObservation struct {

	// A reference ALB Cloud. Can be looked up using vcd_nsxt_alb_cloud resource or data
	// source
	// NSX-T ALB backing Cloud ID
	ALBCloudID *string `json:"albCloudId,omitempty" tf:"alb_cloud_id,omitempty"`

	// Number of deployed virtual services
	// NSX-T ALB Service Engine Group deployed virtual services
	DeployedVirtualServices *float64 `json:"deployedVirtualServices,omitempty" tf:"deployed_virtual_services,omitempty"`

	// An optional description ALB Service Engine Group
	// NSX-T ALB Service Engine Group description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// defines High Availability Mode for Service Engine Group. One off:
	// NSX-T ALB Service Engine Group HA mode
	HaMode *string `json:"haMode,omitempty" tf:"ha_mode,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of available Service Engine Group in ALB
	// NSX-T ALB Importable Service Engine Group Name
	ImportableServiceEngineGroupName *string `json:"importableServiceEngineGroupName,omitempty" tf:"importable_service_engine_group_name,omitempty"`

	// Maximum number of virtual services this ALB Service Engine Group can run
	// NSX-T ALB Service Engine Group maximum virtual services
	MaxVirtualServices *float64 `json:"maxVirtualServices,omitempty" tf:"max_virtual_services,omitempty"`

	// A name for ALB Service Engine Group
	// NSX-T ALB Service Engine Group name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Boolean value stating if there are more deployed virtual services than allocated ones
	// Boolean value that shows if virtual services are overallocated
	Overallocated *bool `json:"overallocated,omitempty" tf:"overallocated,omitempty"`

	// Definition if the Service Engine Group is DEDICATED or SHARED
	// NSX-T ALB Service Engine Group reservation model. One of 'DEDICATED', 'SHARED'
	ReservationModel *string `json:"reservationModel,omitempty" tf:"reservation_model,omitempty"`

	// Number of reserved virtual services
	// NSX-T ALB Service Engine Group reserved virtual services
	ReservedVirtualServices *float64 `json:"reservedVirtualServices,omitempty" tf:"reserved_virtual_services,omitempty"`

	// Feature set of this ALB Service Engine Group (STANDARD or PREMIUM)
	// Feature set for this ALB Service Engine Group. One of 'STANDARD', 'PREMIUM'.
	SupportedFeatureSet *string `json:"supportedFeatureSet,omitempty" tf:"supported_feature_set,omitempty"`

	// Note this may impact refresh performance, but should
	// ensure up-to-date information is read. Default is false.
	// Boolean value that shows if sync should be performed on every refresh
	SyncOnRefresh *bool `json:"syncOnRefresh,omitempty" tf:"sync_on_refresh,omitempty"`
}

type NsxtAlbServiceEngineGroupParameters struct {

	// A reference ALB Cloud. Can be looked up using vcd_nsxt_alb_cloud resource or data
	// source
	// NSX-T ALB backing Cloud ID
	// +kubebuilder:validation:Optional
	ALBCloudID *string `json:"albCloudId,omitempty" tf:"alb_cloud_id,omitempty"`

	// An optional description ALB Service Engine Group
	// NSX-T ALB Service Engine Group description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name of available Service Engine Group in ALB
	// NSX-T ALB Importable Service Engine Group Name
	// +kubebuilder:validation:Optional
	ImportableServiceEngineGroupName *string `json:"importableServiceEngineGroupName,omitempty" tf:"importable_service_engine_group_name,omitempty"`

	// A name for ALB Service Engine Group
	// NSX-T ALB Service Engine Group name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Boolean value stating if there are more deployed virtual services than allocated ones
	// Boolean value that shows if virtual services are overallocated
	// +kubebuilder:validation:Optional
	Overallocated *bool `json:"overallocated,omitempty" tf:"overallocated,omitempty"`

	// Definition if the Service Engine Group is DEDICATED or SHARED
	// NSX-T ALB Service Engine Group reservation model. One of 'DEDICATED', 'SHARED'
	// +kubebuilder:validation:Optional
	ReservationModel *string `json:"reservationModel,omitempty" tf:"reservation_model,omitempty"`

	// Feature set of this ALB Service Engine Group (STANDARD or PREMIUM)
	// Feature set for this ALB Service Engine Group. One of 'STANDARD', 'PREMIUM'.
	// +kubebuilder:validation:Optional
	SupportedFeatureSet *string `json:"supportedFeatureSet,omitempty" tf:"supported_feature_set,omitempty"`

	// Note this may impact refresh performance, but should
	// ensure up-to-date information is read. Default is false.
	// Boolean value that shows if sync should be performed on every refresh
	// +kubebuilder:validation:Optional
	SyncOnRefresh *bool `json:"syncOnRefresh,omitempty" tf:"sync_on_refresh,omitempty"`
}

// NsxtAlbServiceEngineGroupSpec defines the desired state of NsxtAlbServiceEngineGroup
type NsxtAlbServiceEngineGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NsxtAlbServiceEngineGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NsxtAlbServiceEngineGroupInitParameters `json:"initProvider,omitempty"`
}

// NsxtAlbServiceEngineGroupStatus defines the observed state of NsxtAlbServiceEngineGroup.
type NsxtAlbServiceEngineGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NsxtAlbServiceEngineGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NsxtAlbServiceEngineGroup is the Schema for the NsxtAlbServiceEngineGroups API. Provides a resource to manage ALB Service Engine Groups. A Service Engine Group is an isolation domain that also defines shared service engine properties, such as size, network access, and failover. Resources in a service engine group can be used for different virtual services, depending on your tenant needs. These resources cannot be shared between different service engine groups.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type NsxtAlbServiceEngineGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.albCloudId) || (has(self.initProvider) && has(self.initProvider.albCloudId))",message="spec.forProvider.albCloudId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.importableServiceEngineGroupName) || (has(self.initProvider) && has(self.initProvider.importableServiceEngineGroupName))",message="spec.forProvider.importableServiceEngineGroupName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.reservationModel) || (has(self.initProvider) && has(self.initProvider.reservationModel))",message="spec.forProvider.reservationModel is a required parameter"
	Spec   NsxtAlbServiceEngineGroupSpec   `json:"spec"`
	Status NsxtAlbServiceEngineGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtAlbServiceEngineGroupList contains a list of NsxtAlbServiceEngineGroups
type NsxtAlbServiceEngineGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NsxtAlbServiceEngineGroup `json:"items"`
}

// Repository type metadata.
var (
	NsxtAlbServiceEngineGroup_Kind             = "NsxtAlbServiceEngineGroup"
	NsxtAlbServiceEngineGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NsxtAlbServiceEngineGroup_Kind}.String()
	NsxtAlbServiceEngineGroup_KindAPIVersion   = NsxtAlbServiceEngineGroup_Kind + "." + CRDGroupVersion.String()
	NsxtAlbServiceEngineGroup_GroupVersionKind = CRDGroupVersion.WithKind(NsxtAlbServiceEngineGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&NsxtAlbServiceEngineGroup{}, &NsxtAlbServiceEngineGroupList{})
}
