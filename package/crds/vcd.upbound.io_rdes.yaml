---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  name: rdes.vcd.upbound.io
spec:
  group: vcd.upbound.io
  names:
    categories:
    - crossplane
    - managed
    - vcd
    kind: Rde
    listKind: RdeList
    plural: rdes
    singular: rde
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Synced')].status
      name: SYNCED
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: READY
      type: string
    - jsonPath: .metadata.annotations.crossplane\.io/external-name
      name: EXTERNAL-NAME
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Rde is the Schema for the Rdes API. Provides the capability of
          creating, updating, and deleting Runtime Defined Entities in VMware Cloud
          Director.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: RdeSpec defines the desired state of Rde
            properties:
              deletionPolicy:
                default: Delete
                description: |-
                  DeletionPolicy specifies what will happen to the underlying external
                  when this managed resource is deleted - either "Delete" or "Orphan" the
                  external resource.
                  This field is planned to be deprecated in favor of the ManagementPolicies
                  field in a future release. Currently, both could be set independently and
                  non-default values would be honored if the feature flag is enabled.
                  See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
                enum:
                - Orphan
                - Delete
                type: string
              forProvider:
                properties:
                  externalId:
                    description: |-
                      An external input_entity's ID that this Runtime Defined Entity may have a relation to.
                      An external entity's ID that this Runtime Defined Entity may have a relation to
                    type: string
                  inputEntity:
                    description: |-
                      A string that specifies a valid JSON for the RDE. It can be retrieved with functions such as file, templatefile... Either input_entity or input_entity_url is required.
                      A JSON representation of the Runtime Defined Entity that is defined by the user and is used to initialize/override its contents
                    type: string
                  inputEntityUrl:
                    description: |-
                      The URL that points to a valid JSON for the RDE. Either input_entity or input_entity_url is required.
                      If you can't guarantee this, it is safer to use input_entity.
                      URL that should point to a JSON representation of the Runtime Defined Entity and is used to initialize/override its contents
                    type: string
                  metadataEntry:
                    description: |-
                      A set of metadata entries to assign. See Metadata section for details.
                      Metadata entries for the given Runtime Defined Entity
                    items:
                      properties:
                        domain:
                          description: |-
                            Only meaningful for providers. Allows them to share entries with their tenants. Currently, accepted values are: TENANT, PROVIDER. Defaults to TENANT.
                            Updating this value forces a re-creation of the metadata entry.
                            Only meaningful for providers. Allows them to share entries with their tenants. Currently, accepted values are: `TENANT`, `PROVIDER`
                          type: string
                        key:
                          description: |-
                            Key of this metadata entry.
                            Key of this metadata entry. Required if the metadata entry is not empty
                          type: string
                        namespace:
                          description: |-
                            Namespace of the metadata entry. Allows having multiple entries with same key in different namespaces.
                            Namespace of the metadata entry
                          type: string
                        persistent:
                          description: |-
                            true if the metadata is persistent. Persistent entries can be copied over on some entity operation.
                            Right now it doesn't have any effect.
                            Persistent metadata entries can be copied over on some entity operation
                          type: boolean
                        readonly:
                          description: |-
                            true if the metadata entry is read only. Defaults to false.  Updating this value forces a re-creation of the metadata entry.
                            True if the metadata entry is read only
                          type: boolean
                        type:
                          description: |-
                            Type of this metadata entry. One of: StringEntry, NumberEntry, BoolEntry. Defaults to StringEntry.
                            Updating this value forces a re-creation of the metadata entry.
                            Type of this metadata entry. One of: 'StringEntry', 'NumberEntry', 'BoolEntry'
                          type: string
                        value:
                          description: |-
                            Value of this metadata entry. It can be updated.
                            Value of this metadata entry. Required if the metadata entry is not empty
                          type: string
                      type: object
                    type: array
                  name:
                    description: |-
                      The name of the Runtime Defined Entity. It can be non-unique.
                      The name of the Runtime Defined Entity. It can be non-unique
                    type: string
                  org:
                    description: |-
                      Name of the Organization that will own the RDE, optional if defined at provider level.
                      The name of organization that will own this Runtime Defined Entity, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
                    type: string
                  rdeTypeId:
                    description: |-
                      The ID of the RDE Type to instantiate. It only supports
                      updating to a newer/lower version of the same RDE Type.
                      The Runtime Defined Entity Type ID
                    type: string
                  resolve:
                    description: |-
                      If true, the Runtime Defined Entity will be resolved by this provider. If false, it won't be
                      resolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't be
                      deleted until the input_entity is resolved by either party, unless resolve_on_removal=true. See RDE resolution for more details.
                      If `true`, the Runtime Defined Entity will be resolved by this provider. If `false`, it won't beresolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't bedeleted until the entity is resolved.
                    type: boolean
                  resolveOnRemoval:
                    description: |-
                      If true, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion. Destroy will fail if it is not resolved. It is false by default.
                      If `true`, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion.Destroy will fail if it is not resolved.
                    type: boolean
                type: object
              initProvider:
                description: |-
                  THIS IS A BETA FIELD. It will be honored
                  unless the Management Policies feature flag is disabled.
                  InitProvider holds the same fields as ForProvider, with the exception
                  of Identifier and other resource reference fields. The fields that are
                  in InitProvider are merged into ForProvider when the resource is created.
                  The same fields are also added to the terraform ignore_changes hook, to
                  avoid updating them after creation. This is useful for fields that are
                  required on creation, but we do not desire to update them after creation,
                  for example because of an external controller is managing them, like an
                  autoscaler.
                properties:
                  externalId:
                    description: |-
                      An external input_entity's ID that this Runtime Defined Entity may have a relation to.
                      An external entity's ID that this Runtime Defined Entity may have a relation to
                    type: string
                  inputEntity:
                    description: |-
                      A string that specifies a valid JSON for the RDE. It can be retrieved with functions such as file, templatefile... Either input_entity or input_entity_url is required.
                      A JSON representation of the Runtime Defined Entity that is defined by the user and is used to initialize/override its contents
                    type: string
                  inputEntityUrl:
                    description: |-
                      The URL that points to a valid JSON for the RDE. Either input_entity or input_entity_url is required.
                      If you can't guarantee this, it is safer to use input_entity.
                      URL that should point to a JSON representation of the Runtime Defined Entity and is used to initialize/override its contents
                    type: string
                  metadataEntry:
                    description: |-
                      A set of metadata entries to assign. See Metadata section for details.
                      Metadata entries for the given Runtime Defined Entity
                    items:
                      properties:
                        domain:
                          description: |-
                            Only meaningful for providers. Allows them to share entries with their tenants. Currently, accepted values are: TENANT, PROVIDER. Defaults to TENANT.
                            Updating this value forces a re-creation of the metadata entry.
                            Only meaningful for providers. Allows them to share entries with their tenants. Currently, accepted values are: `TENANT`, `PROVIDER`
                          type: string
                        key:
                          description: |-
                            Key of this metadata entry.
                            Key of this metadata entry. Required if the metadata entry is not empty
                          type: string
                        namespace:
                          description: |-
                            Namespace of the metadata entry. Allows having multiple entries with same key in different namespaces.
                            Namespace of the metadata entry
                          type: string
                        persistent:
                          description: |-
                            true if the metadata is persistent. Persistent entries can be copied over on some entity operation.
                            Right now it doesn't have any effect.
                            Persistent metadata entries can be copied over on some entity operation
                          type: boolean
                        readonly:
                          description: |-
                            true if the metadata entry is read only. Defaults to false.  Updating this value forces a re-creation of the metadata entry.
                            True if the metadata entry is read only
                          type: boolean
                        type:
                          description: |-
                            Type of this metadata entry. One of: StringEntry, NumberEntry, BoolEntry. Defaults to StringEntry.
                            Updating this value forces a re-creation of the metadata entry.
                            Type of this metadata entry. One of: 'StringEntry', 'NumberEntry', 'BoolEntry'
                          type: string
                        value:
                          description: |-
                            Value of this metadata entry. It can be updated.
                            Value of this metadata entry. Required if the metadata entry is not empty
                          type: string
                      type: object
                    type: array
                  name:
                    description: |-
                      The name of the Runtime Defined Entity. It can be non-unique.
                      The name of the Runtime Defined Entity. It can be non-unique
                    type: string
                  org:
                    description: |-
                      Name of the Organization that will own the RDE, optional if defined at provider level.
                      The name of organization that will own this Runtime Defined Entity, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
                    type: string
                  rdeTypeId:
                    description: |-
                      The ID of the RDE Type to instantiate. It only supports
                      updating to a newer/lower version of the same RDE Type.
                      The Runtime Defined Entity Type ID
                    type: string
                  resolve:
                    description: |-
                      If true, the Runtime Defined Entity will be resolved by this provider. If false, it won't be
                      resolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't be
                      deleted until the input_entity is resolved by either party, unless resolve_on_removal=true. See RDE resolution for more details.
                      If `true`, the Runtime Defined Entity will be resolved by this provider. If `false`, it won't beresolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't bedeleted until the entity is resolved.
                    type: boolean
                  resolveOnRemoval:
                    description: |-
                      If true, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion. Destroy will fail if it is not resolved. It is false by default.
                      If `true`, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion.Destroy will fail if it is not resolved.
                    type: boolean
                type: object
              managementPolicies:
                default:
                - '*'
                description: |-
                  THIS IS A BETA FIELD. It is on by default but can be opted out
                  through a Crossplane feature flag.
                  ManagementPolicies specify the array of actions Crossplane is allowed to
                  take on the managed and external resources.
                  This field is planned to replace the DeletionPolicy field in a future
                  release. Currently, both could be set independently and non-default
                  values would be honored if the feature flag is enabled. If both are
                  custom, the DeletionPolicy field will be ignored.
                  See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
                  and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
                items:
                  description: |-
                    A ManagementAction represents an action that the Crossplane controllers
                    can take on an external resource.
                  enum:
                  - Observe
                  - Create
                  - Update
                  - Delete
                  - LateInitialize
                  - '*'
                  type: string
                type: array
              providerConfigRef:
                default:
                  name: default
                description: |-
                  ProviderConfigReference specifies how the provider that will be used to
                  create, observe, update, and delete this managed resource should be
                  configured.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: |-
                          Resolution specifies whether resolution of this reference is required.
                          The default is 'Required', which means the reconcile will fail if the
                          reference cannot be resolved. 'Optional' means this reference will be
                          a no-op if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: |-
                          Resolve specifies when this reference should be resolved. The default
                          is 'IfNotPresent', which will attempt to resolve the reference only when
                          the corresponding field is not present. Use 'Always' to resolve the
                          reference on every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              publishConnectionDetailsTo:
                description: |-
                  PublishConnectionDetailsTo specifies the connection secret config which
                  contains a name, metadata and a reference to secret store config to
                  which any connection details for this managed resource should be written.
                  Connection details frequently include the endpoint, username,
                  and password required to connect to the managed resource.
                properties:
                  configRef:
                    default:
                      name: default
                    description: |-
                      SecretStoreConfigRef specifies which secret store config should be used
                      for this ConnectionSecret.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: |-
                              Resolution specifies whether resolution of this reference is required.
                              The default is 'Required', which means the reconcile will fail if the
                              reference cannot be resolved. 'Optional' means this reference will be
                              a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: |-
                              Resolve specifies when this reference should be resolved. The default
                              is 'IfNotPresent', which will attempt to resolve the reference only when
                              the corresponding field is not present. Use 'Always' to resolve the
                              reference on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  metadata:
                    description: Metadata is the metadata for connection secret.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: |-
                          Annotations are the annotations to be added to connection secret.
                          - For Kubernetes secrets, this will be used as "metadata.annotations".
                          - It is up to Secret Store implementation for others store types.
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: |-
                          Labels are the labels/tags to be added to connection secret.
                          - For Kubernetes secrets, this will be used as "metadata.labels".
                          - It is up to Secret Store implementation for others store types.
                        type: object
                      type:
                        description: |-
                          Type is the SecretType for the connection secret.
                          - Only valid for Kubernetes Secret Stores.
                        type: string
                    type: object
                  name:
                    description: Name is the name of the connection secret.
                    type: string
                required:
                - name
                type: object
              writeConnectionSecretToRef:
                description: |-
                  WriteConnectionSecretToReference specifies the namespace and name of a
                  Secret to which any connection details for this managed resource should
                  be written. Connection details frequently include the endpoint, username,
                  and password required to connect to the managed resource.
                  This field is planned to be replaced in a future release in favor of
                  PublishConnectionDetailsTo. Currently, both could be set independently
                  and connection details would be published to both without affecting
                  each other.
                properties:
                  name:
                    description: Name of the secret.
                    type: string
                  namespace:
                    description: Namespace of the secret.
                    type: string
                required:
                - name
                - namespace
                type: object
            required:
            - forProvider
            type: object
            x-kubernetes-validations:
            - message: spec.forProvider.name is a required parameter
              rule: '!(''*'' in self.managementPolicies || ''Create'' in self.managementPolicies
                || ''Update'' in self.managementPolicies) || has(self.forProvider.name)
                || (has(self.initProvider) && has(self.initProvider.name))'
            - message: spec.forProvider.rdeTypeId is a required parameter
              rule: '!(''*'' in self.managementPolicies || ''Create'' in self.managementPolicies
                || ''Update'' in self.managementPolicies) || has(self.forProvider.rdeTypeId)
                || (has(self.initProvider) && has(self.initProvider.rdeTypeId))'
            - message: spec.forProvider.resolve is a required parameter
              rule: '!(''*'' in self.managementPolicies || ''Create'' in self.managementPolicies
                || ''Update'' in self.managementPolicies) || has(self.forProvider.resolve)
                || (has(self.initProvider) && has(self.initProvider.resolve))'
          status:
            description: RdeStatus defines the observed state of Rde.
            properties:
              atProvider:
                properties:
                  computedEntity:
                    description: |-
                      The real state of this RDE in VCD. See Input entity vs Computed entity below for details.
                      A computed representation of the actual Runtime Defined Entity JSON retrieved from VCD. Useful to see the actual entity contents if it is being changed by a third party in VCD
                    type: string
                  entityInSync:
                    description: |-
                      It's true when computed_entity is equal to either input_entity or the contents of input_entity_url,
                      meaning that the computed RDE retrieved from VCD is synchronized with the input RDE.
                      If true, `computed_entity` is equal to either `input_entity` or the contents of `input_entity_url`
                    type: boolean
                  externalId:
                    description: |-
                      An external input_entity's ID that this Runtime Defined Entity may have a relation to.
                      An external entity's ID that this Runtime Defined Entity may have a relation to
                    type: string
                  id:
                    description: (Computed) Read-only identifier for this metadata
                      entry.
                    type: string
                  inputEntity:
                    description: |-
                      A string that specifies a valid JSON for the RDE. It can be retrieved with functions such as file, templatefile... Either input_entity or input_entity_url is required.
                      A JSON representation of the Runtime Defined Entity that is defined by the user and is used to initialize/override its contents
                    type: string
                  inputEntityUrl:
                    description: |-
                      The URL that points to a valid JSON for the RDE. Either input_entity or input_entity_url is required.
                      If you can't guarantee this, it is safer to use input_entity.
                      URL that should point to a JSON representation of the Runtime Defined Entity and is used to initialize/override its contents
                    type: string
                  metadataEntry:
                    description: |-
                      A set of metadata entries to assign. See Metadata section for details.
                      Metadata entries for the given Runtime Defined Entity
                    items:
                      properties:
                        domain:
                          description: |-
                            Only meaningful for providers. Allows them to share entries with their tenants. Currently, accepted values are: TENANT, PROVIDER. Defaults to TENANT.
                            Updating this value forces a re-creation of the metadata entry.
                            Only meaningful for providers. Allows them to share entries with their tenants. Currently, accepted values are: `TENANT`, `PROVIDER`
                          type: string
                        id:
                          description: |-
                            (Computed) Read-only identifier for this metadata entry.
                            ID of the metadata entry
                          type: string
                        key:
                          description: |-
                            Key of this metadata entry.
                            Key of this metadata entry. Required if the metadata entry is not empty
                          type: string
                        namespace:
                          description: |-
                            Namespace of the metadata entry. Allows having multiple entries with same key in different namespaces.
                            Namespace of the metadata entry
                          type: string
                        persistent:
                          description: |-
                            true if the metadata is persistent. Persistent entries can be copied over on some entity operation.
                            Right now it doesn't have any effect.
                            Persistent metadata entries can be copied over on some entity operation
                          type: boolean
                        readonly:
                          description: |-
                            true if the metadata entry is read only. Defaults to false.  Updating this value forces a re-creation of the metadata entry.
                            True if the metadata entry is read only
                          type: boolean
                        type:
                          description: |-
                            Type of this metadata entry. One of: StringEntry, NumberEntry, BoolEntry. Defaults to StringEntry.
                            Updating this value forces a re-creation of the metadata entry.
                            Type of this metadata entry. One of: 'StringEntry', 'NumberEntry', 'BoolEntry'
                          type: string
                        value:
                          description: |-
                            Value of this metadata entry. It can be updated.
                            Value of this metadata entry. Required if the metadata entry is not empty
                          type: string
                      type: object
                    type: array
                  name:
                    description: |-
                      The name of the Runtime Defined Entity. It can be non-unique.
                      The name of the Runtime Defined Entity. It can be non-unique
                    type: string
                  org:
                    description: |-
                      Name of the Organization that will own the RDE, optional if defined at provider level.
                      The name of organization that will own this Runtime Defined Entity, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
                    type: string
                  orgId:
                    description: |-
                      The ID of the Organization to which the Runtime Defined Entity belongs.
                      The organization of the Runtime Defined Entity
                    type: string
                  ownerUserId:
                    description: |-
                      The ID of the Organization user that owns this Runtime Defined Entity.
                      The ID of the user that owns the Runtime Defined Entity
                    type: string
                  rdeTypeId:
                    description: |-
                      The ID of the RDE Type to instantiate. It only supports
                      updating to a newer/lower version of the same RDE Type.
                      The Runtime Defined Entity Type ID
                    type: string
                  resolve:
                    description: |-
                      If true, the Runtime Defined Entity will be resolved by this provider. If false, it won't be
                      resolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't be
                      deleted until the input_entity is resolved by either party, unless resolve_on_removal=true. See RDE resolution for more details.
                      If `true`, the Runtime Defined Entity will be resolved by this provider. If `false`, it won't beresolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't bedeleted until the entity is resolved.
                    type: boolean
                  resolveOnRemoval:
                    description: |-
                      If true, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion. Destroy will fail if it is not resolved. It is false by default.
                      If `true`, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion.Destroy will fail if it is not resolved.
                    type: boolean
                  state:
                    description: |-
                      Specifies whether the entity is correctly resolved or not. When created it will be in PRE_CREATED state.
                      If the entity is correctly validated against its RDE Type schema, the state will be RESOLVED,
                      otherwise it will be RESOLUTION_ERROR.
                      Specifies whether the entity is correctly resolved or not. When created it will be in PRE_CREATED state. If the entity is correctly validated against its RDE Type schema, the state will be RESOLVED,otherwise it will be RESOLUTION_ERROR. If an entity resolution ends in a RESOLUTION_ERROR state, it will require to be updated to a correct JSON to be usable
                    type: string
                type: object
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        LastTransitionTime is the last time this condition transitioned from one
                        status to another.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        A Message containing details about this condition's last transition from
                        one status to another, if any.
                      type: string
                    observedGeneration:
                      description: |-
                        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      type: integer
                    reason:
                      description: A Reason for this condition's last transition from
                        one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True,
                        False, or Unknown?
                      type: string
                    type:
                      description: |-
                        Type of this condition. At most one of each condition type may apply to
                        a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
              observedGeneration:
                description: |-
                  ObservedGeneration is the latest metadata.generation
                  which resulted in either a ready state, or stalled due to error
                  it can not recover from without human intervention.
                format: int64
                type: integer
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
