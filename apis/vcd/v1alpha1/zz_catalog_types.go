// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CatalogInitParameters struct {

	// Enable early catalog export to optimize synchronization. Default is false. It is recommended to set it to true when publishing the catalog.
	// True enables early catalog export to optimize synchronization
	CacheEnabled *bool `json:"cacheEnabled,omitempty" tf:"cache_enabled,omitempty"`

	// When destroying use delete_force=true with delete_recursive=true to remove a catalog and any objects it contains, regardless of their state. Default is false
	// When destroying use delete_force=True with delete_recursive=True to remove a catalog and any objects it contains, regardless of their state.
	DeleteForce *bool `json:"deleteForce,omitempty" tf:"delete_force,omitempty"`

	// When destroying use delete_recursive=true to remove the catalog and any objects it contains that are in a state that normally allows removal. Default is false
	// When destroying use delete_recursive=True to remove the catalog and any objects it contains that are in a state that normally allows removal.
	DeleteRecursive *bool `json:"deleteRecursive,omitempty" tf:"delete_recursive,omitempty"`

	// Description of catalog
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Deprecated; v3.6+) Use metadata_entry instead. Key value map of metadata to assign.
	// Key and value pairs for catalog metadata.
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// A set of metadata entries to assign. See Metadata section for details.
	// Metadata entries for the given Catalog
	MetadataEntry []MetadataEntryInitParameters `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// Catalog name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations.
	// When using a catalog shared from another organization, this field must have the name of that one, not the current one.
	// If you don't know the name of the sharing org, and put the current one, an error message will list the possible names.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// An optional password to access the catalog. Only ASCII characters are allowed in a valid password.
	// An optional password to access the catalog. Only ASCII characters are allowed in a valid password.
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Enable include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the portability of the package, and you should use it only when necessary. Default is false.
	// Include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the portability of the package and you should use it only when necessary.
	PreserveIdentityInformation *bool `json:"preserveIdentityInformation,omitempty" tf:"preserve_identity_information,omitempty"`

	// Enable allows to publish a catalog externally to make its vApp templates and media files available for subscription by organizations outside the Cloud Director installation. Default is false.
	// True allows to publish a catalog externally to make its vApp templates and media files available for subscription by organizations outside the Cloud Director installation.
	PublishEnabled *bool `json:"publishEnabled,omitempty" tf:"publish_enabled,omitempty"`

	// Allows to set specific storage profile to be used for catalog. Note. Data
	// source vcd_storage_profile can help to lookup storage profile ID.
	// Optional storage profile ID
	StorageProfileID *string `json:"storageProfileId,omitempty" tf:"storage_profile_id,omitempty"`
}

type CatalogObservation struct {

	// Enable early catalog export to optimize synchronization. Default is false. It is recommended to set it to true when publishing the catalog.
	// True enables early catalog export to optimize synchronization
	CacheEnabled *bool `json:"cacheEnabled,omitempty" tf:"cache_enabled,omitempty"`

	// (v3.6+) Version number from this catalog.
	// Catalog version number.
	CatalogVersion *float64 `json:"catalogVersion,omitempty" tf:"catalog_version,omitempty"`

	// (v3.6+) Date and time of catalog creation
	// Time stamp of when the catalog was created
	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	// When destroying use delete_force=true with delete_recursive=true to remove a catalog and any objects it contains, regardless of their state. Default is false
	// When destroying use delete_force=True with delete_recursive=True to remove a catalog and any objects it contains, regardless of their state.
	DeleteForce *bool `json:"deleteForce,omitempty" tf:"delete_force,omitempty"`

	// When destroying use delete_recursive=true to remove the catalog and any objects it contains that are in a state that normally allows removal. Default is false
	// When destroying use delete_recursive=True to remove the catalog and any objects it contains that are in a state that normally allows removal.
	DeleteRecursive *bool `json:"deleteRecursive,omitempty" tf:"delete_recursive,omitempty"`

	// Description of catalog
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Catalog HREF
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (v3.8.1+) Indicates if this catalog was created in the current organization.
	// True if this catalog belongs to the current organization.
	IsLocal *bool `json:"isLocal,omitempty" tf:"is_local,omitempty"`

	// (v3.6+) Indicates if this catalog is shared to all organizations.
	// True if this catalog is published.
	IsPublished *bool `json:"isPublished,omitempty" tf:"is_published,omitempty"`

	// (v3.6+) Indicates if the catalog is shared.
	// True if this catalog is shared.
	IsShared *bool `json:"isShared,omitempty" tf:"is_shared,omitempty"`

	// (v3.8+) List of media item names in this catalog, in alphabetical order.
	// List of Media items in this catalog
	MediaItemList []*string `json:"mediaItemList,omitempty" tf:"media_item_list,omitempty"`

	// (Deprecated; v3.6+) Use metadata_entry instead. Key value map of metadata to assign.
	// Key and value pairs for catalog metadata.
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// A set of metadata entries to assign. See Metadata section for details.
	// Metadata entries for the given Catalog
	MetadataEntry []MetadataEntryObservation `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// Catalog name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (v3.6+) Number of media items available in this catalog.
	// Number of Medias this catalog contains.
	NumberOfMedia *float64 `json:"numberOfMedia,omitempty" tf:"number_of_media,omitempty"`

	// (v3.6+) Number of vApp templates available in this catalog.
	// Number of vApps templates this catalog contains.
	NumberOfVappTemplates *float64 `json:"numberOfVappTemplates,omitempty" tf:"number_of_vapp_templates,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations.
	// When using a catalog shared from another organization, this field must have the name of that one, not the current one.
	// If you don't know the name of the sharing org, and put the current one, an error message will list the possible names.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// (v3.6+) Owner of the catalog.
	// Owner name from the catalog.
	OwnerName *string `json:"ownerName,omitempty" tf:"owner_name,omitempty"`

	// Enable include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the portability of the package, and you should use it only when necessary. Default is false.
	// Include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the portability of the package and you should use it only when necessary.
	PreserveIdentityInformation *bool `json:"preserveIdentityInformation,omitempty" tf:"preserve_identity_information,omitempty"`

	// Enable allows to publish a catalog externally to make its vApp templates and media files available for subscription by organizations outside the Cloud Director installation. Default is false.
	// True allows to publish a catalog externally to make its vApp templates and media files available for subscription by organizations outside the Cloud Director installation.
	PublishEnabled *bool `json:"publishEnabled,omitempty" tf:"publish_enabled,omitempty"`

	// (v3.6+) Shows if the catalog is PUBLISHED, if it is a subscription from another one (SUBSCRIBED), or none of those (UNPUBLISHED).
	// PUBLISHED if published externally, SUBSCRIBED if subscribed to an external catalog, UNPUBLISHED otherwise.
	PublishSubscriptionType *string `json:"publishSubscriptionType,omitempty" tf:"publish_subscription_type,omitempty"`

	// (v3.8+) URL to which other catalogs can subscribe.
	// URL to which other catalogs can subscribe
	PublishSubscriptionURL *string `json:"publishSubscriptionUrl,omitempty" tf:"publish_subscription_url,omitempty"`

	// Allows to set specific storage profile to be used for catalog. Note. Data
	// source vcd_storage_profile can help to lookup storage profile ID.
	// Optional storage profile ID
	StorageProfileID *string `json:"storageProfileId,omitempty" tf:"storage_profile_id,omitempty"`

	// (v3.8+) List of vApp template names in this catalog, in alphabetical order.
	// List of catalog items in this catalog
	VappTemplateList []*string `json:"vappTemplateList,omitempty" tf:"vapp_template_list,omitempty"`
}

type CatalogParameters struct {

	// Enable early catalog export to optimize synchronization. Default is false. It is recommended to set it to true when publishing the catalog.
	// True enables early catalog export to optimize synchronization
	// +kubebuilder:validation:Optional
	CacheEnabled *bool `json:"cacheEnabled,omitempty" tf:"cache_enabled,omitempty"`

	// When destroying use delete_force=true with delete_recursive=true to remove a catalog and any objects it contains, regardless of their state. Default is false
	// When destroying use delete_force=True with delete_recursive=True to remove a catalog and any objects it contains, regardless of their state.
	// +kubebuilder:validation:Optional
	DeleteForce *bool `json:"deleteForce,omitempty" tf:"delete_force,omitempty"`

	// When destroying use delete_recursive=true to remove the catalog and any objects it contains that are in a state that normally allows removal. Default is false
	// When destroying use delete_recursive=True to remove the catalog and any objects it contains that are in a state that normally allows removal.
	// +kubebuilder:validation:Optional
	DeleteRecursive *bool `json:"deleteRecursive,omitempty" tf:"delete_recursive,omitempty"`

	// Description of catalog
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Deprecated; v3.6+) Use metadata_entry instead. Key value map of metadata to assign.
	// Key and value pairs for catalog metadata.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// A set of metadata entries to assign. See Metadata section for details.
	// Metadata entries for the given Catalog
	// +kubebuilder:validation:Optional
	MetadataEntry []MetadataEntryParameters `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// Catalog name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations.
	// When using a catalog shared from another organization, this field must have the name of that one, not the current one.
	// If you don't know the name of the sharing org, and put the current one, an error message will list the possible names.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// An optional password to access the catalog. Only ASCII characters are allowed in a valid password.
	// An optional password to access the catalog. Only ASCII characters are allowed in a valid password.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Enable include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the portability of the package, and you should use it only when necessary. Default is false.
	// Include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the portability of the package and you should use it only when necessary.
	// +kubebuilder:validation:Optional
	PreserveIdentityInformation *bool `json:"preserveIdentityInformation,omitempty" tf:"preserve_identity_information,omitempty"`

	// Enable allows to publish a catalog externally to make its vApp templates and media files available for subscription by organizations outside the Cloud Director installation. Default is false.
	// True allows to publish a catalog externally to make its vApp templates and media files available for subscription by organizations outside the Cloud Director installation.
	// +kubebuilder:validation:Optional
	PublishEnabled *bool `json:"publishEnabled,omitempty" tf:"publish_enabled,omitempty"`

	// Allows to set specific storage profile to be used for catalog. Note. Data
	// source vcd_storage_profile can help to lookup storage profile ID.
	// Optional storage profile ID
	// +kubebuilder:validation:Optional
	StorageProfileID *string `json:"storageProfileId,omitempty" tf:"storage_profile_id,omitempty"`
}

type MetadataEntryInitParameters struct {

	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.
	// Domain for this metadata entry. true, if it belongs to SYSTEM. false, if it belongs to GENERAL
	IsSystem *bool `json:"isSystem,omitempty" tf:"is_system,omitempty"`

	// Key of this metadata entry.
	// Key of this metadata entry. Required if the metadata entry is not empty
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.
	// Type of this metadata entry. One of: 'MetadataStringValue', 'MetadataNumberValue', 'MetadataBooleanValue', 'MetadataDateTimeValue'
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).
	// User access level for this metadata entry. One of: 'READWRITE', 'READONLY', 'PRIVATE'
	UserAccess *string `json:"userAccess,omitempty" tf:"user_access,omitempty"`

	// Value of this metadata entry.
	// Value of this metadata entry. Required if the metadata entry is not empty
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type MetadataEntryObservation struct {

	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.
	// Domain for this metadata entry. true, if it belongs to SYSTEM. false, if it belongs to GENERAL
	IsSystem *bool `json:"isSystem,omitempty" tf:"is_system,omitempty"`

	// Key of this metadata entry.
	// Key of this metadata entry. Required if the metadata entry is not empty
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.
	// Type of this metadata entry. One of: 'MetadataStringValue', 'MetadataNumberValue', 'MetadataBooleanValue', 'MetadataDateTimeValue'
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).
	// User access level for this metadata entry. One of: 'READWRITE', 'READONLY', 'PRIVATE'
	UserAccess *string `json:"userAccess,omitempty" tf:"user_access,omitempty"`

	// Value of this metadata entry.
	// Value of this metadata entry. Required if the metadata entry is not empty
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type MetadataEntryParameters struct {

	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.
	// Domain for this metadata entry. true, if it belongs to SYSTEM. false, if it belongs to GENERAL
	// +kubebuilder:validation:Optional
	IsSystem *bool `json:"isSystem,omitempty" tf:"is_system,omitempty"`

	// Key of this metadata entry.
	// Key of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.
	// Type of this metadata entry. One of: 'MetadataStringValue', 'MetadataNumberValue', 'MetadataBooleanValue', 'MetadataDateTimeValue'
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).
	// User access level for this metadata entry. One of: 'READWRITE', 'READONLY', 'PRIVATE'
	// +kubebuilder:validation:Optional
	UserAccess *string `json:"userAccess,omitempty" tf:"user_access,omitempty"`

	// Value of this metadata entry.
	// Value of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// CatalogSpec defines the desired state of Catalog
type CatalogSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CatalogParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CatalogInitParameters `json:"initProvider,omitempty"`
}

// CatalogStatus defines the observed state of Catalog.
type CatalogStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CatalogObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Catalog is the Schema for the Catalogs API. Provides a VMware Cloud Director catalog resource. This can be used to create and delete a catalog.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type Catalog struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   CatalogSpec   `json:"spec"`
	Status CatalogStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CatalogList contains a list of Catalogs
type CatalogList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Catalog `json:"items"`
}

// Repository type metadata.
var (
	Catalog_Kind             = "Catalog"
	Catalog_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Catalog_Kind}.String()
	Catalog_KindAPIVersion   = Catalog_Kind + "." + CRDGroupVersion.String()
	Catalog_GroupVersionKind = CRDGroupVersion.WithKind(Catalog_Kind)
)

func init() {
	SchemeBuilder.Register(&Catalog{}, &CatalogList{})
}
