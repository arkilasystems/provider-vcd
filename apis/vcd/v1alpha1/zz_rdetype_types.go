// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HookInitParameters struct {

	// : Existing Behavior that will be automatically invoked when any RDE of this RDE Type triggers the event.
	// Existing Behavior that will be automatically invoked when the RDE of this RDE Type triggers the event
	BehaviorID *string `json:"behaviorId,omitempty" tf:"behavior_id,omitempty"`

	// : Event that will invoke the Behavior, one of PostCreate, PostUpdate, PreDelete, PostDelete.
	// Event that will invoke the Behavior, one of PostCreate, PostUpdate, PreDelete, PostDelete
	Event *string `json:"event,omitempty" tf:"event,omitempty"`
}

type HookObservation struct {

	// : Existing Behavior that will be automatically invoked when any RDE of this RDE Type triggers the event.
	// Existing Behavior that will be automatically invoked when the RDE of this RDE Type triggers the event
	BehaviorID *string `json:"behaviorId,omitempty" tf:"behavior_id,omitempty"`

	// : Event that will invoke the Behavior, one of PostCreate, PostUpdate, PreDelete, PostDelete.
	// Event that will invoke the Behavior, one of PostCreate, PostUpdate, PreDelete, PostDelete
	Event *string `json:"event,omitempty" tf:"event,omitempty"`
}

type HookParameters struct {

	// : Existing Behavior that will be automatically invoked when any RDE of this RDE Type triggers the event.
	// Existing Behavior that will be automatically invoked when the RDE of this RDE Type triggers the event
	// +kubebuilder:validation:Optional
	BehaviorID *string `json:"behaviorId" tf:"behavior_id,omitempty"`

	// : Event that will invoke the Behavior, one of PostCreate, PostUpdate, PreDelete, PostDelete.
	// Event that will invoke the Behavior, one of PostCreate, PostUpdate, PreDelete, PostDelete
	// +kubebuilder:validation:Optional
	Event *string `json:"event" tf:"event,omitempty"`
}

type RdeTypeInitParameters struct {

	// The description of the Runtime Defined Entity Type.
	// The description of the Runtime Defined Entity Type
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// An external entity's ID that this Runtime Defined Entity Type may apply to.
	// An external entity's ID that this definition may apply to
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// Each block maps a lifecycle event of RDEs
	// to existing Behaviors, that will be
	// automatically invoked when the corresponding event is triggered. These blocks have the following properties:
	// Optional blocks that map RDE lifecycle events to existing Behaviors, that will be automatically invoked when the corresponding event is triggered
	Hook []HookInitParameters `json:"hook,omitempty" tf:"hook,omitempty"`

	// To be used when creating a new version of a Runtime Defined Entity Type.
	// Specifies the version of the type that will be the template for the authorization configuration of the new version.
	// The Type ACLs and the access requirements of the Type Behaviors of the new version will be copied from those of the inherited version.
	// If not set, then the new type version will not inherit another version and will have the default authorization settings, just like the first version of a new type.
	// To be used when creating a new version of a Runtime Defined Entity Type. Specifies the version of the type that will be the template for the authorization configuration of the new version.The Type ACLs and the access requirements of the Type Behaviors of the new version will be copied from those of the inherited version.If not set, then the new type version will not inherit another version and will have the default authorization settings, just like the first version of a new type
	InheritedVersion *string `json:"inheritedVersion,omitempty" tf:"inherited_version,omitempty"`

	// The set of Defined Interfaces that this Runtime Defined Entity Type will use.
	// Set of Defined Interface URNs that this Runtime Defined Entity Type is referenced by
	// +listType=set
	InterfaceIds []*string `json:"interfaceIds,omitempty" tf:"interface_ids,omitempty"`

	// The name of the Runtime Defined Entity Type.
	// The name of the Runtime Defined Entity Type
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A unique namespace associated with the Runtime Defined Entity Type. Only alphanumeric characters, underscores and hyphens allowed.
	// A unique namespace associated with the Runtime Defined Entity Type. Combination of `vendor`, `nss` and `version` must be unique
	Nss *string `json:"nss,omitempty" tf:"nss,omitempty"`

	// A string that specifies a valid JSON schema. Either schema or schema_url is required.
	// The JSON-Schema valid definition of the Runtime Defined Entity Type
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// The URL that points to a valid JSON schema. Either schema or schema_url is required.
	// If schema_url is used, the downloaded schema will be computed in the schema attribute.
	// If you can't guarantee this, it is safer to use schema.
	// URL that should point to a JSON-Schema valid definition file of the Runtime Defined Entity Type
	SchemaURL *string `json:"schemaUrl,omitempty" tf:"schema_url,omitempty"`

	// The vendor of the Runtime Defined Entity Type. Only alphanumeric characters, underscores and hyphens allowed.
	// The vendor name for the Runtime Defined Entity Type. Combination of `vendor`, `nss` and `version` must be unique
	Vendor *string `json:"vendor,omitempty" tf:"vendor,omitempty"`

	// The version of the Runtime Defined Entity Type. Must follow semantic versioning syntax.
	// The version of the Runtime Defined Entity Type. The version string must follow semantic versioning rules. Combination of `vendor`, `nss` and `version` must be unique
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type RdeTypeObservation struct {

	// The description of the Runtime Defined Entity Type.
	// The description of the Runtime Defined Entity Type
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// An external entity's ID that this Runtime Defined Entity Type may apply to.
	// An external entity's ID that this definition may apply to
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// Each block maps a lifecycle event of RDEs
	// to existing Behaviors, that will be
	// automatically invoked when the corresponding event is triggered. These blocks have the following properties:
	// Optional blocks that map RDE lifecycle events to existing Behaviors, that will be automatically invoked when the corresponding event is triggered
	Hook []HookObservation `json:"hook,omitempty" tf:"hook,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// To be used when creating a new version of a Runtime Defined Entity Type.
	// Specifies the version of the type that will be the template for the authorization configuration of the new version.
	// The Type ACLs and the access requirements of the Type Behaviors of the new version will be copied from those of the inherited version.
	// If not set, then the new type version will not inherit another version and will have the default authorization settings, just like the first version of a new type.
	// To be used when creating a new version of a Runtime Defined Entity Type. Specifies the version of the type that will be the template for the authorization configuration of the new version.The Type ACLs and the access requirements of the Type Behaviors of the new version will be copied from those of the inherited version.If not set, then the new type version will not inherit another version and will have the default authorization settings, just like the first version of a new type
	InheritedVersion *string `json:"inheritedVersion,omitempty" tf:"inherited_version,omitempty"`

	// The set of Defined Interfaces that this Runtime Defined Entity Type will use.
	// Set of Defined Interface URNs that this Runtime Defined Entity Type is referenced by
	// +listType=set
	InterfaceIds []*string `json:"interfaceIds,omitempty" tf:"interface_ids,omitempty"`

	// The name of the Runtime Defined Entity Type.
	// The name of the Runtime Defined Entity Type
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A unique namespace associated with the Runtime Defined Entity Type. Only alphanumeric characters, underscores and hyphens allowed.
	// A unique namespace associated with the Runtime Defined Entity Type. Combination of `vendor`, `nss` and `version` must be unique
	Nss *string `json:"nss,omitempty" tf:"nss,omitempty"`

	// True if the Runtime Defined Entity Type cannot be modified.
	// True if the Runtime Defined Entity Type cannot be modified
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// A string that specifies a valid JSON schema. Either schema or schema_url is required.
	// The JSON-Schema valid definition of the Runtime Defined Entity Type
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// The URL that points to a valid JSON schema. Either schema or schema_url is required.
	// If schema_url is used, the downloaded schema will be computed in the schema attribute.
	// If you can't guarantee this, it is safer to use schema.
	// URL that should point to a JSON-Schema valid definition file of the Runtime Defined Entity Type
	SchemaURL *string `json:"schemaUrl,omitempty" tf:"schema_url,omitempty"`

	// The vendor of the Runtime Defined Entity Type. Only alphanumeric characters, underscores and hyphens allowed.
	// The vendor name for the Runtime Defined Entity Type. Combination of `vendor`, `nss` and `version` must be unique
	Vendor *string `json:"vendor,omitempty" tf:"vendor,omitempty"`

	// The version of the Runtime Defined Entity Type. Must follow semantic versioning syntax.
	// The version of the Runtime Defined Entity Type. The version string must follow semantic versioning rules. Combination of `vendor`, `nss` and `version` must be unique
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type RdeTypeParameters struct {

	// The description of the Runtime Defined Entity Type.
	// The description of the Runtime Defined Entity Type
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// An external entity's ID that this Runtime Defined Entity Type may apply to.
	// An external entity's ID that this definition may apply to
	// +kubebuilder:validation:Optional
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// Each block maps a lifecycle event of RDEs
	// to existing Behaviors, that will be
	// automatically invoked when the corresponding event is triggered. These blocks have the following properties:
	// Optional blocks that map RDE lifecycle events to existing Behaviors, that will be automatically invoked when the corresponding event is triggered
	// +kubebuilder:validation:Optional
	Hook []HookParameters `json:"hook,omitempty" tf:"hook,omitempty"`

	// To be used when creating a new version of a Runtime Defined Entity Type.
	// Specifies the version of the type that will be the template for the authorization configuration of the new version.
	// The Type ACLs and the access requirements of the Type Behaviors of the new version will be copied from those of the inherited version.
	// If not set, then the new type version will not inherit another version and will have the default authorization settings, just like the first version of a new type.
	// To be used when creating a new version of a Runtime Defined Entity Type. Specifies the version of the type that will be the template for the authorization configuration of the new version.The Type ACLs and the access requirements of the Type Behaviors of the new version will be copied from those of the inherited version.If not set, then the new type version will not inherit another version and will have the default authorization settings, just like the first version of a new type
	// +kubebuilder:validation:Optional
	InheritedVersion *string `json:"inheritedVersion,omitempty" tf:"inherited_version,omitempty"`

	// The set of Defined Interfaces that this Runtime Defined Entity Type will use.
	// Set of Defined Interface URNs that this Runtime Defined Entity Type is referenced by
	// +kubebuilder:validation:Optional
	// +listType=set
	InterfaceIds []*string `json:"interfaceIds,omitempty" tf:"interface_ids,omitempty"`

	// The name of the Runtime Defined Entity Type.
	// The name of the Runtime Defined Entity Type
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A unique namespace associated with the Runtime Defined Entity Type. Only alphanumeric characters, underscores and hyphens allowed.
	// A unique namespace associated with the Runtime Defined Entity Type. Combination of `vendor`, `nss` and `version` must be unique
	// +kubebuilder:validation:Optional
	Nss *string `json:"nss,omitempty" tf:"nss,omitempty"`

	// A string that specifies a valid JSON schema. Either schema or schema_url is required.
	// The JSON-Schema valid definition of the Runtime Defined Entity Type
	// +kubebuilder:validation:Optional
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// The URL that points to a valid JSON schema. Either schema or schema_url is required.
	// If schema_url is used, the downloaded schema will be computed in the schema attribute.
	// If you can't guarantee this, it is safer to use schema.
	// URL that should point to a JSON-Schema valid definition file of the Runtime Defined Entity Type
	// +kubebuilder:validation:Optional
	SchemaURL *string `json:"schemaUrl,omitempty" tf:"schema_url,omitempty"`

	// The vendor of the Runtime Defined Entity Type. Only alphanumeric characters, underscores and hyphens allowed.
	// The vendor name for the Runtime Defined Entity Type. Combination of `vendor`, `nss` and `version` must be unique
	// +kubebuilder:validation:Optional
	Vendor *string `json:"vendor,omitempty" tf:"vendor,omitempty"`

	// The version of the Runtime Defined Entity Type. Must follow semantic versioning syntax.
	// The version of the Runtime Defined Entity Type. The version string must follow semantic versioning rules. Combination of `vendor`, `nss` and `version` must be unique
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

// RdeTypeSpec defines the desired state of RdeType
type RdeTypeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RdeTypeParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RdeTypeInitParameters `json:"initProvider,omitempty"`
}

// RdeTypeStatus defines the observed state of RdeType.
type RdeTypeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RdeTypeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RdeType is the Schema for the RdeTypes API. Provides the capability of creating, updating, and deleting Runtime Defined Entity types in VMware Cloud Director.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type RdeType struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nss) || (has(self.initProvider) && has(self.initProvider.nss))",message="spec.forProvider.nss is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vendor) || (has(self.initProvider) && has(self.initProvider.vendor))",message="spec.forProvider.vendor is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.version) || (has(self.initProvider) && has(self.initProvider.version))",message="spec.forProvider.version is a required parameter"
	Spec   RdeTypeSpec   `json:"spec"`
	Status RdeTypeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RdeTypeList contains a list of RdeTypes
type RdeTypeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RdeType `json:"items"`
}

// Repository type metadata.
var (
	RdeType_Kind             = "RdeType"
	RdeType_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RdeType_Kind}.String()
	RdeType_KindAPIVersion   = RdeType_Kind + "." + CRDGroupVersion.String()
	RdeType_GroupVersionKind = CRDGroupVersion.WithKind(RdeType_Kind)
)

func init() {
	SchemeBuilder.Register(&RdeType{}, &RdeTypeList{})
}
