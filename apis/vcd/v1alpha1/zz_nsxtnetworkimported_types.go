// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NsxtNetworkImportedInitParameters struct {

	// A FQDN for the virtual machines on this network
	// DNS suffix
	DNSSuffix *string `json:"dnsSuffix,omitempty" tf:"dns_suffix,omitempty"`

	// An optional description of the network
	// Network description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// First DNS server to use.
	// DNS server 1
	Dns1 *string `json:"dns1,omitempty" tf:"dns1,omitempty"`

	// Second DNS server to use.
	// DNS server 1
	Dns2 *string `json:"dns2,omitempty" tf:"dns2,omitempty"`

	// Enables Dual-Stack mode so that one can configure one
	// IPv4 and one IPv6 networks. Note In such case IPv4 addresses must be used in gateway,
	// prefix_length and static_ip_pool while IPv6 addresses in secondary_gateway,
	// secondary_prefix_length and secondary_static_ip_pool fields.
	// Boolean value if Dual-Stack mode should be enabled (default `false`)
	DualStackEnabled *bool `json:"dualStackEnabled,omitempty" tf:"dual_stack_enabled,omitempty"`

	// Unique name of an existing Distributed Virtual Port Group (DVPG).
	// Note it will never be refreshed because API does not allow reading this name after it is
	// consumed. Instead ID will be stored in dvpg_id attribute.
	// Name of existing Distributed Virtual Port Group
	DvpgName *string `json:"dvpgName,omitempty" tf:"dvpg_name,omitempty"`

	// The gateway for this network (e.g. 192.168.1.1, 2002:0:0:1234:abcd:ffff:c0a7:121)
	// Gateway IP address
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// A unique name for the network
	// Network name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Unique name of an existing NSX-T segment.
	// Note it will never be refreshed because API does not allow reading this name after it is
	// consumed. Instead ID will be stored in nsxt_logical_switch_id attribute.
	// Name of existing NSX-T Logical Switch
	NsxtLogicalSwitchName *string `json:"nsxtLogicalSwitchName,omitempty" tf:"nsxt_logical_switch_name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when
	// connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// VDC or VDC Group ID. Always takes precedence over vdc fields (in resource
	// and inherited from provider configuration)
	// ID of VDC or VDC Group
	OwnerID *string `json:"ownerId,omitempty" tf:"owner_id,omitempty"`

	// The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).
	// Network prefix
	PrefixLength *float64 `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// IPv6 gateway when Dual-Stack mode is enabled
	// Secondary gateway (can only be IPv6 and requires enabled Dual Stack mode)
	SecondaryGateway *string `json:"secondaryGateway,omitempty" tf:"secondary_gateway,omitempty"`

	// IPv6 prefix length when Dual-Stack mode is
	// enabled
	// Secondary prefix (can only be IPv6 and requires enabled Dual Stack mode)
	SecondaryPrefixLength *string `json:"secondaryPrefixLength,omitempty" tf:"secondary_prefix_length,omitempty"`

	// One or more IPv6 static
	// pools when Dual-Stack mode is enabled
	// Secondary IP ranges used for static pool allocation in the network
	SecondaryStaticIPPool []NsxtNetworkImportedSecondaryStaticIPPoolInitParameters `json:"secondaryStaticIpPool,omitempty" tf:"secondary_static_ip_pool,omitempty"`

	// A range of IPs permitted to be used as static IPs for
	// virtual machines; see IP Pools below for details.
	// IP ranges used for static pool allocation in the network
	StaticIPPool []NsxtNetworkImportedStaticIPPoolInitParameters `json:"staticIpPool,omitempty" tf:"static_ip_pool,omitempty"`

	// (Deprecated; Optional) The name of VDC to use. Deprecated  in favor of new field
	// owner_id which supports VDC and VDC Group IDs.
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type NsxtNetworkImportedObservation struct {

	// A FQDN for the virtual machines on this network
	// DNS suffix
	DNSSuffix *string `json:"dnsSuffix,omitempty" tf:"dns_suffix,omitempty"`

	// An optional description of the network
	// Network description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// First DNS server to use.
	// DNS server 1
	Dns1 *string `json:"dns1,omitempty" tf:"dns1,omitempty"`

	// Second DNS server to use.
	// DNS server 1
	Dns2 *string `json:"dns2,omitempty" tf:"dns2,omitempty"`

	// Enables Dual-Stack mode so that one can configure one
	// IPv4 and one IPv6 networks. Note In such case IPv4 addresses must be used in gateway,
	// prefix_length and static_ip_pool while IPv6 addresses in secondary_gateway,
	// secondary_prefix_length and secondary_static_ip_pool fields.
	// Boolean value if Dual-Stack mode should be enabled (default `false`)
	DualStackEnabled *bool `json:"dualStackEnabled,omitempty" tf:"dual_stack_enabled,omitempty"`

	// ID of Distributed Virtual Port Group used by this network
	// ID of used Distributed Virtual Port Group
	DvpgID *string `json:"dvpgId,omitempty" tf:"dvpg_id,omitempty"`

	// Unique name of an existing Distributed Virtual Port Group (DVPG).
	// Note it will never be refreshed because API does not allow reading this name after it is
	// consumed. Instead ID will be stored in dvpg_id attribute.
	// Name of existing Distributed Virtual Port Group
	DvpgName *string `json:"dvpgName,omitempty" tf:"dvpg_name,omitempty"`

	// The gateway for this network (e.g. 192.168.1.1, 2002:0:0:1234:abcd:ffff:c0a7:121)
	// Gateway IP address
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A unique name for the network
	// Network name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of NSX-T logical switch used by this network
	// ID of used NSX-T Logical Switch
	NsxtLogicalSwitchID *string `json:"nsxtLogicalSwitchId,omitempty" tf:"nsxt_logical_switch_id,omitempty"`

	// Unique name of an existing NSX-T segment.
	// Note it will never be refreshed because API does not allow reading this name after it is
	// consumed. Instead ID will be stored in nsxt_logical_switch_id attribute.
	// Name of existing NSX-T Logical Switch
	NsxtLogicalSwitchName *string `json:"nsxtLogicalSwitchName,omitempty" tf:"nsxt_logical_switch_name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when
	// connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// VDC or VDC Group ID. Always takes precedence over vdc fields (in resource
	// and inherited from provider configuration)
	// ID of VDC or VDC Group
	OwnerID *string `json:"ownerId,omitempty" tf:"owner_id,omitempty"`

	// The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).
	// Network prefix
	PrefixLength *float64 `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// IPv6 gateway when Dual-Stack mode is enabled
	// Secondary gateway (can only be IPv6 and requires enabled Dual Stack mode)
	SecondaryGateway *string `json:"secondaryGateway,omitempty" tf:"secondary_gateway,omitempty"`

	// IPv6 prefix length when Dual-Stack mode is
	// enabled
	// Secondary prefix (can only be IPv6 and requires enabled Dual Stack mode)
	SecondaryPrefixLength *string `json:"secondaryPrefixLength,omitempty" tf:"secondary_prefix_length,omitempty"`

	// One or more IPv6 static
	// pools when Dual-Stack mode is enabled
	// Secondary IP ranges used for static pool allocation in the network
	SecondaryStaticIPPool []NsxtNetworkImportedSecondaryStaticIPPoolObservation `json:"secondaryStaticIpPool,omitempty" tf:"secondary_static_ip_pool,omitempty"`

	// A range of IPs permitted to be used as static IPs for
	// virtual machines; see IP Pools below for details.
	// IP ranges used for static pool allocation in the network
	StaticIPPool []NsxtNetworkImportedStaticIPPoolObservation `json:"staticIpPool,omitempty" tf:"static_ip_pool,omitempty"`

	// (Deprecated; Optional) The name of VDC to use. Deprecated  in favor of new field
	// owner_id which supports VDC and VDC Group IDs.
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type NsxtNetworkImportedParameters struct {

	// A FQDN for the virtual machines on this network
	// DNS suffix
	// +kubebuilder:validation:Optional
	DNSSuffix *string `json:"dnsSuffix,omitempty" tf:"dns_suffix,omitempty"`

	// An optional description of the network
	// Network description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// First DNS server to use.
	// DNS server 1
	// +kubebuilder:validation:Optional
	Dns1 *string `json:"dns1,omitempty" tf:"dns1,omitempty"`

	// Second DNS server to use.
	// DNS server 1
	// +kubebuilder:validation:Optional
	Dns2 *string `json:"dns2,omitempty" tf:"dns2,omitempty"`

	// Enables Dual-Stack mode so that one can configure one
	// IPv4 and one IPv6 networks. Note In such case IPv4 addresses must be used in gateway,
	// prefix_length and static_ip_pool while IPv6 addresses in secondary_gateway,
	// secondary_prefix_length and secondary_static_ip_pool fields.
	// Boolean value if Dual-Stack mode should be enabled (default `false`)
	// +kubebuilder:validation:Optional
	DualStackEnabled *bool `json:"dualStackEnabled,omitempty" tf:"dual_stack_enabled,omitempty"`

	// Unique name of an existing Distributed Virtual Port Group (DVPG).
	// Note it will never be refreshed because API does not allow reading this name after it is
	// consumed. Instead ID will be stored in dvpg_id attribute.
	// Name of existing Distributed Virtual Port Group
	// +kubebuilder:validation:Optional
	DvpgName *string `json:"dvpgName,omitempty" tf:"dvpg_name,omitempty"`

	// The gateway for this network (e.g. 192.168.1.1, 2002:0:0:1234:abcd:ffff:c0a7:121)
	// Gateway IP address
	// +kubebuilder:validation:Optional
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// A unique name for the network
	// Network name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Unique name of an existing NSX-T segment.
	// Note it will never be refreshed because API does not allow reading this name after it is
	// consumed. Instead ID will be stored in nsxt_logical_switch_id attribute.
	// Name of existing NSX-T Logical Switch
	// +kubebuilder:validation:Optional
	NsxtLogicalSwitchName *string `json:"nsxtLogicalSwitchName,omitempty" tf:"nsxt_logical_switch_name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when
	// connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// VDC or VDC Group ID. Always takes precedence over vdc fields (in resource
	// and inherited from provider configuration)
	// ID of VDC or VDC Group
	// +kubebuilder:validation:Optional
	OwnerID *string `json:"ownerId,omitempty" tf:"owner_id,omitempty"`

	// The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).
	// Network prefix
	// +kubebuilder:validation:Optional
	PrefixLength *float64 `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// IPv6 gateway when Dual-Stack mode is enabled
	// Secondary gateway (can only be IPv6 and requires enabled Dual Stack mode)
	// +kubebuilder:validation:Optional
	SecondaryGateway *string `json:"secondaryGateway,omitempty" tf:"secondary_gateway,omitempty"`

	// IPv6 prefix length when Dual-Stack mode is
	// enabled
	// Secondary prefix (can only be IPv6 and requires enabled Dual Stack mode)
	// +kubebuilder:validation:Optional
	SecondaryPrefixLength *string `json:"secondaryPrefixLength,omitempty" tf:"secondary_prefix_length,omitempty"`

	// One or more IPv6 static
	// pools when Dual-Stack mode is enabled
	// Secondary IP ranges used for static pool allocation in the network
	// +kubebuilder:validation:Optional
	SecondaryStaticIPPool []NsxtNetworkImportedSecondaryStaticIPPoolParameters `json:"secondaryStaticIpPool,omitempty" tf:"secondary_static_ip_pool,omitempty"`

	// A range of IPs permitted to be used as static IPs for
	// virtual machines; see IP Pools below for details.
	// IP ranges used for static pool allocation in the network
	// +kubebuilder:validation:Optional
	StaticIPPool []NsxtNetworkImportedStaticIPPoolParameters `json:"staticIpPool,omitempty" tf:"static_ip_pool,omitempty"`

	// (Deprecated; Optional) The name of VDC to use. Deprecated  in favor of new field
	// owner_id which supports VDC and VDC Group IDs.
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type NsxtNetworkImportedSecondaryStaticIPPoolInitParameters struct {

	// The final address in the IP Range
	// End address of the IP range
	EndAddress *string `json:"endAddress,omitempty" tf:"end_address,omitempty"`

	// The first address in the IP Range
	// Start address of the IP range
	StartAddress *string `json:"startAddress,omitempty" tf:"start_address,omitempty"`
}

type NsxtNetworkImportedSecondaryStaticIPPoolObservation struct {

	// The final address in the IP Range
	// End address of the IP range
	EndAddress *string `json:"endAddress,omitempty" tf:"end_address,omitempty"`

	// The first address in the IP Range
	// Start address of the IP range
	StartAddress *string `json:"startAddress,omitempty" tf:"start_address,omitempty"`
}

type NsxtNetworkImportedSecondaryStaticIPPoolParameters struct {

	// The final address in the IP Range
	// End address of the IP range
	// +kubebuilder:validation:Optional
	EndAddress *string `json:"endAddress" tf:"end_address,omitempty"`

	// The first address in the IP Range
	// Start address of the IP range
	// +kubebuilder:validation:Optional
	StartAddress *string `json:"startAddress" tf:"start_address,omitempty"`
}

type NsxtNetworkImportedStaticIPPoolInitParameters struct {

	// The final address in the IP Range
	// End address of the IP range
	EndAddress *string `json:"endAddress,omitempty" tf:"end_address,omitempty"`

	// The first address in the IP Range
	// Start address of the IP range
	StartAddress *string `json:"startAddress,omitempty" tf:"start_address,omitempty"`
}

type NsxtNetworkImportedStaticIPPoolObservation struct {

	// The final address in the IP Range
	// End address of the IP range
	EndAddress *string `json:"endAddress,omitempty" tf:"end_address,omitempty"`

	// The first address in the IP Range
	// Start address of the IP range
	StartAddress *string `json:"startAddress,omitempty" tf:"start_address,omitempty"`
}

type NsxtNetworkImportedStaticIPPoolParameters struct {

	// The final address in the IP Range
	// End address of the IP range
	// +kubebuilder:validation:Optional
	EndAddress *string `json:"endAddress" tf:"end_address,omitempty"`

	// The first address in the IP Range
	// Start address of the IP range
	// +kubebuilder:validation:Optional
	StartAddress *string `json:"startAddress" tf:"start_address,omitempty"`
}

// NsxtNetworkImportedSpec defines the desired state of NsxtNetworkImported
type NsxtNetworkImportedSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NsxtNetworkImportedParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NsxtNetworkImportedInitParameters `json:"initProvider,omitempty"`
}

// NsxtNetworkImportedStatus defines the observed state of NsxtNetworkImported.
type NsxtNetworkImportedStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NsxtNetworkImportedObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NsxtNetworkImported is the Schema for the NsxtNetworkImporteds API. Provides a VMware Cloud Director Org VDC NSX-T Imported Network type. This can be used to create, modify, and delete NSX-T VDC networks of Imported type (backed by NSX-T).
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type NsxtNetworkImported struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.gateway) || (has(self.initProvider) && has(self.initProvider.gateway))",message="spec.forProvider.gateway is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.prefixLength) || (has(self.initProvider) && has(self.initProvider.prefixLength))",message="spec.forProvider.prefixLength is a required parameter"
	Spec   NsxtNetworkImportedSpec   `json:"spec"`
	Status NsxtNetworkImportedStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtNetworkImportedList contains a list of NsxtNetworkImporteds
type NsxtNetworkImportedList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NsxtNetworkImported `json:"items"`
}

// Repository type metadata.
var (
	NsxtNetworkImported_Kind             = "NsxtNetworkImported"
	NsxtNetworkImported_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NsxtNetworkImported_Kind}.String()
	NsxtNetworkImported_KindAPIVersion   = NsxtNetworkImported_Kind + "." + CRDGroupVersion.String()
	NsxtNetworkImported_GroupVersionKind = CRDGroupVersion.WithKind(NsxtNetworkImported_Kind)
)

func init() {
	SchemeBuilder.Register(&NsxtNetworkImported{}, &NsxtNetworkImportedList{})
}
