// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IpSpaceIpAllocationInitParameters struct {

	// Can only be set when usage_state=USED_MANUAL
	// Custom description can only be set when usage_state is set to 'USED_MANUAL'
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// IP Space ID to use for IP Allocations
	// IP Space ID for IP Allocation
	IPSpaceID *string `json:"ipSpaceId,omitempty" tf:"ip_space_id,omitempty"`

	// Org ID in which the IP is allocated
	// Org ID for IP Allocation
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Required when type=IP_PREFIX
	// Required if 'type' is IP_PREFIX and no custom 'value` is provided
	PrefixLength *string `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// One of FLOATING_IP, IP_PREFIX
	// Type of allocation. One of `FLOATING_IP“, `IP_PREFIX`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Only used with manual reservations. Value USED_MANUAL
	// enables manual IP reservation. Value UNUSED is set to release manual allocation of IP.
	// Can be set to 'USED_MANUAL' to mark the IP Allocation for manual use
	UsageState *string `json:"usageState,omitempty" tf:"usage_state,omitempty"`

	// An option to request a specific IP or subnet from IP Space.
	// Note: This field does not support IP ranges because it would cause multiple allocations
	// created in one resource. Please use multiple resource instances to allocate IP ranges.
	// IP address or CIDR to use. (VCD 10.4.2+)
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IpSpaceIpAllocationObservation struct {

	// allocation date in formated as 2023-06-07T09:57:58.721Z (ISO 8601)
	// Allocation date in ISO 8601 format (e.g. 2023-06-07T09:57:58.721Z)
	AllocationDate *string `json:"allocationDate,omitempty" tf:"allocation_date,omitempty"`

	// Can only be set when usage_state=USED_MANUAL
	// Custom description can only be set when usage_state is set to 'USED_MANUAL'
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// convenience field. For type=IP_PREFIX it will contain only the IP from CIDR returned
	// IP address part
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// contains either single IP when type=FLOATING_IP (e.g. 192.168.1.100) or subnet
	// in CIDR format when type=IP_PREFIX (e.g. 192.168.1.100/30)
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// IP Space ID to use for IP Allocations
	// IP Space ID for IP Allocation
	IPSpaceID *string `json:"ipSpaceId,omitempty" tf:"ip_space_id,omitempty"`

	// Org ID in which the IP is allocated
	// Org ID for IP Allocation
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Required when type=IP_PREFIX
	// Required if 'type' is IP_PREFIX and no custom 'value` is provided
	PrefixLength *string `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// One of FLOATING_IP, IP_PREFIX
	// Type of allocation. One of `FLOATING_IP“, `IP_PREFIX`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Only used with manual reservations. Value USED_MANUAL
	// enables manual IP reservation. Value UNUSED is set to release manual allocation of IP.
	// Can be set to 'USED_MANUAL' to mark the IP Allocation for manual use
	UsageState *string `json:"usageState,omitempty" tf:"usage_state,omitempty"`

	// contains entity ID that is using the IP if usage_state=USED
	// ID of entity that is using this allocation
	UsedByID *string `json:"usedById,omitempty" tf:"used_by_id,omitempty"`

	// An option to request a specific IP or subnet from IP Space.
	// Note: This field does not support IP ranges because it would cause multiple allocations
	// created in one resource. Please use multiple resource instances to allocate IP ranges.
	// IP address or CIDR to use. (VCD 10.4.2+)
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IpSpaceIpAllocationParameters struct {

	// Can only be set when usage_state=USED_MANUAL
	// Custom description can only be set when usage_state is set to 'USED_MANUAL'
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// IP Space ID to use for IP Allocations
	// IP Space ID for IP Allocation
	// +kubebuilder:validation:Optional
	IPSpaceID *string `json:"ipSpaceId,omitempty" tf:"ip_space_id,omitempty"`

	// Org ID in which the IP is allocated
	// Org ID for IP Allocation
	// +kubebuilder:validation:Optional
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Required when type=IP_PREFIX
	// Required if 'type' is IP_PREFIX and no custom 'value` is provided
	// +kubebuilder:validation:Optional
	PrefixLength *string `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// One of FLOATING_IP, IP_PREFIX
	// Type of allocation. One of `FLOATING_IP“, `IP_PREFIX`
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Only used with manual reservations. Value USED_MANUAL
	// enables manual IP reservation. Value UNUSED is set to release manual allocation of IP.
	// Can be set to 'USED_MANUAL' to mark the IP Allocation for manual use
	// +kubebuilder:validation:Optional
	UsageState *string `json:"usageState,omitempty" tf:"usage_state,omitempty"`

	// An option to request a specific IP or subnet from IP Space.
	// Note: This field does not support IP ranges because it would cause multiple allocations
	// created in one resource. Please use multiple resource instances to allocate IP ranges.
	// IP address or CIDR to use. (VCD 10.4.2+)
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// IpSpaceIpAllocationSpec defines the desired state of IpSpaceIpAllocation
type IpSpaceIpAllocationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IpSpaceIpAllocationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IpSpaceIpAllocationInitParameters `json:"initProvider,omitempty"`
}

// IpSpaceIpAllocationStatus defines the observed state of IpSpaceIpAllocation.
type IpSpaceIpAllocationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IpSpaceIpAllocationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// IpSpaceIpAllocation is the Schema for the IpSpaceIpAllocations API. Provides a resource to manage IP Allocations within IP Spaces. It supports both - Floating IPs (IPs from IP Ranges) and IP Prefix (subnet) allocations with manual and automatic reservations.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type IpSpaceIpAllocation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.orgId) || (has(self.initProvider) && has(self.initProvider.orgId))",message="spec.forProvider.orgId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   IpSpaceIpAllocationSpec   `json:"spec"`
	Status IpSpaceIpAllocationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IpSpaceIpAllocationList contains a list of IpSpaceIpAllocations
type IpSpaceIpAllocationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IpSpaceIpAllocation `json:"items"`
}

// Repository type metadata.
var (
	IpSpaceIpAllocation_Kind             = "IpSpaceIpAllocation"
	IpSpaceIpAllocation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IpSpaceIpAllocation_Kind}.String()
	IpSpaceIpAllocation_KindAPIVersion   = IpSpaceIpAllocation_Kind + "." + CRDGroupVersion.String()
	IpSpaceIpAllocation_GroupVersionKind = CRDGroupVersion.WithKind(IpSpaceIpAllocation_Kind)
)

func init() {
	SchemeBuilder.Register(&IpSpaceIpAllocation{}, &IpSpaceIpAllocationList{})
}
