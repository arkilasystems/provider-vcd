// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LbAppProfileInitParameters struct {

	// The mode by which the cookie should be inserted. One of 'insert',
	// 'prefix', or 'appsession'
	// The mode by which the cookie should be inserted. One of 'insert', 'prefix', or 'appsession'
	CookieMode *string `json:"cookieMode,omitempty" tf:"cookie_mode,omitempty"`

	// Used to uniquely identify the session the first time a client accesses
	// the site. The load balancer refers to this cookie when connecting subsequent requests in the
	// session, so that they all go to the same virtual server. Only applies for
	// persistence_mechanism 'cookie'
	// Used to uniquely identify the session the first time a client accesses the site. The load balancer refers to this cookie when connecting subsequent requests in the session, so that they all go to the same virtual server. Only applies for persistence_mechanism 'cookie'
	CookieName *string `json:"cookieName,omitempty" tf:"cookie_name,omitempty"`

	// The name of the edge gateway on which the application profile is to be created
	// Edge gateway name in which the LB Application Profile is located
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// Enable to define the certificate, CAs, or CRLs used to
	// authenticate the load balancer from the server side. Note: This resource does not currently
	// support attaching Pool and Virtual Server certificates therefore this toggle only enables it. To
	// make it fully work certificates must be currently attached manually.
	// Enable to define the certificate, CAs, or CRLs used to authenticate the load balancer from the server side
	EnablePoolSideSSL *bool `json:"enablePoolSideSsl,omitempty" tf:"enable_pool_side_ssl,omitempty"`

	// Enable SSL authentication to be passed through to the
	// virtual server. Otherwise SSL authentication takes place at the destination address
	// Enable SSL authentication to be passed through to the virtual server. Otherwise SSL authentication takes place at the destination address.
	EnableSSLPassthrough *bool `json:"enableSslPassthrough,omitempty" tf:"enable_ssl_passthrough,omitempty"`

	// Length of time in seconds that persistence stays in effect
	// Length of time in seconds that persistence stays in effect
	Expiration *float64 `json:"expiration,omitempty" tf:"expiration,omitempty"`

	// The URL to which traffic that arrives at the destination address
	// should be redirected. Only applies for types http and https
	// The URL to which traffic that arrives at the destination address should be redirected. Only applies for types 'http' and 'https'
	HTTPRedirectURL *string `json:"httpRedirectUrl,omitempty" tf:"http_redirect_url,omitempty"`

	// Enables 'X-Forwarded-For' header for identifying
	// the originating IP address of a client connecting to a Web server through the load balancer.
	// Only applies for types http and https
	// Enables 'X-Forwarded-For' header for identifying the originating IP address of a client connecting to a Web server through the load balancer. Only applies for types HTTP and HTTPS
	InsertXForwardedHTTPHeader *bool `json:"insertXForwardedHttpHeader,omitempty" tf:"insert_x_forwarded_http_header,omitempty"`

	// Application profile name
	// Unique LB Application Profile name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Persistence mechanism for the profile. One of 'cookie',
	// 'ssl-sessionid', 'sourceip'
	// Persistence mechanism for the profile. One of 'cookie', 'ssl-sessionid', 'sourceip'
	PersistenceMechanism *string `json:"persistenceMechanism,omitempty" tf:"persistence_mechanism,omitempty"`

	// Protocol type used to send requests to the server. One of tcp, udp,
	// http, or https
	// Protocol type used to send requests to the server. One of 'tcp', 'udp', 'http' org 'https'
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type LbAppProfileObservation struct {

	// The mode by which the cookie should be inserted. One of 'insert',
	// 'prefix', or 'appsession'
	// The mode by which the cookie should be inserted. One of 'insert', 'prefix', or 'appsession'
	CookieMode *string `json:"cookieMode,omitempty" tf:"cookie_mode,omitempty"`

	// Used to uniquely identify the session the first time a client accesses
	// the site. The load balancer refers to this cookie when connecting subsequent requests in the
	// session, so that they all go to the same virtual server. Only applies for
	// persistence_mechanism 'cookie'
	// Used to uniquely identify the session the first time a client accesses the site. The load balancer refers to this cookie when connecting subsequent requests in the session, so that they all go to the same virtual server. Only applies for persistence_mechanism 'cookie'
	CookieName *string `json:"cookieName,omitempty" tf:"cookie_name,omitempty"`

	// The name of the edge gateway on which the application profile is to be created
	// Edge gateway name in which the LB Application Profile is located
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// Enable to define the certificate, CAs, or CRLs used to
	// authenticate the load balancer from the server side. Note: This resource does not currently
	// support attaching Pool and Virtual Server certificates therefore this toggle only enables it. To
	// make it fully work certificates must be currently attached manually.
	// Enable to define the certificate, CAs, or CRLs used to authenticate the load balancer from the server side
	EnablePoolSideSSL *bool `json:"enablePoolSideSsl,omitempty" tf:"enable_pool_side_ssl,omitempty"`

	// Enable SSL authentication to be passed through to the
	// virtual server. Otherwise SSL authentication takes place at the destination address
	// Enable SSL authentication to be passed through to the virtual server. Otherwise SSL authentication takes place at the destination address.
	EnableSSLPassthrough *bool `json:"enableSslPassthrough,omitempty" tf:"enable_ssl_passthrough,omitempty"`

	// Length of time in seconds that persistence stays in effect
	// Length of time in seconds that persistence stays in effect
	Expiration *float64 `json:"expiration,omitempty" tf:"expiration,omitempty"`

	// The URL to which traffic that arrives at the destination address
	// should be redirected. Only applies for types http and https
	// The URL to which traffic that arrives at the destination address should be redirected. Only applies for types 'http' and 'https'
	HTTPRedirectURL *string `json:"httpRedirectUrl,omitempty" tf:"http_redirect_url,omitempty"`

	// The NSX ID of the load balancer application profile
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Enables 'X-Forwarded-For' header for identifying
	// the originating IP address of a client connecting to a Web server through the load balancer.
	// Only applies for types http and https
	// Enables 'X-Forwarded-For' header for identifying the originating IP address of a client connecting to a Web server through the load balancer. Only applies for types HTTP and HTTPS
	InsertXForwardedHTTPHeader *bool `json:"insertXForwardedHttpHeader,omitempty" tf:"insert_x_forwarded_http_header,omitempty"`

	// Application profile name
	// Unique LB Application Profile name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Persistence mechanism for the profile. One of 'cookie',
	// 'ssl-sessionid', 'sourceip'
	// Persistence mechanism for the profile. One of 'cookie', 'ssl-sessionid', 'sourceip'
	PersistenceMechanism *string `json:"persistenceMechanism,omitempty" tf:"persistence_mechanism,omitempty"`

	// Protocol type used to send requests to the server. One of tcp, udp,
	// http, or https
	// Protocol type used to send requests to the server. One of 'tcp', 'udp', 'http' org 'https'
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type LbAppProfileParameters struct {

	// The mode by which the cookie should be inserted. One of 'insert',
	// 'prefix', or 'appsession'
	// The mode by which the cookie should be inserted. One of 'insert', 'prefix', or 'appsession'
	// +kubebuilder:validation:Optional
	CookieMode *string `json:"cookieMode,omitempty" tf:"cookie_mode,omitempty"`

	// Used to uniquely identify the session the first time a client accesses
	// the site. The load balancer refers to this cookie when connecting subsequent requests in the
	// session, so that they all go to the same virtual server. Only applies for
	// persistence_mechanism 'cookie'
	// Used to uniquely identify the session the first time a client accesses the site. The load balancer refers to this cookie when connecting subsequent requests in the session, so that they all go to the same virtual server. Only applies for persistence_mechanism 'cookie'
	// +kubebuilder:validation:Optional
	CookieName *string `json:"cookieName,omitempty" tf:"cookie_name,omitempty"`

	// The name of the edge gateway on which the application profile is to be created
	// Edge gateway name in which the LB Application Profile is located
	// +kubebuilder:validation:Optional
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// Enable to define the certificate, CAs, or CRLs used to
	// authenticate the load balancer from the server side. Note: This resource does not currently
	// support attaching Pool and Virtual Server certificates therefore this toggle only enables it. To
	// make it fully work certificates must be currently attached manually.
	// Enable to define the certificate, CAs, or CRLs used to authenticate the load balancer from the server side
	// +kubebuilder:validation:Optional
	EnablePoolSideSSL *bool `json:"enablePoolSideSsl,omitempty" tf:"enable_pool_side_ssl,omitempty"`

	// Enable SSL authentication to be passed through to the
	// virtual server. Otherwise SSL authentication takes place at the destination address
	// Enable SSL authentication to be passed through to the virtual server. Otherwise SSL authentication takes place at the destination address.
	// +kubebuilder:validation:Optional
	EnableSSLPassthrough *bool `json:"enableSslPassthrough,omitempty" tf:"enable_ssl_passthrough,omitempty"`

	// Length of time in seconds that persistence stays in effect
	// Length of time in seconds that persistence stays in effect
	// +kubebuilder:validation:Optional
	Expiration *float64 `json:"expiration,omitempty" tf:"expiration,omitempty"`

	// The URL to which traffic that arrives at the destination address
	// should be redirected. Only applies for types http and https
	// The URL to which traffic that arrives at the destination address should be redirected. Only applies for types 'http' and 'https'
	// +kubebuilder:validation:Optional
	HTTPRedirectURL *string `json:"httpRedirectUrl,omitempty" tf:"http_redirect_url,omitempty"`

	// Enables 'X-Forwarded-For' header for identifying
	// the originating IP address of a client connecting to a Web server through the load balancer.
	// Only applies for types http and https
	// Enables 'X-Forwarded-For' header for identifying the originating IP address of a client connecting to a Web server through the load balancer. Only applies for types HTTP and HTTPS
	// +kubebuilder:validation:Optional
	InsertXForwardedHTTPHeader *bool `json:"insertXForwardedHttpHeader,omitempty" tf:"insert_x_forwarded_http_header,omitempty"`

	// Application profile name
	// Unique LB Application Profile name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Persistence mechanism for the profile. One of 'cookie',
	// 'ssl-sessionid', 'sourceip'
	// Persistence mechanism for the profile. One of 'cookie', 'ssl-sessionid', 'sourceip'
	// +kubebuilder:validation:Optional
	PersistenceMechanism *string `json:"persistenceMechanism,omitempty" tf:"persistence_mechanism,omitempty"`

	// Protocol type used to send requests to the server. One of tcp, udp,
	// http, or https
	// Protocol type used to send requests to the server. One of 'tcp', 'udp', 'http' org 'https'
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

// LbAppProfileSpec defines the desired state of LbAppProfile
type LbAppProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LbAppProfileParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LbAppProfileInitParameters `json:"initProvider,omitempty"`
}

// LbAppProfileStatus defines the observed state of LbAppProfile.
type LbAppProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LbAppProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// LbAppProfile is the Schema for the LbAppProfiles API. Provides an NSX edge gateway load balancer application profile resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type LbAppProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.edgeGateway) || (has(self.initProvider) && has(self.initProvider.edgeGateway))",message="spec.forProvider.edgeGateway is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   LbAppProfileSpec   `json:"spec"`
	Status LbAppProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LbAppProfileList contains a list of LbAppProfiles
type LbAppProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LbAppProfile `json:"items"`
}

// Repository type metadata.
var (
	LbAppProfile_Kind             = "LbAppProfile"
	LbAppProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LbAppProfile_Kind}.String()
	LbAppProfile_KindAPIVersion   = LbAppProfile_Kind + "." + CRDGroupVersion.String()
	LbAppProfile_GroupVersionKind = CRDGroupVersion.WithKind(LbAppProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&LbAppProfile{}, &LbAppProfileList{})
}
