// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VAppNatRulesInitParameters struct {

	// When enabled translates a virtual machine's private, internal IP address to a public IP address for outbound traffic. Default value is false.
	// When enabled translates a virtual machine's private, internal IP address to a public IP address for outbound traffic.
	EnableIPMasquerade *bool `json:"enableIpMasquerade,omitempty" tf:"enable_ip_masquerade,omitempty"`

	// Enable or disable NAT. Default is true. To enable the NAT service, vcd_vapp_firewall_rules needs to be enabled as well.
	// Enable or disable NAT service. Default is `true`.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// "One of: ipTranslation (use IP translation), portForwarding (use port forwarding). For ipTranslation fields vm_id, vm_nic_id, mapping_mode are required and external_ip is optional. For portForwarding fields vm_id, vm_nic_id, protocol, external_port and forward_to_port are required.
	// One of: `ipTranslation` (use IP translation), `portForwarding` (use port forwarding).
	NATType *string `json:"natType,omitempty" tf:"nat_type,omitempty"`

	// The identifier of vApp network.
	// vApp network identifier
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Configures a NAT rule; see Rules below for details.
	Rule []VAppNatRulesRuleInitParameters `json:"rule,omitempty" tf:"rule,omitempty"`

	// The identifier of vApp.
	// vApp identifier
	VappID *string `json:"vappId,omitempty" tf:"vapp_id,omitempty"`

	// The name of VDC to use, optional if defined at provider level.
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type VAppNatRulesObservation struct {

	// When enabled translates a virtual machine's private, internal IP address to a public IP address for outbound traffic. Default value is false.
	// When enabled translates a virtual machine's private, internal IP address to a public IP address for outbound traffic.
	EnableIPMasquerade *bool `json:"enableIpMasquerade,omitempty" tf:"enable_ip_masquerade,omitempty"`

	// Enable or disable NAT. Default is true. To enable the NAT service, vcd_vapp_firewall_rules needs to be enabled as well.
	// Enable or disable NAT service. Default is `true`.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// "One of: ipTranslation (use IP translation), portForwarding (use port forwarding). For ipTranslation fields vm_id, vm_nic_id, mapping_mode are required and external_ip is optional. For portForwarding fields vm_id, vm_nic_id, protocol, external_port and forward_to_port are required.
	// One of: `ipTranslation` (use IP translation), `portForwarding` (use port forwarding).
	NATType *string `json:"natType,omitempty" tf:"nat_type,omitempty"`

	// The identifier of vApp network.
	// vApp network identifier
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Configures a NAT rule; see Rules below for details.
	Rule []VAppNatRulesRuleObservation `json:"rule,omitempty" tf:"rule,omitempty"`

	// The identifier of vApp.
	// vApp identifier
	VappID *string `json:"vappId,omitempty" tf:"vapp_id,omitempty"`

	// The name of VDC to use, optional if defined at provider level.
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type VAppNatRulesParameters struct {

	// When enabled translates a virtual machine's private, internal IP address to a public IP address for outbound traffic. Default value is false.
	// When enabled translates a virtual machine's private, internal IP address to a public IP address for outbound traffic.
	// +kubebuilder:validation:Optional
	EnableIPMasquerade *bool `json:"enableIpMasquerade,omitempty" tf:"enable_ip_masquerade,omitempty"`

	// Enable or disable NAT. Default is true. To enable the NAT service, vcd_vapp_firewall_rules needs to be enabled as well.
	// Enable or disable NAT service. Default is `true`.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// "One of: ipTranslation (use IP translation), portForwarding (use port forwarding). For ipTranslation fields vm_id, vm_nic_id, mapping_mode are required and external_ip is optional. For portForwarding fields vm_id, vm_nic_id, protocol, external_port and forward_to_port are required.
	// One of: `ipTranslation` (use IP translation), `portForwarding` (use port forwarding).
	// +kubebuilder:validation:Optional
	NATType *string `json:"natType,omitempty" tf:"nat_type,omitempty"`

	// The identifier of vApp network.
	// vApp network identifier
	// +kubebuilder:validation:Optional
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Configures a NAT rule; see Rules below for details.
	// +kubebuilder:validation:Optional
	Rule []VAppNatRulesRuleParameters `json:"rule,omitempty" tf:"rule,omitempty"`

	// The identifier of vApp.
	// vApp identifier
	// +kubebuilder:validation:Optional
	VappID *string `json:"vappId,omitempty" tf:"vapp_id,omitempty"`

	// The name of VDC to use, optional if defined at provider level.
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type VAppNatRulesRuleInitParameters struct {

	// External IP address to forward to or External IP address to map to VM.
	// External IP address to forward to or External IP address to map to VM
	ExternalIP *string `json:"externalIp,omitempty" tf:"external_ip,omitempty"`

	// External port to forward. -1 value for any port.
	// External port to forward.
	ExternalPort *float64 `json:"externalPort,omitempty" tf:"external_port,omitempty"`

	// Internal port to forward. -1 value for any port.
	// Internal port to forward.
	ForwardToPort *float64 `json:"forwardToPort,omitempty" tf:"forward_to_port,omitempty"`

	// Mapping mode. One of: automatic, manual.
	// Mapping mode. One of: `automatic`, `manual`
	MappingMode *string `json:"mappingMode,omitempty" tf:"mapping_mode,omitempty"`

	// Protocol to forward. One of: TCP (forward TCP packets), UDP (forward UDP packets), TCP_UDP (forward TCP and UDP packets).
	// Protocol to forward. One of: `TCP` (forward TCP packets), `UDP` (forward UDP packets), `TCP_UDP` (forward TCP and UDP packets).
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// VM to which this rule applies.
	// VM to which this rule applies.
	VMID *string `json:"vmId,omitempty" tf:"vm_id,omitempty"`

	// VM NIC ID to which this rule applies.
	// VM NIC ID to which this rule applies.
	VMNicID *float64 `json:"vmNicId,omitempty" tf:"vm_nic_id,omitempty"`
}

type VAppNatRulesRuleObservation struct {

	// External IP address to forward to or External IP address to map to VM.
	// External IP address to forward to or External IP address to map to VM
	ExternalIP *string `json:"externalIp,omitempty" tf:"external_ip,omitempty"`

	// External port to forward. -1 value for any port.
	// External port to forward.
	ExternalPort *float64 `json:"externalPort,omitempty" tf:"external_port,omitempty"`

	// Internal port to forward. -1 value for any port.
	// Internal port to forward.
	ForwardToPort *float64 `json:"forwardToPort,omitempty" tf:"forward_to_port,omitempty"`

	// ID of the rule. Can be used to track syslog messages.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Mapping mode. One of: automatic, manual.
	// Mapping mode. One of: `automatic`, `manual`
	MappingMode *string `json:"mappingMode,omitempty" tf:"mapping_mode,omitempty"`

	// Protocol to forward. One of: TCP (forward TCP packets), UDP (forward UDP packets), TCP_UDP (forward TCP and UDP packets).
	// Protocol to forward. One of: `TCP` (forward TCP packets), `UDP` (forward UDP packets), `TCP_UDP` (forward TCP and UDP packets).
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// VM to which this rule applies.
	// VM to which this rule applies.
	VMID *string `json:"vmId,omitempty" tf:"vm_id,omitempty"`

	// VM NIC ID to which this rule applies.
	// VM NIC ID to which this rule applies.
	VMNicID *float64 `json:"vmNicId,omitempty" tf:"vm_nic_id,omitempty"`
}

type VAppNatRulesRuleParameters struct {

	// External IP address to forward to or External IP address to map to VM.
	// External IP address to forward to or External IP address to map to VM
	// +kubebuilder:validation:Optional
	ExternalIP *string `json:"externalIp,omitempty" tf:"external_ip,omitempty"`

	// External port to forward. -1 value for any port.
	// External port to forward.
	// +kubebuilder:validation:Optional
	ExternalPort *float64 `json:"externalPort,omitempty" tf:"external_port,omitempty"`

	// Internal port to forward. -1 value for any port.
	// Internal port to forward.
	// +kubebuilder:validation:Optional
	ForwardToPort *float64 `json:"forwardToPort,omitempty" tf:"forward_to_port,omitempty"`

	// Mapping mode. One of: automatic, manual.
	// Mapping mode. One of: `automatic`, `manual`
	// +kubebuilder:validation:Optional
	MappingMode *string `json:"mappingMode,omitempty" tf:"mapping_mode,omitempty"`

	// Protocol to forward. One of: TCP (forward TCP packets), UDP (forward UDP packets), TCP_UDP (forward TCP and UDP packets).
	// Protocol to forward. One of: `TCP` (forward TCP packets), `UDP` (forward UDP packets), `TCP_UDP` (forward TCP and UDP packets).
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// VM to which this rule applies.
	// VM to which this rule applies.
	// +kubebuilder:validation:Optional
	VMID *string `json:"vmId" tf:"vm_id,omitempty"`

	// VM NIC ID to which this rule applies.
	// VM NIC ID to which this rule applies.
	// +kubebuilder:validation:Optional
	VMNicID *float64 `json:"vmNicId" tf:"vm_nic_id,omitempty"`
}

// VAppNatRulesSpec defines the desired state of VAppNatRules
type VAppNatRulesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VAppNatRulesParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VAppNatRulesInitParameters `json:"initProvider,omitempty"`
}

// VAppNatRulesStatus defines the observed state of VAppNatRules.
type VAppNatRulesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VAppNatRulesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VAppNatRules is the Schema for the VAppNatRuless API. Provides a VMware Cloud Director vApp NAT resource. This can be used to create, modify, and delete NAT rules.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type VAppNatRules struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.natType) || (has(self.initProvider) && has(self.initProvider.natType))",message="spec.forProvider.natType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.networkId) || (has(self.initProvider) && has(self.initProvider.networkId))",message="spec.forProvider.networkId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vappId) || (has(self.initProvider) && has(self.initProvider.vappId))",message="spec.forProvider.vappId is a required parameter"
	Spec   VAppNatRulesSpec   `json:"spec"`
	Status VAppNatRulesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VAppNatRulesList contains a list of VAppNatRuless
type VAppNatRulesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VAppNatRules `json:"items"`
}

// Repository type metadata.
var (
	VAppNatRules_Kind             = "VAppNatRules"
	VAppNatRules_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VAppNatRules_Kind}.String()
	VAppNatRules_KindAPIVersion   = VAppNatRules_Kind + "." + CRDGroupVersion.String()
	VAppNatRules_GroupVersionKind = CRDGroupVersion.WithKind(VAppNatRules_Kind)
)

func init() {
	SchemeBuilder.Register(&VAppNatRules{}, &VAppNatRulesList{})
}
