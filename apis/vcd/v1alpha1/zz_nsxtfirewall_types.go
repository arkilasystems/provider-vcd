// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NsxtFirewallInitParameters struct {

	// The ID of the Edge Gateway (NSX-T only). Can be looked up using
	// vcd_nsxt_edgegateway datasource
	// Edge Gateway ID in which Firewall Rule are located
	EdgeGatewayID *string `json:"edgeGatewayId,omitempty" tf:"edge_gateway_id,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// One or more blocks with Firewall Rule definitions
	// Ordered list of firewall rules
	Rule []NsxtFirewallRuleInitParameters `json:"rule,omitempty" tf:"rule,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type NsxtFirewallObservation struct {

	// The ID of the Edge Gateway (NSX-T only). Can be looked up using
	// vcd_nsxt_edgegateway datasource
	// Edge Gateway ID in which Firewall Rule are located
	EdgeGatewayID *string `json:"edgeGatewayId,omitempty" tf:"edge_gateway_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// One or more blocks with Firewall Rule definitions
	// Ordered list of firewall rules
	Rule []NsxtFirewallRuleObservation `json:"rule,omitempty" tf:"rule,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type NsxtFirewallParameters struct {

	// The ID of the Edge Gateway (NSX-T only). Can be looked up using
	// vcd_nsxt_edgegateway datasource
	// Edge Gateway ID in which Firewall Rule are located
	// +kubebuilder:validation:Optional
	EdgeGatewayID *string `json:"edgeGatewayId,omitempty" tf:"edge_gateway_id,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// One or more blocks with Firewall Rule definitions
	// Ordered list of firewall rules
	// +kubebuilder:validation:Optional
	Rule []NsxtFirewallRuleParameters `json:"rule,omitempty" tf:"rule,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type NsxtFirewallRuleInitParameters struct {

	// Defines if it should ALLOW, DROP or REJECT traffic
	// Defines if the rule should 'ALLOW', 'DROP' or 'REJECT' matching traffic
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// A set of Application Port Profiles. Leaving it empty matches Any (all)
	// A set of Application Port Profile IDs. Leaving it empty means 'Any'
	// +listType=set
	AppPortProfileIds []*string `json:"appPortProfileIds,omitempty" tf:"app_port_profile_ids,omitempty"`

	// A set of source object Firewall Groups (IP Sets or Security groups).
	// Leaving it empty matches Any (all)
	// A set of Destination Firewall Group IDs (IP Sets or Security Groups). Leaving it empty means 'Any'
	// +listType=set
	DestinationIds []*string `json:"destinationIds,omitempty" tf:"destination_ids,omitempty"`

	// One of IN, OUT, or IN_OUT
	// Direction on which Firewall Rule applies (One of 'IN', 'OUT', 'IN_OUT')
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// Defines if the rule is enabled (default true)
	// Defined if Firewall Rule is active
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// One of IPV4,  IPV6, or IPV4_IPV6
	// Firewall Rule Protocol (One of 'IPV4', 'IPV6', 'IPV4_IPV6')
	IPProtocol *string `json:"ipProtocol,omitempty" tf:"ip_protocol,omitempty"`

	// Defines if logging for this rule is enabled (default false)
	// Defines if matching traffic should be logged
	Logging *bool `json:"logging,omitempty" tf:"logging,omitempty"`

	// Explanatory name for firewall rule (uniqueness not enforced)
	// Firewall Rule name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A set of source object Firewall Groups (IP Sets or Security groups).
	// Leaving it empty matches Any (all)
	// A set of Source Firewall Group IDs (IP Sets or Security Groups). Leaving it empty means 'Any'
	// +listType=set
	SourceIds []*string `json:"sourceIds,omitempty" tf:"source_ids,omitempty"`
}

type NsxtFirewallRuleObservation struct {

	// Defines if it should ALLOW, DROP or REJECT traffic
	// Defines if the rule should 'ALLOW', 'DROP' or 'REJECT' matching traffic
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// A set of Application Port Profiles. Leaving it empty matches Any (all)
	// A set of Application Port Profile IDs. Leaving it empty means 'Any'
	// +listType=set
	AppPortProfileIds []*string `json:"appPortProfileIds,omitempty" tf:"app_port_profile_ids,omitempty"`

	// A set of source object Firewall Groups (IP Sets or Security groups).
	// Leaving it empty matches Any (all)
	// A set of Destination Firewall Group IDs (IP Sets or Security Groups). Leaving it empty means 'Any'
	// +listType=set
	DestinationIds []*string `json:"destinationIds,omitempty" tf:"destination_ids,omitempty"`

	// One of IN, OUT, or IN_OUT
	// Direction on which Firewall Rule applies (One of 'IN', 'OUT', 'IN_OUT')
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// Defines if the rule is enabled (default true)
	// Defined if Firewall Rule is active
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Firewall Rule ID
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// One of IPV4,  IPV6, or IPV4_IPV6
	// Firewall Rule Protocol (One of 'IPV4', 'IPV6', 'IPV4_IPV6')
	IPProtocol *string `json:"ipProtocol,omitempty" tf:"ip_protocol,omitempty"`

	// Defines if logging for this rule is enabled (default false)
	// Defines if matching traffic should be logged
	Logging *bool `json:"logging,omitempty" tf:"logging,omitempty"`

	// Explanatory name for firewall rule (uniqueness not enforced)
	// Firewall Rule name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A set of source object Firewall Groups (IP Sets or Security groups).
	// Leaving it empty matches Any (all)
	// A set of Source Firewall Group IDs (IP Sets or Security Groups). Leaving it empty means 'Any'
	// +listType=set
	SourceIds []*string `json:"sourceIds,omitempty" tf:"source_ids,omitempty"`
}

type NsxtFirewallRuleParameters struct {

	// Defines if it should ALLOW, DROP or REJECT traffic
	// Defines if the rule should 'ALLOW', 'DROP' or 'REJECT' matching traffic
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// A set of Application Port Profiles. Leaving it empty matches Any (all)
	// A set of Application Port Profile IDs. Leaving it empty means 'Any'
	// +kubebuilder:validation:Optional
	// +listType=set
	AppPortProfileIds []*string `json:"appPortProfileIds,omitempty" tf:"app_port_profile_ids,omitempty"`

	// A set of source object Firewall Groups (IP Sets or Security groups).
	// Leaving it empty matches Any (all)
	// A set of Destination Firewall Group IDs (IP Sets or Security Groups). Leaving it empty means 'Any'
	// +kubebuilder:validation:Optional
	// +listType=set
	DestinationIds []*string `json:"destinationIds,omitempty" tf:"destination_ids,omitempty"`

	// One of IN, OUT, or IN_OUT
	// Direction on which Firewall Rule applies (One of 'IN', 'OUT', 'IN_OUT')
	// +kubebuilder:validation:Optional
	Direction *string `json:"direction" tf:"direction,omitempty"`

	// Defines if the rule is enabled (default true)
	// Defined if Firewall Rule is active
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// One of IPV4,  IPV6, or IPV4_IPV6
	// Firewall Rule Protocol (One of 'IPV4', 'IPV6', 'IPV4_IPV6')
	// +kubebuilder:validation:Optional
	IPProtocol *string `json:"ipProtocol" tf:"ip_protocol,omitempty"`

	// Defines if logging for this rule is enabled (default false)
	// Defines if matching traffic should be logged
	// +kubebuilder:validation:Optional
	Logging *bool `json:"logging,omitempty" tf:"logging,omitempty"`

	// Explanatory name for firewall rule (uniqueness not enforced)
	// Firewall Rule name
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// A set of source object Firewall Groups (IP Sets or Security groups).
	// Leaving it empty matches Any (all)
	// A set of Source Firewall Group IDs (IP Sets or Security Groups). Leaving it empty means 'Any'
	// +kubebuilder:validation:Optional
	// +listType=set
	SourceIds []*string `json:"sourceIds,omitempty" tf:"source_ids,omitempty"`
}

// NsxtFirewallSpec defines the desired state of NsxtFirewall
type NsxtFirewallSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NsxtFirewallParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NsxtFirewallInitParameters `json:"initProvider,omitempty"`
}

// NsxtFirewallStatus defines the observed state of NsxtFirewall.
type NsxtFirewallStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NsxtFirewallObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NsxtFirewall is the Schema for the NsxtFirewalls API. Provides a resource to manage NSX-T Firewall. Firewalls allow user to control the incoming and outgoing network traffic to and from an NSX-T Data Center Edge Gateway.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type NsxtFirewall struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.edgeGatewayId) || (has(self.initProvider) && has(self.initProvider.edgeGatewayId))",message="spec.forProvider.edgeGatewayId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rule) || (has(self.initProvider) && has(self.initProvider.rule))",message="spec.forProvider.rule is a required parameter"
	Spec   NsxtFirewallSpec   `json:"spec"`
	Status NsxtFirewallStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtFirewallList contains a list of NsxtFirewalls
type NsxtFirewallList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NsxtFirewall `json:"items"`
}

// Repository type metadata.
var (
	NsxtFirewall_Kind             = "NsxtFirewall"
	NsxtFirewall_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NsxtFirewall_Kind}.String()
	NsxtFirewall_KindAPIVersion   = NsxtFirewall_Kind + "." + CRDGroupVersion.String()
	NsxtFirewall_GroupVersionKind = CRDGroupVersion.WithKind(NsxtFirewall_Kind)
)

func init() {
	SchemeBuilder.Register(&NsxtFirewall{}, &NsxtFirewallList{})
}
