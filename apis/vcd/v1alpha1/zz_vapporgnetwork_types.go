// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VAppOrgNetworkInitParameters struct {

	// Fencing allows identical virtual machines in different vApp networks connect to organization VDC networks that are accessed in this vApp. Default is false.
	// Fencing allows identical virtual machines in different vApp networks connect to organization VDC networks that are accessed in this vApp
	IsFenced *bool `json:"isFenced,omitempty" tf:"is_fenced,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when
	// connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// An Org network name to which vApp network is connected. If not configured, then an isolated network is created.
	// Organization network name to which vApp network is connected to
	OrgNetworkName *string `json:"orgNetworkName,omitempty" tf:"org_network_name,omitempty"`

	// VCD 10.4.1+ API prohibits removal of vApp
	// network from a powered on vApp. Set to true to power off the vApp during vApp network removal.
	// If the vApp's original state was powered on, it will be powered back on after removing the
	// network. (default false) Note. It only affects delete operation for the resource and will
	// never power cycle vApp during update operations. Changing this value will cause plan change, but
	// update will be a no-op operation.
	// Specifies whether the vApp should be rebooted when the vApp network is removed. Default is false.
	RebootVappOnRemoval *bool `json:"rebootVappOnRemoval,omitempty" tf:"reboot_vapp_on_removal,omitempty"`

	// Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Configurable when is_fenced is true.
	// Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
	RetainIPMacEnabled *bool `json:"retainIpMacEnabled,omitempty" tf:"retain_ip_mac_enabled,omitempty"`

	// The vApp this network belongs to.
	// vApp network name
	VappName *string `json:"vappName,omitempty" tf:"vapp_name,omitempty"`

	// The name of VDC to use, optional if defined at provider level.
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type VAppOrgNetworkObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Fencing allows identical virtual machines in different vApp networks connect to organization VDC networks that are accessed in this vApp. Default is false.
	// Fencing allows identical virtual machines in different vApp networks connect to organization VDC networks that are accessed in this vApp
	IsFenced *bool `json:"isFenced,omitempty" tf:"is_fenced,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when
	// connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// An Org network name to which vApp network is connected. If not configured, then an isolated network is created.
	// Organization network name to which vApp network is connected to
	OrgNetworkName *string `json:"orgNetworkName,omitempty" tf:"org_network_name,omitempty"`

	// VCD 10.4.1+ API prohibits removal of vApp
	// network from a powered on vApp. Set to true to power off the vApp during vApp network removal.
	// If the vApp's original state was powered on, it will be powered back on after removing the
	// network. (default false) Note. It only affects delete operation for the resource and will
	// never power cycle vApp during update operations. Changing this value will cause plan change, but
	// update will be a no-op operation.
	// Specifies whether the vApp should be rebooted when the vApp network is removed. Default is false.
	RebootVappOnRemoval *bool `json:"rebootVappOnRemoval,omitempty" tf:"reboot_vapp_on_removal,omitempty"`

	// Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Configurable when is_fenced is true.
	// Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
	RetainIPMacEnabled *bool `json:"retainIpMacEnabled,omitempty" tf:"retain_ip_mac_enabled,omitempty"`

	// The vApp this network belongs to.
	// vApp network name
	VappName *string `json:"vappName,omitempty" tf:"vapp_name,omitempty"`

	// The name of VDC to use, optional if defined at provider level.
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type VAppOrgNetworkParameters struct {

	// Fencing allows identical virtual machines in different vApp networks connect to organization VDC networks that are accessed in this vApp. Default is false.
	// Fencing allows identical virtual machines in different vApp networks connect to organization VDC networks that are accessed in this vApp
	// +kubebuilder:validation:Optional
	IsFenced *bool `json:"isFenced,omitempty" tf:"is_fenced,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when
	// connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// An Org network name to which vApp network is connected. If not configured, then an isolated network is created.
	// Organization network name to which vApp network is connected to
	// +kubebuilder:validation:Optional
	OrgNetworkName *string `json:"orgNetworkName,omitempty" tf:"org_network_name,omitempty"`

	// VCD 10.4.1+ API prohibits removal of vApp
	// network from a powered on vApp. Set to true to power off the vApp during vApp network removal.
	// If the vApp's original state was powered on, it will be powered back on after removing the
	// network. (default false) Note. It only affects delete operation for the resource and will
	// never power cycle vApp during update operations. Changing this value will cause plan change, but
	// update will be a no-op operation.
	// Specifies whether the vApp should be rebooted when the vApp network is removed. Default is false.
	// +kubebuilder:validation:Optional
	RebootVappOnRemoval *bool `json:"rebootVappOnRemoval,omitempty" tf:"reboot_vapp_on_removal,omitempty"`

	// Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Configurable when is_fenced is true.
	// Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
	// +kubebuilder:validation:Optional
	RetainIPMacEnabled *bool `json:"retainIpMacEnabled,omitempty" tf:"retain_ip_mac_enabled,omitempty"`

	// The vApp this network belongs to.
	// vApp network name
	// +kubebuilder:validation:Optional
	VappName *string `json:"vappName,omitempty" tf:"vapp_name,omitempty"`

	// The name of VDC to use, optional if defined at provider level.
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

// VAppOrgNetworkSpec defines the desired state of VAppOrgNetwork
type VAppOrgNetworkSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VAppOrgNetworkParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VAppOrgNetworkInitParameters `json:"initProvider,omitempty"`
}

// VAppOrgNetworkStatus defines the observed state of VAppOrgNetwork.
type VAppOrgNetworkStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VAppOrgNetworkObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VAppOrgNetwork is the Schema for the VAppOrgNetworks API. Provides capability to attach an existing Org VDC Network to a vApp and toggle network features.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type VAppOrgNetwork struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.orgNetworkName) || (has(self.initProvider) && has(self.initProvider.orgNetworkName))",message="spec.forProvider.orgNetworkName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vappName) || (has(self.initProvider) && has(self.initProvider.vappName))",message="spec.forProvider.vappName is a required parameter"
	Spec   VAppOrgNetworkSpec   `json:"spec"`
	Status VAppOrgNetworkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VAppOrgNetworkList contains a list of VAppOrgNetworks
type VAppOrgNetworkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VAppOrgNetwork `json:"items"`
}

// Repository type metadata.
var (
	VAppOrgNetwork_Kind             = "VAppOrgNetwork"
	VAppOrgNetwork_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VAppOrgNetwork_Kind}.String()
	VAppOrgNetwork_KindAPIVersion   = VAppOrgNetwork_Kind + "." + CRDGroupVersion.String()
	VAppOrgNetwork_GroupVersionKind = CRDGroupVersion.WithKind(VAppOrgNetwork_Kind)
)

func init() {
	SchemeBuilder.Register(&VAppOrgNetwork{}, &VAppOrgNetworkList{})
}
