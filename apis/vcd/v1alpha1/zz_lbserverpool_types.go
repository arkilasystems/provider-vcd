// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LbServerPoolInitParameters struct {

	// Server Pool load balancing method. Can be one of ip-hash, round-robin, uri, leastconn, url, or httpheader
	// Balancing method for the service. One of 'ip-hash', 'round-robin', 'uri', 'leastconn', 'url', or 'httpheader'
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// Valid only when algorithm is httpheader or url. The httpheader algorithm
	// parameter has one option headerName=<name> while the url algorithm parameter has option urlParam=<url>.
	// Additional options for load balancing algorithm for httpheader or url algorithms
	AlgorithmParameters *string `json:"algorithmParameters,omitempty" tf:"algorithm_parameters,omitempty"`

	// Server Pool description
	// Server pool description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the edge gateway on which the server pool is to be created
	// Edge gateway name in which the LB Server Pool is located
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// When transparency is false (default) backend servers see the IP address of the
	// traffic source as the internal IP address of the load balancer. When it is true the source IP address is the actual IP
	// address of the client and the edge gateway must be set as the default gateway to ensure that return packets go through
	// the edge gateway.
	// Makes client IP addresses visible to the backend servers
	EnableTransparency *bool `json:"enableTransparency,omitempty" tf:"enable_transparency,omitempty"`

	// A block to define server pool members. Multiple can be used. See Member and
	// example for usage details.
	Member []MemberInitParameters `json:"member,omitempty" tf:"member,omitempty"`

	// vcd_lb_service_monitor resource id to attach to server pool for health check parameters
	// Load Balancer Service Monitor ID
	MonitorID *string `json:"monitorId,omitempty" tf:"monitor_id,omitempty"`

	// Server Pool name
	// Unique LB Server Pool name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type LbServerPoolObservation struct {

	// Server Pool load balancing method. Can be one of ip-hash, round-robin, uri, leastconn, url, or httpheader
	// Balancing method for the service. One of 'ip-hash', 'round-robin', 'uri', 'leastconn', 'url', or 'httpheader'
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// Valid only when algorithm is httpheader or url. The httpheader algorithm
	// parameter has one option headerName=<name> while the url algorithm parameter has option urlParam=<url>.
	// Additional options for load balancing algorithm for httpheader or url algorithms
	AlgorithmParameters *string `json:"algorithmParameters,omitempty" tf:"algorithm_parameters,omitempty"`

	// Server Pool description
	// Server pool description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the edge gateway on which the server pool is to be created
	// Edge gateway name in which the LB Server Pool is located
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// When transparency is false (default) backend servers see the IP address of the
	// traffic source as the internal IP address of the load balancer. When it is true the source IP address is the actual IP
	// address of the client and the edge gateway must be set as the default gateway to ensure that return packets go through
	// the edge gateway.
	// Makes client IP addresses visible to the backend servers
	EnableTransparency *bool `json:"enableTransparency,omitempty" tf:"enable_transparency,omitempty"`

	// The NSX ID of the load balancer server pool
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A block to define server pool members. Multiple can be used. See Member and
	// example for usage details.
	Member []MemberObservation `json:"member,omitempty" tf:"member,omitempty"`

	// vcd_lb_service_monitor resource id to attach to server pool for health check parameters
	// Load Balancer Service Monitor ID
	MonitorID *string `json:"monitorId,omitempty" tf:"monitor_id,omitempty"`

	// Server Pool name
	// Unique LB Server Pool name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type LbServerPoolParameters struct {

	// Server Pool load balancing method. Can be one of ip-hash, round-robin, uri, leastconn, url, or httpheader
	// Balancing method for the service. One of 'ip-hash', 'round-robin', 'uri', 'leastconn', 'url', or 'httpheader'
	// +kubebuilder:validation:Optional
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// Valid only when algorithm is httpheader or url. The httpheader algorithm
	// parameter has one option headerName=<name> while the url algorithm parameter has option urlParam=<url>.
	// Additional options for load balancing algorithm for httpheader or url algorithms
	// +kubebuilder:validation:Optional
	AlgorithmParameters *string `json:"algorithmParameters,omitempty" tf:"algorithm_parameters,omitempty"`

	// Server Pool description
	// Server pool description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the edge gateway on which the server pool is to be created
	// Edge gateway name in which the LB Server Pool is located
	// +kubebuilder:validation:Optional
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// When transparency is false (default) backend servers see the IP address of the
	// traffic source as the internal IP address of the load balancer. When it is true the source IP address is the actual IP
	// address of the client and the edge gateway must be set as the default gateway to ensure that return packets go through
	// the edge gateway.
	// Makes client IP addresses visible to the backend servers
	// +kubebuilder:validation:Optional
	EnableTransparency *bool `json:"enableTransparency,omitempty" tf:"enable_transparency,omitempty"`

	// A block to define server pool members. Multiple can be used. See Member and
	// example for usage details.
	// +kubebuilder:validation:Optional
	Member []MemberParameters `json:"member,omitempty" tf:"member,omitempty"`

	// vcd_lb_service_monitor resource id to attach to server pool for health check parameters
	// Load Balancer Service Monitor ID
	// +kubebuilder:validation:Optional
	MonitorID *string `json:"monitorId,omitempty" tf:"monitor_id,omitempty"`

	// Server Pool name
	// Unique LB Server Pool name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type MemberInitParameters struct {

	// State of member in a pool. One of enabled, disabled, or drain. When member condition
	// is set to drain it stops taking new connections and calls, while it allows its sessions on existing connections to
	// continue until they naturally end. This allows to gracefully remove member node from load balancing rotation.
	// Defines member state. One of enabled, drain, disabled.
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// Member IP address
	// IP address of member in server pool
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The maximum number of concurrent connections the member can handle. Note: when the
	// number of incoming requests exceeds the maximum, requests are queued and the load balancer waits for a connection to be
	// released.
	// The maximum number of concurrent connections the member can handle. If exceeded requests are queued and the load balancer waits for a connection to be released
	MaxConnections *float64 `json:"maxConnections,omitempty" tf:"max_connections,omitempty"`

	// The minimum number of concurrent connections a member must always accept.
	// Minimum number of concurrent connections a member must always accept
	MinConnections *float64 `json:"minConnections,omitempty" tf:"min_connections,omitempty"`

	// Monitor Port at which the member is to receive health monitor requests. Note: can
	// be the same as port
	// Port at which the member is to receive health monitor requests. Can be the same as port
	MonitorPort *float64 `json:"monitorPort,omitempty" tf:"monitor_port,omitempty"`

	// Server Pool name
	// Name of pool member
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The port at which the member is to receive traffic from the load balancer.
	// Port at which the member is to receive traffic from the load balancer
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The proportion of traffic this member is to handle. Must be an integer in the range 1-256.
	// Proportion of traffic this member is to handle. Must be an integer in the range 1-256
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type MemberObservation struct {

	// State of member in a pool. One of enabled, disabled, or drain. When member condition
	// is set to drain it stops taking new connections and calls, while it allows its sessions on existing connections to
	// continue until they naturally end. This allows to gracefully remove member node from load balancing rotation.
	// Defines member state. One of enabled, drain, disabled.
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// The NSX ID of the load balancer server pool
	// Pool member id (formatted as member-xx, where xx is a number)
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Member IP address
	// IP address of member in server pool
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The maximum number of concurrent connections the member can handle. Note: when the
	// number of incoming requests exceeds the maximum, requests are queued and the load balancer waits for a connection to be
	// released.
	// The maximum number of concurrent connections the member can handle. If exceeded requests are queued and the load balancer waits for a connection to be released
	MaxConnections *float64 `json:"maxConnections,omitempty" tf:"max_connections,omitempty"`

	// The minimum number of concurrent connections a member must always accept.
	// Minimum number of concurrent connections a member must always accept
	MinConnections *float64 `json:"minConnections,omitempty" tf:"min_connections,omitempty"`

	// Monitor Port at which the member is to receive health monitor requests. Note: can
	// be the same as port
	// Port at which the member is to receive health monitor requests. Can be the same as port
	MonitorPort *float64 `json:"monitorPort,omitempty" tf:"monitor_port,omitempty"`

	// Server Pool name
	// Name of pool member
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The port at which the member is to receive traffic from the load balancer.
	// Port at which the member is to receive traffic from the load balancer
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The proportion of traffic this member is to handle. Must be an integer in the range 1-256.
	// Proportion of traffic this member is to handle. Must be an integer in the range 1-256
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type MemberParameters struct {

	// State of member in a pool. One of enabled, disabled, or drain. When member condition
	// is set to drain it stops taking new connections and calls, while it allows its sessions on existing connections to
	// continue until they naturally end. This allows to gracefully remove member node from load balancing rotation.
	// Defines member state. One of enabled, drain, disabled.
	// +kubebuilder:validation:Optional
	Condition *string `json:"condition" tf:"condition,omitempty"`

	// Member IP address
	// IP address of member in server pool
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress" tf:"ip_address,omitempty"`

	// The maximum number of concurrent connections the member can handle. Note: when the
	// number of incoming requests exceeds the maximum, requests are queued and the load balancer waits for a connection to be
	// released.
	// The maximum number of concurrent connections the member can handle. If exceeded requests are queued and the load balancer waits for a connection to be released
	// +kubebuilder:validation:Optional
	MaxConnections *float64 `json:"maxConnections,omitempty" tf:"max_connections,omitempty"`

	// The minimum number of concurrent connections a member must always accept.
	// Minimum number of concurrent connections a member must always accept
	// +kubebuilder:validation:Optional
	MinConnections *float64 `json:"minConnections,omitempty" tf:"min_connections,omitempty"`

	// Monitor Port at which the member is to receive health monitor requests. Note: can
	// be the same as port
	// Port at which the member is to receive health monitor requests. Can be the same as port
	// +kubebuilder:validation:Optional
	MonitorPort *float64 `json:"monitorPort" tf:"monitor_port,omitempty"`

	// Server Pool name
	// Name of pool member
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The port at which the member is to receive traffic from the load balancer.
	// Port at which the member is to receive traffic from the load balancer
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port" tf:"port,omitempty"`

	// The proportion of traffic this member is to handle. Must be an integer in the range 1-256.
	// Proportion of traffic this member is to handle. Must be an integer in the range 1-256
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight" tf:"weight,omitempty"`
}

// LbServerPoolSpec defines the desired state of LbServerPool
type LbServerPoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LbServerPoolParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LbServerPoolInitParameters `json:"initProvider,omitempty"`
}

// LbServerPoolStatus defines the observed state of LbServerPool.
type LbServerPoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LbServerPoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// LbServerPool is the Schema for the LbServerPools API. Provides an NSX edge gateway load balancer server pool resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type LbServerPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.algorithm) || (has(self.initProvider) && has(self.initProvider.algorithm))",message="spec.forProvider.algorithm is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.edgeGateway) || (has(self.initProvider) && has(self.initProvider.edgeGateway))",message="spec.forProvider.edgeGateway is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   LbServerPoolSpec   `json:"spec"`
	Status LbServerPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LbServerPoolList contains a list of LbServerPools
type LbServerPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LbServerPool `json:"items"`
}

// Repository type metadata.
var (
	LbServerPool_Kind             = "LbServerPool"
	LbServerPool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LbServerPool_Kind}.String()
	LbServerPool_KindAPIVersion   = LbServerPool_Kind + "." + CRDGroupVersion.String()
	LbServerPool_GroupVersionKind = CRDGroupVersion.WithKind(LbServerPool_Kind)
)

func init() {
	SchemeBuilder.Register(&LbServerPool{}, &LbServerPoolList{})
}
