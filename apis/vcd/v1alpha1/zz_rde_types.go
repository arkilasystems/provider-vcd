// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RdeInitParameters struct {

	// An external input_entity's ID that this Runtime Defined Entity may have a relation to.
	// An external entity's ID that this Runtime Defined Entity may have a relation to
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// A string that specifies a valid JSON for the RDE. It can be retrieved with functions such as file, templatefile... Either input_entity or input_entity_url is required.
	// A JSON representation of the Runtime Defined Entity that is defined by the user and is used to initialize/override its contents
	InputEntity *string `json:"inputEntity,omitempty" tf:"input_entity,omitempty"`

	// The URL that points to a valid JSON for the RDE. Either input_entity or input_entity_url is required.
	// If you can't guarantee this, it is safer to use input_entity.
	// URL that should point to a JSON representation of the Runtime Defined Entity and is used to initialize/override its contents
	InputEntityURL *string `json:"inputEntityUrl,omitempty" tf:"input_entity_url,omitempty"`

	// A set of metadata entries to assign. See Metadata section for details.
	// Metadata entries for the given Runtime Defined Entity
	MetadataEntry []RdeMetadataEntryInitParameters `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// The name of the Runtime Defined Entity. It can be non-unique.
	// The name of the Runtime Defined Entity. It can be non-unique
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of the Organization that will own the RDE, optional if defined at provider level.
	// The name of organization that will own this Runtime Defined Entity, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// The ID of the RDE Type to instantiate. It only supports
	// updating to a newer/lower version of the same RDE Type.
	// The Runtime Defined Entity Type ID
	RdeTypeID *string `json:"rdeTypeId,omitempty" tf:"rde_type_id,omitempty"`

	// If true, the Runtime Defined Entity will be resolved by this provider. If false, it won't be
	// resolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't be
	// deleted until the input_entity is resolved by either party, unless resolve_on_removal=true. See RDE resolution for more details.
	// If `true`, the Runtime Defined Entity will be resolved by this provider. If `false`, it won't beresolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't bedeleted until the entity is resolved.
	Resolve *bool `json:"resolve,omitempty" tf:"resolve,omitempty"`

	// If true, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion. Destroy will fail if it is not resolved. It is false by default.
	// If `true`, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion.Destroy will fail if it is not resolved.
	ResolveOnRemoval *bool `json:"resolveOnRemoval,omitempty" tf:"resolve_on_removal,omitempty"`
}

type RdeMetadataEntryInitParameters struct {

	// Only meaningful for providers. Allows them to share entries with their tenants. Currently, accepted values are: TENANT, PROVIDER. Defaults to TENANT.
	// Updating this value forces a re-creation of the metadata entry.
	// Only meaningful for providers. Allows them to share entries with their tenants. Currently, accepted values are: `TENANT`, `PROVIDER`
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Key of this metadata entry.
	// Key of this metadata entry. Required if the metadata entry is not empty
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Namespace of the metadata entry. Allows having multiple entries with same key in different namespaces.
	// Namespace of the metadata entry
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// true if the metadata is persistent. Persistent entries can be copied over on some entity operation.
	// Right now it doesn't have any effect.
	// Persistent metadata entries can be copied over on some entity operation
	Persistent *bool `json:"persistent,omitempty" tf:"persistent,omitempty"`

	// true if the metadata entry is read only. Defaults to false.  Updating this value forces a re-creation of the metadata entry.
	// True if the metadata entry is read only
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// Type of this metadata entry. One of: StringEntry, NumberEntry, BoolEntry. Defaults to StringEntry.
	// Updating this value forces a re-creation of the metadata entry.
	// Type of this metadata entry. One of: 'StringEntry', 'NumberEntry', 'BoolEntry'
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Value of this metadata entry. It can be updated.
	// Value of this metadata entry. Required if the metadata entry is not empty
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type RdeMetadataEntryObservation struct {

	// Only meaningful for providers. Allows them to share entries with their tenants. Currently, accepted values are: TENANT, PROVIDER. Defaults to TENANT.
	// Updating this value forces a re-creation of the metadata entry.
	// Only meaningful for providers. Allows them to share entries with their tenants. Currently, accepted values are: `TENANT`, `PROVIDER`
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (Computed) Read-only identifier for this metadata entry.
	// ID of the metadata entry
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Key of this metadata entry.
	// Key of this metadata entry. Required if the metadata entry is not empty
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Namespace of the metadata entry. Allows having multiple entries with same key in different namespaces.
	// Namespace of the metadata entry
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// true if the metadata is persistent. Persistent entries can be copied over on some entity operation.
	// Right now it doesn't have any effect.
	// Persistent metadata entries can be copied over on some entity operation
	Persistent *bool `json:"persistent,omitempty" tf:"persistent,omitempty"`

	// true if the metadata entry is read only. Defaults to false.  Updating this value forces a re-creation of the metadata entry.
	// True if the metadata entry is read only
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// Type of this metadata entry. One of: StringEntry, NumberEntry, BoolEntry. Defaults to StringEntry.
	// Updating this value forces a re-creation of the metadata entry.
	// Type of this metadata entry. One of: 'StringEntry', 'NumberEntry', 'BoolEntry'
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Value of this metadata entry. It can be updated.
	// Value of this metadata entry. Required if the metadata entry is not empty
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type RdeMetadataEntryParameters struct {

	// Only meaningful for providers. Allows them to share entries with their tenants. Currently, accepted values are: TENANT, PROVIDER. Defaults to TENANT.
	// Updating this value forces a re-creation of the metadata entry.
	// Only meaningful for providers. Allows them to share entries with their tenants. Currently, accepted values are: `TENANT`, `PROVIDER`
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Key of this metadata entry.
	// Key of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// Namespace of the metadata entry. Allows having multiple entries with same key in different namespaces.
	// Namespace of the metadata entry
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// true if the metadata is persistent. Persistent entries can be copied over on some entity operation.
	// Right now it doesn't have any effect.
	// Persistent metadata entries can be copied over on some entity operation
	// +kubebuilder:validation:Optional
	Persistent *bool `json:"persistent,omitempty" tf:"persistent,omitempty"`

	// true if the metadata entry is read only. Defaults to false.  Updating this value forces a re-creation of the metadata entry.
	// True if the metadata entry is read only
	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// Type of this metadata entry. One of: StringEntry, NumberEntry, BoolEntry. Defaults to StringEntry.
	// Updating this value forces a re-creation of the metadata entry.
	// Type of this metadata entry. One of: 'StringEntry', 'NumberEntry', 'BoolEntry'
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Value of this metadata entry. It can be updated.
	// Value of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type RdeObservation struct {

	// The real state of this RDE in VCD. See Input entity vs Computed entity below for details.
	// A computed representation of the actual Runtime Defined Entity JSON retrieved from VCD. Useful to see the actual entity contents if it is being changed by a third party in VCD
	ComputedEntity *string `json:"computedEntity,omitempty" tf:"computed_entity,omitempty"`

	// It's true when computed_entity is equal to either input_entity or the contents of input_entity_url,
	// meaning that the computed RDE retrieved from VCD is synchronized with the input RDE.
	// If true, `computed_entity` is equal to either `input_entity` or the contents of `input_entity_url`
	EntityInSync *bool `json:"entityInSync,omitempty" tf:"entity_in_sync,omitempty"`

	// An external input_entity's ID that this Runtime Defined Entity may have a relation to.
	// An external entity's ID that this Runtime Defined Entity may have a relation to
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// (Computed) Read-only identifier for this metadata entry.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A string that specifies a valid JSON for the RDE. It can be retrieved with functions such as file, templatefile... Either input_entity or input_entity_url is required.
	// A JSON representation of the Runtime Defined Entity that is defined by the user and is used to initialize/override its contents
	InputEntity *string `json:"inputEntity,omitempty" tf:"input_entity,omitempty"`

	// The URL that points to a valid JSON for the RDE. Either input_entity or input_entity_url is required.
	// If you can't guarantee this, it is safer to use input_entity.
	// URL that should point to a JSON representation of the Runtime Defined Entity and is used to initialize/override its contents
	InputEntityURL *string `json:"inputEntityUrl,omitempty" tf:"input_entity_url,omitempty"`

	// A set of metadata entries to assign. See Metadata section for details.
	// Metadata entries for the given Runtime Defined Entity
	MetadataEntry []RdeMetadataEntryObservation `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// The name of the Runtime Defined Entity. It can be non-unique.
	// The name of the Runtime Defined Entity. It can be non-unique
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of the Organization that will own the RDE, optional if defined at provider level.
	// The name of organization that will own this Runtime Defined Entity, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// The ID of the Organization to which the Runtime Defined Entity belongs.
	// The organization of the Runtime Defined Entity
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// The ID of the Organization user that owns this Runtime Defined Entity.
	// The ID of the user that owns the Runtime Defined Entity
	OwnerUserID *string `json:"ownerUserId,omitempty" tf:"owner_user_id,omitempty"`

	// The ID of the RDE Type to instantiate. It only supports
	// updating to a newer/lower version of the same RDE Type.
	// The Runtime Defined Entity Type ID
	RdeTypeID *string `json:"rdeTypeId,omitempty" tf:"rde_type_id,omitempty"`

	// If true, the Runtime Defined Entity will be resolved by this provider. If false, it won't be
	// resolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't be
	// deleted until the input_entity is resolved by either party, unless resolve_on_removal=true. See RDE resolution for more details.
	// If `true`, the Runtime Defined Entity will be resolved by this provider. If `false`, it won't beresolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't bedeleted until the entity is resolved.
	Resolve *bool `json:"resolve,omitempty" tf:"resolve,omitempty"`

	// If true, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion. Destroy will fail if it is not resolved. It is false by default.
	// If `true`, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion.Destroy will fail if it is not resolved.
	ResolveOnRemoval *bool `json:"resolveOnRemoval,omitempty" tf:"resolve_on_removal,omitempty"`

	// Specifies whether the entity is correctly resolved or not. When created it will be in PRE_CREATED state.
	// If the entity is correctly validated against its RDE Type schema, the state will be RESOLVED,
	// otherwise it will be RESOLUTION_ERROR.
	// Specifies whether the entity is correctly resolved or not. When created it will be in PRE_CREATED state. If the entity is correctly validated against its RDE Type schema, the state will be RESOLVED,otherwise it will be RESOLUTION_ERROR. If an entity resolution ends in a RESOLUTION_ERROR state, it will require to be updated to a correct JSON to be usable
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type RdeParameters struct {

	// An external input_entity's ID that this Runtime Defined Entity may have a relation to.
	// An external entity's ID that this Runtime Defined Entity may have a relation to
	// +kubebuilder:validation:Optional
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// A string that specifies a valid JSON for the RDE. It can be retrieved with functions such as file, templatefile... Either input_entity or input_entity_url is required.
	// A JSON representation of the Runtime Defined Entity that is defined by the user and is used to initialize/override its contents
	// +kubebuilder:validation:Optional
	InputEntity *string `json:"inputEntity,omitempty" tf:"input_entity,omitempty"`

	// The URL that points to a valid JSON for the RDE. Either input_entity or input_entity_url is required.
	// If you can't guarantee this, it is safer to use input_entity.
	// URL that should point to a JSON representation of the Runtime Defined Entity and is used to initialize/override its contents
	// +kubebuilder:validation:Optional
	InputEntityURL *string `json:"inputEntityUrl,omitempty" tf:"input_entity_url,omitempty"`

	// A set of metadata entries to assign. See Metadata section for details.
	// Metadata entries for the given Runtime Defined Entity
	// +kubebuilder:validation:Optional
	MetadataEntry []RdeMetadataEntryParameters `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// The name of the Runtime Defined Entity. It can be non-unique.
	// The name of the Runtime Defined Entity. It can be non-unique
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of the Organization that will own the RDE, optional if defined at provider level.
	// The name of organization that will own this Runtime Defined Entity, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// The ID of the RDE Type to instantiate. It only supports
	// updating to a newer/lower version of the same RDE Type.
	// The Runtime Defined Entity Type ID
	// +kubebuilder:validation:Optional
	RdeTypeID *string `json:"rdeTypeId,omitempty" tf:"rde_type_id,omitempty"`

	// If true, the Runtime Defined Entity will be resolved by this provider. If false, it won't be
	// resolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't be
	// deleted until the input_entity is resolved by either party, unless resolve_on_removal=true. See RDE resolution for more details.
	// If `true`, the Runtime Defined Entity will be resolved by this provider. If `false`, it won't beresolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't bedeleted until the entity is resolved.
	// +kubebuilder:validation:Optional
	Resolve *bool `json:"resolve,omitempty" tf:"resolve,omitempty"`

	// If true, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion. Destroy will fail if it is not resolved. It is false by default.
	// If `true`, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion.Destroy will fail if it is not resolved.
	// +kubebuilder:validation:Optional
	ResolveOnRemoval *bool `json:"resolveOnRemoval,omitempty" tf:"resolve_on_removal,omitempty"`
}

// RdeSpec defines the desired state of Rde
type RdeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RdeParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RdeInitParameters `json:"initProvider,omitempty"`
}

// RdeStatus defines the observed state of Rde.
type RdeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RdeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Rde is the Schema for the Rdes API. Provides the capability of creating, updating, and deleting Runtime Defined Entities in VMware Cloud Director.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type Rde struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rdeTypeId) || (has(self.initProvider) && has(self.initProvider.rdeTypeId))",message="spec.forProvider.rdeTypeId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resolve) || (has(self.initProvider) && has(self.initProvider.resolve))",message="spec.forProvider.resolve is a required parameter"
	Spec   RdeSpec   `json:"spec"`
	Status RdeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RdeList contains a list of Rdes
type RdeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Rde `json:"items"`
}

// Repository type metadata.
var (
	Rde_Kind             = "Rde"
	Rde_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Rde_Kind}.String()
	Rde_KindAPIVersion   = Rde_Kind + "." + CRDGroupVersion.String()
	Rde_GroupVersionKind = CRDGroupVersion.WithKind(Rde_Kind)
)

func init() {
	SchemeBuilder.Register(&Rde{}, &RdeList{})
}
