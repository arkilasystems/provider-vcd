// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OrgGroupInitParameters struct {

	// The description of Organization group
	// Description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A unique name for the group.
	// Group name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to which the VDC belongs. Optional if defined at provider level.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Identity provider type for this this group. One of SAML, OAUTH or
	// INTEGRATED. Note LDAP must be configured to create INTEGRATED groups and names must
	// match LDAP group names. If LDAP is not configured - it will return 403 errors.
	// Identity provider type for this this group. One of: 'INTEGRATED', 'SAML', 'OAUTH'.
	ProviderType *string `json:"providerType,omitempty" tf:"provider_type,omitempty"`

	// The role of the group. Role names can be retrieved from the organization. Both built-in roles and
	// custom built can be used. The roles normally available are:
	// Existing role name to assign
	Role *string `json:"role,omitempty" tf:"role,omitempty"`
}

type OrgGroupObservation struct {

	// The description of Organization group
	// Description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the Organization group
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A unique name for the group.
	// Group name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to which the VDC belongs. Optional if defined at provider level.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Identity provider type for this this group. One of SAML, OAUTH or
	// INTEGRATED. Note LDAP must be configured to create INTEGRATED groups and names must
	// match LDAP group names. If LDAP is not configured - it will return 403 errors.
	// Identity provider type for this this group. One of: 'INTEGRATED', 'SAML', 'OAUTH'.
	ProviderType *string `json:"providerType,omitempty" tf:"provider_type,omitempty"`

	// The role of the group. Role names can be retrieved from the organization. Both built-in roles and
	// custom built can be used. The roles normally available are:
	// Existing role name to assign
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// (Read only) The set of user names that belong to this group. It's only populated if the users
	// are created after the group (with depends_on the given group).
	// Read only. Set of user names that belong to the group
	// +listType=set
	UserNames []*string `json:"userNames,omitempty" tf:"user_names,omitempty"`
}

type OrgGroupParameters struct {

	// The description of Organization group
	// Description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A unique name for the group.
	// Group name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to which the VDC belongs. Optional if defined at provider level.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Identity provider type for this this group. One of SAML, OAUTH or
	// INTEGRATED. Note LDAP must be configured to create INTEGRATED groups and names must
	// match LDAP group names. If LDAP is not configured - it will return 403 errors.
	// Identity provider type for this this group. One of: 'INTEGRATED', 'SAML', 'OAUTH'.
	// +kubebuilder:validation:Optional
	ProviderType *string `json:"providerType,omitempty" tf:"provider_type,omitempty"`

	// The role of the group. Role names can be retrieved from the organization. Both built-in roles and
	// custom built can be used. The roles normally available are:
	// Existing role name to assign
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`
}

// OrgGroupSpec defines the desired state of OrgGroup
type OrgGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrgGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider OrgGroupInitParameters `json:"initProvider,omitempty"`
}

// OrgGroupStatus defines the observed state of OrgGroup.
type OrgGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrgGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// OrgGroup is the Schema for the OrgGroups API. Provides a VMware Cloud Director Organization group. This can be used to create, update, and delete organization groups defined in SAML or LDAP.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type OrgGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.providerType) || (has(self.initProvider) && has(self.initProvider.providerType))",message="spec.forProvider.providerType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.role) || (has(self.initProvider) && has(self.initProvider.role))",message="spec.forProvider.role is a required parameter"
	Spec   OrgGroupSpec   `json:"spec"`
	Status OrgGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrgGroupList contains a list of OrgGroups
type OrgGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrgGroup `json:"items"`
}

// Repository type metadata.
var (
	OrgGroup_Kind             = "OrgGroup"
	OrgGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OrgGroup_Kind}.String()
	OrgGroup_KindAPIVersion   = OrgGroup_Kind + "." + CRDGroupVersion.String()
	OrgGroup_GroupVersionKind = CRDGroupVersion.WithKind(OrgGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&OrgGroup{}, &OrgGroupList{})
}
