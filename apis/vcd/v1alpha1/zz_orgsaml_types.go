// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OrgSamlInitParameters struct {

	// The name of the SAML attribute that returns the email address of the user
	// Optional email attribute name
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// If true, the organization will use SAML for authentication
	// Enable SAML authentication. When this option is set, authentication is deferred to the SAML identity provider
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Your service provider entity ID. Once you set this field, it cannot be changed back to empty
	// Your service provider entity ID. Once you set this field, it cannot be changed back to empty.
	EntityID *string `json:"entityId,omitempty" tf:"entity_id,omitempty"`

	// The name of the SAML attribute that returns the first name of the user
	// Optional first name attribute name
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// The name of the SAML attribute that returns the full name of the user
	// Optional full name attribute name
	FullName *string `json:"fullName,omitempty" tf:"full_name,omitempty"`

	// The name of the SAML attribute that returns the identifiers of all the groups of which the user is a member
	// Optional group attribute name
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// Name of a file containing the metadata text from a SAML Identity Provider. Required if identity_provider_metadata_text is not defined
	// The name of the file containing the metadata from the identity provider
	IdentityProviderMetadataFile *string `json:"identityProviderMetadataFile,omitempty" tf:"identity_provider_metadata_file,omitempty"`

	// Text of the metadata text from a SAML Identity Provider. Required if identity_provider_metadata_file is not defined
	// The text of the metadata from the identity provider
	IdentityProviderMetadataText *string `json:"identityProviderMetadataText,omitempty" tf:"identity_provider_metadata_text,omitempty"`

	// Since there is only one SAML configuration available for an organization, the resource can be identified by the Org itself
	// Organization ID
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// The name of the SAML attribute that returns the identifiers of all roles of the user
	// Optional role attribute name
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// The name of the SAML attribute that returns the surname of the user
	// Optional surname attribute name
	Surname *string `json:"surname,omitempty" tf:"surname,omitempty"`

	// The name of the SAML attribute that returns the username of the user
	// Optional username attribute name
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

type OrgSamlObservation struct {

	// The name of the SAML attribute that returns the email address of the user
	// Optional email attribute name
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// If true, the organization will use SAML for authentication
	// Enable SAML authentication. When this option is set, authentication is deferred to the SAML identity provider
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Your service provider entity ID. Once you set this field, it cannot be changed back to empty
	// Your service provider entity ID. Once you set this field, it cannot be changed back to empty.
	EntityID *string `json:"entityId,omitempty" tf:"entity_id,omitempty"`

	// The name of the SAML attribute that returns the first name of the user
	// Optional first name attribute name
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// The name of the SAML attribute that returns the full name of the user
	// Optional full name attribute name
	FullName *string `json:"fullName,omitempty" tf:"full_name,omitempty"`

	// The name of the SAML attribute that returns the identifiers of all the groups of which the user is a member
	// Optional group attribute name
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of a file containing the metadata text from a SAML Identity Provider. Required if identity_provider_metadata_text is not defined
	// The name of the file containing the metadata from the identity provider
	IdentityProviderMetadataFile *string `json:"identityProviderMetadataFile,omitempty" tf:"identity_provider_metadata_file,omitempty"`

	// Text of the metadata text from a SAML Identity Provider. Required if identity_provider_metadata_file is not defined
	// The text of the metadata from the identity provider
	IdentityProviderMetadataText *string `json:"identityProviderMetadataText,omitempty" tf:"identity_provider_metadata_text,omitempty"`

	// Since there is only one SAML configuration available for an organization, the resource can be identified by the Org itself
	// Organization ID
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// The name of the SAML attribute that returns the identifiers of all roles of the user
	// Optional role attribute name
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// The name of the SAML attribute that returns the surname of the user
	// Optional surname attribute name
	Surname *string `json:"surname,omitempty" tf:"surname,omitempty"`

	// The name of the SAML attribute that returns the username of the user
	// Optional username attribute name
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

type OrgSamlParameters struct {

	// The name of the SAML attribute that returns the email address of the user
	// Optional email attribute name
	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// If true, the organization will use SAML for authentication
	// Enable SAML authentication. When this option is set, authentication is deferred to the SAML identity provider
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Your service provider entity ID. Once you set this field, it cannot be changed back to empty
	// Your service provider entity ID. Once you set this field, it cannot be changed back to empty.
	// +kubebuilder:validation:Optional
	EntityID *string `json:"entityId,omitempty" tf:"entity_id,omitempty"`

	// The name of the SAML attribute that returns the first name of the user
	// Optional first name attribute name
	// +kubebuilder:validation:Optional
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// The name of the SAML attribute that returns the full name of the user
	// Optional full name attribute name
	// +kubebuilder:validation:Optional
	FullName *string `json:"fullName,omitempty" tf:"full_name,omitempty"`

	// The name of the SAML attribute that returns the identifiers of all the groups of which the user is a member
	// Optional group attribute name
	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// Name of a file containing the metadata text from a SAML Identity Provider. Required if identity_provider_metadata_text is not defined
	// The name of the file containing the metadata from the identity provider
	// +kubebuilder:validation:Optional
	IdentityProviderMetadataFile *string `json:"identityProviderMetadataFile,omitempty" tf:"identity_provider_metadata_file,omitempty"`

	// Text of the metadata text from a SAML Identity Provider. Required if identity_provider_metadata_file is not defined
	// The text of the metadata from the identity provider
	// +kubebuilder:validation:Optional
	IdentityProviderMetadataText *string `json:"identityProviderMetadataText,omitempty" tf:"identity_provider_metadata_text,omitempty"`

	// Since there is only one SAML configuration available for an organization, the resource can be identified by the Org itself
	// Organization ID
	// +kubebuilder:validation:Optional
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// The name of the SAML attribute that returns the identifiers of all roles of the user
	// Optional role attribute name
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// The name of the SAML attribute that returns the surname of the user
	// Optional surname attribute name
	// +kubebuilder:validation:Optional
	Surname *string `json:"surname,omitempty" tf:"surname,omitempty"`

	// The name of the SAML attribute that returns the username of the user
	// Optional username attribute name
	// +kubebuilder:validation:Optional
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

// OrgSamlSpec defines the desired state of OrgSaml
type OrgSamlSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrgSamlParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider OrgSamlInitParameters `json:"initProvider,omitempty"`
}

// OrgSamlStatus defines the observed state of OrgSaml.
type OrgSamlStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrgSamlObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// OrgSaml is the Schema for the OrgSamls API. Provides a VMware Cloud Director Organization SAML resource. This can be used to create, delete, and update SAML configuration for an organization.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type OrgSaml struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.orgId) || (has(self.initProvider) && has(self.initProvider.orgId))",message="spec.forProvider.orgId is a required parameter"
	Spec   OrgSamlSpec   `json:"spec"`
	Status OrgSamlStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrgSamlList contains a list of OrgSamls
type OrgSamlList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrgSaml `json:"items"`
}

// Repository type metadata.
var (
	OrgSaml_Kind             = "OrgSaml"
	OrgSaml_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OrgSaml_Kind}.String()
	OrgSaml_KindAPIVersion   = OrgSaml_Kind + "." + CRDGroupVersion.String()
	OrgSaml_GroupVersionKind = CRDGroupVersion.WithKind(OrgSaml_Kind)
)

func init() {
	SchemeBuilder.Register(&OrgSaml{}, &OrgSamlList{})
}
