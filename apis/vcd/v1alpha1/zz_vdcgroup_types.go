// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ParticipatingOrgVdcsInitParameters struct {
}

type ParticipatingOrgVdcsObservation struct {

	// Represents the fault domain of a given organization VDC.
	FaultDomainTag *string `json:"faultDomainTag,omitempty" tf:"fault_domain_tag,omitempty"`

	// Specifies whether the VDC is local to this VCD site.
	IsRemoteOrg *bool `json:"isRemoteOrg,omitempty" tf:"is_remote_org,omitempty"`

	// Specifies the network provider scope of the VDC.
	NetworkProviderScope *string `json:"networkProviderScope,omitempty" tf:"network_provider_scope,omitempty"`

	// Organization ID.
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Organization name.
	OrgName *string `json:"orgName,omitempty" tf:"org_name,omitempty"`

	// Site ID.
	SiteID *string `json:"siteId,omitempty" tf:"site_id,omitempty"`

	// Site name.
	SiteName *string `json:"siteName,omitempty" tf:"site_name,omitempty"`

	// The status that the group can be in (e.g. 'SAVING', 'SAVED', 'CONFIGURING', 'REALIZED', 'REALIZATION_FAILED', 'DELETING', 'DELETE_FAILED', 'OBJECT_NOT_FOUND', 'UNCONFIGURED').
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// VDC ID.
	VdcID *string `json:"vdcId,omitempty" tf:"vdc_id,omitempty"`

	// VDC name.
	VdcName *string `json:"vdcName,omitempty" tf:"vdc_name,omitempty"`
}

type ParticipatingOrgVdcsParameters struct {
}

type VdcGroupInitParameters struct {

	// Whether this security policy is enabled. dfw_enabled must be true.
	// Default Policy Status
	DefaultPolicyStatus *bool `json:"defaultPolicyStatus,omitempty" tf:"default_policy_status,omitempty"`

	// VDC group description
	// VDC group description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether Distributed Firewall is enabled for this VDC group.
	// Distributed firewall status
	DfwEnabled *bool `json:"dfwEnabled,omitempty" tf:"dfw_enabled,omitempty"`

	// When true, will request VCD to force VDC Group deletion. It
	// should clean up child components. Default false (VCD may fail removing VDC Group if there are
	// child components remaining). Note: when setting it to true for existing resource, it will
	// cause a plan change (update), but this will not alter the resource in any way.
	// Forces deletion of VDC Group during destroy
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete,omitempty"`

	// The name for VDC group
	// Name of VDC group
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// The list of organization VDCs that are participating in this group. Note: starting_vdc_id isn't automatically included in this list.
	// Participating VDC IDs
	// +listType=set
	ParticipatingVdcIds []*string `json:"participatingVdcIds,omitempty" tf:"participating_vdc_ids,omitempty"`

	// Marks whether default firewall rule should be
	// removed after activating. Both dfw_enabled and default_policy_status must be true. Note.
	// This is mainly useful when using
	// vcd_nsxt_distributed_firewall_rule
	// resource as it cannot remove the default rule.
	// A flag to remove default firewall rule when DFW and Default Policy are both enabled
	RemoveDefaultFirewallRule *bool `json:"removeDefaultFirewallRule,omitempty" tf:"remove_default_firewall_rule,omitempty"`

	// With selecting a starting VDC you will be able to create a group in which this VDC can participate. Note: starting_vdc_id must be included in participating_vdc_ids to participate in this group.
	// Starting VDC ID
	StartingVdcID *string `json:"startingVdcId,omitempty" tf:"starting_vdc_id,omitempty"`
}

type VdcGroupObservation struct {

	// Whether this security policy is enabled. dfw_enabled must be true.
	// Default Policy Status
	DefaultPolicyStatus *bool `json:"defaultPolicyStatus,omitempty" tf:"default_policy_status,omitempty"`

	// VDC group description
	// VDC group description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether Distributed Firewall is enabled for this VDC group.
	// Distributed firewall status
	DfwEnabled *bool `json:"dfwEnabled,omitempty" tf:"dfw_enabled,omitempty"`

	// More detailed error message when VDC group has error status
	// More detailed error message when VDC group has error status
	ErrorMessage *string `json:"errorMessage,omitempty" tf:"error_message,omitempty"`

	// When true, will request VCD to force VDC Group deletion. It
	// should clean up child components. Default false (VCD may fail removing VDC Group if there are
	// child components remaining). Note: when setting it to true for existing resource, it will
	// cause a plan change (update), but this will not alter the resource in any way.
	// Forces deletion of VDC Group during destroy
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete,omitempty"`

	// The VDC group ID
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Status whether local egress is enabled for a universal router belonging to a universal VDC group.
	// Status whether local egress is enabled for a universal router belonging to a universal VDC group
	LocalEgress *bool `json:"localEgress,omitempty" tf:"local_egress,omitempty"`

	// The name for VDC group
	// Name of VDC group
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of used network pool.
	// ID of used network pool
	NetworkPoolID *string `json:"networkPoolId,omitempty" tf:"network_pool_id,omitempty"`

	// The network provider’s universal id that is backing the universal network pool.
	// The network provider’s universal id that is backing the universal network pool
	NetworkPoolUniversalID *string `json:"networkPoolUniversalId,omitempty" tf:"network_pool_universal_id,omitempty"`

	// Defines the networking provider backing the VDC group.
	// Defines the networking provider backing the VDC Group
	NetworkProviderType *string `json:"networkProviderType,omitempty" tf:"network_provider_type,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// A list of blocks providing organization VDCs that are participating in this group details. See Participating Org VDCs below for details.
	// The list of organization VDCs that are participating in this group
	ParticipatingOrgVdcs []ParticipatingOrgVdcsObservation `json:"participatingOrgVdcs,omitempty" tf:"participating_org_vdcs,omitempty"`

	// The list of organization VDCs that are participating in this group. Note: starting_vdc_id isn't automatically included in this list.
	// Participating VDC IDs
	// +listType=set
	ParticipatingVdcIds []*string `json:"participatingVdcIds,omitempty" tf:"participating_vdc_ids,omitempty"`

	// Marks whether default firewall rule should be
	// removed after activating. Both dfw_enabled and default_policy_status must be true. Note.
	// This is mainly useful when using
	// vcd_nsxt_distributed_firewall_rule
	// resource as it cannot remove the default rule.
	// A flag to remove default firewall rule when DFW and Default Policy are both enabled
	RemoveDefaultFirewallRule *bool `json:"removeDefaultFirewallRule,omitempty" tf:"remove_default_firewall_rule,omitempty"`

	// With selecting a starting VDC you will be able to create a group in which this VDC can participate. Note: starting_vdc_id must be included in participating_vdc_ids to participate in this group.
	// Starting VDC ID
	StartingVdcID *string `json:"startingVdcId,omitempty" tf:"starting_vdc_id,omitempty"`

	// The status that the group can be in (e.g. 'SAVING', 'SAVED', 'CONFIGURING', 'REALIZED', 'REALIZATION_FAILED', 'DELETING', 'DELETE_FAILED', 'OBJECT_NOT_FOUND', 'UNCONFIGURED').
	// The status that the group can be in (e.g. 'SAVING', 'SAVED', 'CONFIGURING', 'REALIZED', 'REALIZATION_FAILED', 'DELETING', 'DELETE_FAILED', 'OBJECT_NOT_FOUND', 'UNCONFIGURED')
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Defines the group as LOCAL or UNIVERSAL.
	// Defines the group as LOCAL or UNIVERSAL
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// True means that a VDC group router has been created.
	// True means that a VDC group router has been created
	UniversalNetworkingEnabled *bool `json:"universalNetworkingEnabled,omitempty" tf:"universal_networking_enabled,omitempty"`
}

type VdcGroupParameters struct {

	// Whether this security policy is enabled. dfw_enabled must be true.
	// Default Policy Status
	// +kubebuilder:validation:Optional
	DefaultPolicyStatus *bool `json:"defaultPolicyStatus,omitempty" tf:"default_policy_status,omitempty"`

	// VDC group description
	// VDC group description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether Distributed Firewall is enabled for this VDC group.
	// Distributed firewall status
	// +kubebuilder:validation:Optional
	DfwEnabled *bool `json:"dfwEnabled,omitempty" tf:"dfw_enabled,omitempty"`

	// When true, will request VCD to force VDC Group deletion. It
	// should clean up child components. Default false (VCD may fail removing VDC Group if there are
	// child components remaining). Note: when setting it to true for existing resource, it will
	// cause a plan change (update), but this will not alter the resource in any way.
	// Forces deletion of VDC Group during destroy
	// +kubebuilder:validation:Optional
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete,omitempty"`

	// The name for VDC group
	// Name of VDC group
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// The list of organization VDCs that are participating in this group. Note: starting_vdc_id isn't automatically included in this list.
	// Participating VDC IDs
	// +kubebuilder:validation:Optional
	// +listType=set
	ParticipatingVdcIds []*string `json:"participatingVdcIds,omitempty" tf:"participating_vdc_ids,omitempty"`

	// Marks whether default firewall rule should be
	// removed after activating. Both dfw_enabled and default_policy_status must be true. Note.
	// This is mainly useful when using
	// vcd_nsxt_distributed_firewall_rule
	// resource as it cannot remove the default rule.
	// A flag to remove default firewall rule when DFW and Default Policy are both enabled
	// +kubebuilder:validation:Optional
	RemoveDefaultFirewallRule *bool `json:"removeDefaultFirewallRule,omitempty" tf:"remove_default_firewall_rule,omitempty"`

	// With selecting a starting VDC you will be able to create a group in which this VDC can participate. Note: starting_vdc_id must be included in participating_vdc_ids to participate in this group.
	// Starting VDC ID
	// +kubebuilder:validation:Optional
	StartingVdcID *string `json:"startingVdcId,omitempty" tf:"starting_vdc_id,omitempty"`
}

// VdcGroupSpec defines the desired state of VdcGroup
type VdcGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VdcGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VdcGroupInitParameters `json:"initProvider,omitempty"`
}

// VdcGroupStatus defines the observed state of VdcGroup.
type VdcGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VdcGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VdcGroup is the Schema for the VdcGroups API. Provides a VDC group resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type VdcGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.participatingVdcIds) || (has(self.initProvider) && has(self.initProvider.participatingVdcIds))",message="spec.forProvider.participatingVdcIds is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.startingVdcId) || (has(self.initProvider) && has(self.initProvider.startingVdcId))",message="spec.forProvider.startingVdcId is a required parameter"
	Spec   VdcGroupSpec   `json:"spec"`
	Status VdcGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VdcGroupList contains a list of VdcGroups
type VdcGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VdcGroup `json:"items"`
}

// Repository type metadata.
var (
	VdcGroup_Kind             = "VdcGroup"
	VdcGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VdcGroup_Kind}.String()
	VdcGroup_KindAPIVersion   = VdcGroup_Kind + "." + CRDGroupVersion.String()
	VdcGroup_GroupVersionKind = CRDGroupVersion.WithKind(VdcGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&VdcGroup{}, &VdcGroupList{})
}
