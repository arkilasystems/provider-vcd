// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DHCPV4ConfigInitParameters struct {

	// Gateway IP address to use for the client
	// IPv4 gateway address
	GatewayIPAddress *string `json:"gatewayIpAddress,omitempty" tf:"gateway_ip_address,omitempty"`

	// Hostname to be set for client
	// Hostname for the DHCP client
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`
}

type DHCPV4ConfigObservation struct {

	// Gateway IP address to use for the client
	// IPv4 gateway address
	GatewayIPAddress *string `json:"gatewayIpAddress,omitempty" tf:"gateway_ip_address,omitempty"`

	// Hostname to be set for client
	// Hostname for the DHCP client
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`
}

type DHCPV4ConfigParameters struct {

	// Gateway IP address to use for the client
	// IPv4 gateway address
	// +kubebuilder:validation:Optional
	GatewayIPAddress *string `json:"gatewayIpAddress,omitempty" tf:"gateway_ip_address,omitempty"`

	// Hostname to be set for client
	// Hostname for the DHCP client
	// +kubebuilder:validation:Optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`
}

type DHCPV6ConfigInitParameters struct {

	// A set of domain names
	// Set of domain names
	// +listType=set
	DomainNames []*string `json:"domainNames,omitempty" tf:"domain_names,omitempty"`

	// A set of SNTP servers
	// Set of SNTP servers
	// +listType=set
	SntpServers []*string `json:"sntpServers,omitempty" tf:"sntp_servers,omitempty"`
}

type DHCPV6ConfigObservation struct {

	// A set of domain names
	// Set of domain names
	// +listType=set
	DomainNames []*string `json:"domainNames,omitempty" tf:"domain_names,omitempty"`

	// A set of SNTP servers
	// Set of SNTP servers
	// +listType=set
	SntpServers []*string `json:"sntpServers,omitempty" tf:"sntp_servers,omitempty"`
}

type DHCPV6ConfigParameters struct {

	// A set of domain names
	// Set of domain names
	// +kubebuilder:validation:Optional
	// +listType=set
	DomainNames []*string `json:"domainNames,omitempty" tf:"domain_names,omitempty"`

	// A set of SNTP servers
	// Set of SNTP servers
	// +kubebuilder:validation:Optional
	// +listType=set
	SntpServers []*string `json:"sntpServers,omitempty" tf:"sntp_servers,omitempty"`
}

type NsxtNetworkDhcpBindingInitParameters struct {

	// One of IPV4 or IPV6
	// Binding type 'IPV4' or 'IPV6'
	BindingType *string `json:"bindingType,omitempty" tf:"binding_type,omitempty"`

	// Additional configuration for IPv4 specific options. See IPv4 block
	// IPv4 specific DHCP Binding configuration
	DHCPV4Config []DHCPV4ConfigInitParameters `json:"dhcpV4Config,omitempty" tf:"dhcp_v4_config,omitempty"`

	// Additional configuration for IPv6 specific options. See IPv6 block
	// IPv6 specific DHCP Binding configuration
	DHCPV6Config []DHCPV6ConfigInitParameters `json:"dhcpV6Config,omitempty" tf:"dhcp_v6_config,omitempty"`

	// A list of DNS servers. Maximum 2 can be specified
	// The DNS server IPs to be assigned . 2 values maximum.
	DNSServers []*string `json:"dnsServers,omitempty" tf:"dns_servers,omitempty"`

	// Description of DHCP binding
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// IP address used for binding
	// IP address of the DHCP binding
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Lease time in seconds. Minimum 3600 seconds
	// Lease time in seconds. Minimum value is 60 seconds
	LeaseTime *float64 `json:"leaseTime,omitempty" tf:"lease_time,omitempty"`

	// MAC address used for binding
	// MAC address of the DHCP binding
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// Name of DHCP binding
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization. Optional if defined at provider level
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// The ID of an Org VDC network. Note  (.id field) of
	// vcd_network_isolated_v2, vcd_network_routed_v2 or vcd_nsxt_network_dhcp can be referenced
	// here. It is more convenient to use reference to vcd_nsxt_network_dhcp ID because it makes sure
	// that DHCP is enabled before configuring pools
	// Parent Org VDC network ID
	OrgNetworkID *string `json:"orgNetworkId,omitempty" tf:"org_network_id,omitempty"`
}

type NsxtNetworkDhcpBindingObservation struct {

	// One of IPV4 or IPV6
	// Binding type 'IPV4' or 'IPV6'
	BindingType *string `json:"bindingType,omitempty" tf:"binding_type,omitempty"`

	// Additional configuration for IPv4 specific options. See IPv4 block
	// IPv4 specific DHCP Binding configuration
	DHCPV4Config []DHCPV4ConfigObservation `json:"dhcpV4Config,omitempty" tf:"dhcp_v4_config,omitempty"`

	// Additional configuration for IPv6 specific options. See IPv6 block
	// IPv6 specific DHCP Binding configuration
	DHCPV6Config []DHCPV6ConfigObservation `json:"dhcpV6Config,omitempty" tf:"dhcp_v6_config,omitempty"`

	// A list of DNS servers. Maximum 2 can be specified
	// The DNS server IPs to be assigned . 2 values maximum.
	DNSServers []*string `json:"dnsServers,omitempty" tf:"dns_servers,omitempty"`

	// Description of DHCP binding
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP address used for binding
	// IP address of the DHCP binding
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Lease time in seconds. Minimum 3600 seconds
	// Lease time in seconds. Minimum value is 60 seconds
	LeaseTime *float64 `json:"leaseTime,omitempty" tf:"lease_time,omitempty"`

	// MAC address used for binding
	// MAC address of the DHCP binding
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// Name of DHCP binding
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization. Optional if defined at provider level
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// The ID of an Org VDC network. Note  (.id field) of
	// vcd_network_isolated_v2, vcd_network_routed_v2 or vcd_nsxt_network_dhcp can be referenced
	// here. It is more convenient to use reference to vcd_nsxt_network_dhcp ID because it makes sure
	// that DHCP is enabled before configuring pools
	// Parent Org VDC network ID
	OrgNetworkID *string `json:"orgNetworkId,omitempty" tf:"org_network_id,omitempty"`
}

type NsxtNetworkDhcpBindingParameters struct {

	// One of IPV4 or IPV6
	// Binding type 'IPV4' or 'IPV6'
	// +kubebuilder:validation:Optional
	BindingType *string `json:"bindingType,omitempty" tf:"binding_type,omitempty"`

	// Additional configuration for IPv4 specific options. See IPv4 block
	// IPv4 specific DHCP Binding configuration
	// +kubebuilder:validation:Optional
	DHCPV4Config []DHCPV4ConfigParameters `json:"dhcpV4Config,omitempty" tf:"dhcp_v4_config,omitempty"`

	// Additional configuration for IPv6 specific options. See IPv6 block
	// IPv6 specific DHCP Binding configuration
	// +kubebuilder:validation:Optional
	DHCPV6Config []DHCPV6ConfigParameters `json:"dhcpV6Config,omitempty" tf:"dhcp_v6_config,omitempty"`

	// A list of DNS servers. Maximum 2 can be specified
	// The DNS server IPs to be assigned . 2 values maximum.
	// +kubebuilder:validation:Optional
	DNSServers []*string `json:"dnsServers,omitempty" tf:"dns_servers,omitempty"`

	// Description of DHCP binding
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// IP address used for binding
	// IP address of the DHCP binding
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Lease time in seconds. Minimum 3600 seconds
	// Lease time in seconds. Minimum value is 60 seconds
	// +kubebuilder:validation:Optional
	LeaseTime *float64 `json:"leaseTime,omitempty" tf:"lease_time,omitempty"`

	// MAC address used for binding
	// MAC address of the DHCP binding
	// +kubebuilder:validation:Optional
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// Name of DHCP binding
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization. Optional if defined at provider level
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// The ID of an Org VDC network. Note  (.id field) of
	// vcd_network_isolated_v2, vcd_network_routed_v2 or vcd_nsxt_network_dhcp can be referenced
	// here. It is more convenient to use reference to vcd_nsxt_network_dhcp ID because it makes sure
	// that DHCP is enabled before configuring pools
	// Parent Org VDC network ID
	// +kubebuilder:validation:Optional
	OrgNetworkID *string `json:"orgNetworkId,omitempty" tf:"org_network_id,omitempty"`
}

// NsxtNetworkDhcpBindingSpec defines the desired state of NsxtNetworkDhcpBinding
type NsxtNetworkDhcpBindingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NsxtNetworkDhcpBindingParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NsxtNetworkDhcpBindingInitParameters `json:"initProvider,omitempty"`
}

// NsxtNetworkDhcpBindingStatus defines the observed state of NsxtNetworkDhcpBinding.
type NsxtNetworkDhcpBindingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NsxtNetworkDhcpBindingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NsxtNetworkDhcpBinding is the Schema for the NsxtNetworkDhcpBindings API. Provides a resource to manage NSX-T Org VDC network DHCP bindings.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type NsxtNetworkDhcpBinding struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.bindingType) || (has(self.initProvider) && has(self.initProvider.bindingType))",message="spec.forProvider.bindingType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ipAddress) || (has(self.initProvider) && has(self.initProvider.ipAddress))",message="spec.forProvider.ipAddress is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.leaseTime) || (has(self.initProvider) && has(self.initProvider.leaseTime))",message="spec.forProvider.leaseTime is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.macAddress) || (has(self.initProvider) && has(self.initProvider.macAddress))",message="spec.forProvider.macAddress is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.orgNetworkId) || (has(self.initProvider) && has(self.initProvider.orgNetworkId))",message="spec.forProvider.orgNetworkId is a required parameter"
	Spec   NsxtNetworkDhcpBindingSpec   `json:"spec"`
	Status NsxtNetworkDhcpBindingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtNetworkDhcpBindingList contains a list of NsxtNetworkDhcpBindings
type NsxtNetworkDhcpBindingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NsxtNetworkDhcpBinding `json:"items"`
}

// Repository type metadata.
var (
	NsxtNetworkDhcpBinding_Kind             = "NsxtNetworkDhcpBinding"
	NsxtNetworkDhcpBinding_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NsxtNetworkDhcpBinding_Kind}.String()
	NsxtNetworkDhcpBinding_KindAPIVersion   = NsxtNetworkDhcpBinding_Kind + "." + CRDGroupVersion.String()
	NsxtNetworkDhcpBinding_GroupVersionKind = CRDGroupVersion.WithKind(NsxtNetworkDhcpBinding_Kind)
)

func init() {
	SchemeBuilder.Register(&NsxtNetworkDhcpBinding{}, &NsxtNetworkDhcpBindingList{})
}
