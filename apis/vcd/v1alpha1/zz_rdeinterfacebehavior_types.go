// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RdeInterfaceBehaviorInitParameters struct {

	// Useful to update execution properties marked with _secure_ and _internal_
	// as these are not retrievable from VCD, so they are not saved in state. Setting this to true will make the provider
	// to ask for updates whenever there is a secure property in the execution of the Behavior
	// Useful to update execution properties marked with _secure_ and _internal_,as these are not retrievable from VCD, so they are not saved in state. Setting this to 'true' will make the Providerto ask for updates whenever there is a secure property in the execution of the Behavior
	AlwaysUpdateSecureExecutionProperties *bool `json:"alwaysUpdateSecureExecutionProperties,omitempty" tf:"always_update_secure_execution_properties,omitempty"`

	// A description specifying the contract of the Behavior
	// A description specifying the contract of the Behavior
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A map that specifies the Behavior execution mechanism, this is just a simplification of execution_json that
	// can make the configuration more readable for simpler Behaviors. One of execution_json or execution must be set.
	// Execution map of the Behavior
	// +mapType=granular
	Execution map[string]*string `json:"execution,omitempty" tf:"execution,omitempty"`

	// A string representing a valid JSON that specifies the Behavior execution mechanism.
	// You can find more information about the different execution types, like WebHook, noop, Activity, MQTT, VRO, AWSLambdaFaaS
	// and others in the Extensibility SDK documentation.
	// One of execution_json or execution must be set.
	// Execution of the Behavior in JSON format, that allows to define complex Behavior executions
	ExecutionJSON *string `json:"executionJson,omitempty" tf:"execution_json,omitempty"`

	// Name of the Behavior
	// Name of the Behavior
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the RDE Interface that owns the Behavior
	// The ID of the RDE Interface that owns the Behavior
	RdeInterfaceID *string `json:"rdeInterfaceId,omitempty" tf:"rde_interface_id,omitempty"`
}

type RdeInterfaceBehaviorObservation struct {

	// Useful to update execution properties marked with _secure_ and _internal_
	// as these are not retrievable from VCD, so they are not saved in state. Setting this to true will make the provider
	// to ask for updates whenever there is a secure property in the execution of the Behavior
	// Useful to update execution properties marked with _secure_ and _internal_,as these are not retrievable from VCD, so they are not saved in state. Setting this to 'true' will make the Providerto ask for updates whenever there is a secure property in the execution of the Behavior
	AlwaysUpdateSecureExecutionProperties *bool `json:"alwaysUpdateSecureExecutionProperties,omitempty" tf:"always_update_secure_execution_properties,omitempty"`

	// A description specifying the contract of the Behavior
	// A description specifying the contract of the Behavior
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A map that specifies the Behavior execution mechanism, this is just a simplification of execution_json that
	// can make the configuration more readable for simpler Behaviors. One of execution_json or execution must be set.
	// Execution map of the Behavior
	// +mapType=granular
	Execution map[string]*string `json:"execution,omitempty" tf:"execution,omitempty"`

	// A string representing a valid JSON that specifies the Behavior execution mechanism.
	// You can find more information about the different execution types, like WebHook, noop, Activity, MQTT, VRO, AWSLambdaFaaS
	// and others in the Extensibility SDK documentation.
	// One of execution_json or execution must be set.
	// Execution of the Behavior in JSON format, that allows to define complex Behavior executions
	ExecutionJSON *string `json:"executionJson,omitempty" tf:"execution_json,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of the Behavior
	// Name of the Behavior
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the RDE Interface that owns the Behavior
	// The ID of the RDE Interface that owns the Behavior
	RdeInterfaceID *string `json:"rdeInterfaceId,omitempty" tf:"rde_interface_id,omitempty"`

	// The Behavior invocation reference to be used for polymorphic behavior invocations
	// The Behavior invocation reference to be used for polymorphic behavior invocations
	Ref *string `json:"ref,omitempty" tf:"ref,omitempty"`
}

type RdeInterfaceBehaviorParameters struct {

	// Useful to update execution properties marked with _secure_ and _internal_
	// as these are not retrievable from VCD, so they are not saved in state. Setting this to true will make the provider
	// to ask for updates whenever there is a secure property in the execution of the Behavior
	// Useful to update execution properties marked with _secure_ and _internal_,as these are not retrievable from VCD, so they are not saved in state. Setting this to 'true' will make the Providerto ask for updates whenever there is a secure property in the execution of the Behavior
	// +kubebuilder:validation:Optional
	AlwaysUpdateSecureExecutionProperties *bool `json:"alwaysUpdateSecureExecutionProperties,omitempty" tf:"always_update_secure_execution_properties,omitempty"`

	// A description specifying the contract of the Behavior
	// A description specifying the contract of the Behavior
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A map that specifies the Behavior execution mechanism, this is just a simplification of execution_json that
	// can make the configuration more readable for simpler Behaviors. One of execution_json or execution must be set.
	// Execution map of the Behavior
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Execution map[string]*string `json:"execution,omitempty" tf:"execution,omitempty"`

	// A string representing a valid JSON that specifies the Behavior execution mechanism.
	// You can find more information about the different execution types, like WebHook, noop, Activity, MQTT, VRO, AWSLambdaFaaS
	// and others in the Extensibility SDK documentation.
	// One of execution_json or execution must be set.
	// Execution of the Behavior in JSON format, that allows to define complex Behavior executions
	// +kubebuilder:validation:Optional
	ExecutionJSON *string `json:"executionJson,omitempty" tf:"execution_json,omitempty"`

	// Name of the Behavior
	// Name of the Behavior
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the RDE Interface that owns the Behavior
	// The ID of the RDE Interface that owns the Behavior
	// +kubebuilder:validation:Optional
	RdeInterfaceID *string `json:"rdeInterfaceId,omitempty" tf:"rde_interface_id,omitempty"`
}

// RdeInterfaceBehaviorSpec defines the desired state of RdeInterfaceBehavior
type RdeInterfaceBehaviorSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RdeInterfaceBehaviorParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RdeInterfaceBehaviorInitParameters `json:"initProvider,omitempty"`
}

// RdeInterfaceBehaviorStatus defines the observed state of RdeInterfaceBehavior.
type RdeInterfaceBehaviorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RdeInterfaceBehaviorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RdeInterfaceBehavior is the Schema for the RdeInterfaceBehaviors API. Provides the capability of managing RDE Interface Behaviors in VMware Cloud Director.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type RdeInterfaceBehavior struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rdeInterfaceId) || (has(self.initProvider) && has(self.initProvider.rdeInterfaceId))",message="spec.forProvider.rdeInterfaceId is a required parameter"
	Spec   RdeInterfaceBehaviorSpec   `json:"spec"`
	Status RdeInterfaceBehaviorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RdeInterfaceBehaviorList contains a list of RdeInterfaceBehaviors
type RdeInterfaceBehaviorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RdeInterfaceBehavior `json:"items"`
}

// Repository type metadata.
var (
	RdeInterfaceBehavior_Kind             = "RdeInterfaceBehavior"
	RdeInterfaceBehavior_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RdeInterfaceBehavior_Kind}.String()
	RdeInterfaceBehavior_KindAPIVersion   = RdeInterfaceBehavior_Kind + "." + CRDGroupVersion.String()
	RdeInterfaceBehavior_GroupVersionKind = CRDGroupVersion.WithKind(RdeInterfaceBehavior_Kind)
)

func init() {
	SchemeBuilder.Register(&RdeInterfaceBehavior{}, &RdeInterfaceBehaviorList{})
}
