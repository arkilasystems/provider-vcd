// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CatalogItemInitParameters struct {

	// The name of the catalog where to upload OVA file
	// catalog name where upload the OVA file
	Catalog *string `json:"catalog,omitempty" tf:"catalog,omitempty"`

	// (Deprecated; v3.7+) Use metadata_entry instead.  Key value map of metadata to assign to the Catalog Item
	// Key and value pairs for catalog item metadata
	// +mapType=granular
	CatalogItemMetadata map[string]*string `json:"catalogItemMetadata,omitempty" tf:"catalog_item_metadata,omitempty"`

	// Description of item
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Key value map of metadata to assign to the associated vApp Template
	// Key and value pairs for the metadata of the vApp template associated to this catalog item
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// A set of metadata entries to assign to the Catalog Item. See Metadata section for details.
	// Metadata entries for the given Catalog Item
	MetadataEntry []CatalogItemMetadataEntryInitParameters `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// Item name in catalog
	// catalog item name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Absolute or relative path to file to upload
	// Absolute or relative path to OVA
	OvaPath *string `json:"ovaPath,omitempty" tf:"ova_path,omitempty"`

	// URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
	// URL of OVF file
	OvfURL *string `json:"ovfUrl,omitempty" tf:"ovf_url,omitempty"`

	// - Default false. Allows seeing upload progress. (See note below)
	// shows upload progress in stdout
	ShowUploadProgress *bool `json:"showUploadProgress,omitempty" tf:"show_upload_progress,omitempty"`

	// - Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.
	// size of upload file piece size in mega bytes
	UploadPieceSize *float64 `json:"uploadPieceSize,omitempty" tf:"upload_piece_size,omitempty"`
}

type CatalogItemMetadataEntryInitParameters struct {

	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.
	// Domain for this metadata entry. true, if it belongs to SYSTEM. false, if it belongs to GENERAL
	IsSystem *bool `json:"isSystem,omitempty" tf:"is_system,omitempty"`

	// Key of this metadata entry.
	// Key of this metadata entry. Required if the metadata entry is not empty
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.
	// Type of this metadata entry. One of: 'MetadataStringValue', 'MetadataNumberValue', 'MetadataBooleanValue', 'MetadataDateTimeValue'
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).
	// User access level for this metadata entry. One of: 'READWRITE', 'READONLY', 'PRIVATE'
	UserAccess *string `json:"userAccess,omitempty" tf:"user_access,omitempty"`

	// Value of this metadata entry.
	// Value of this metadata entry. Required if the metadata entry is not empty
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CatalogItemMetadataEntryObservation struct {

	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.
	// Domain for this metadata entry. true, if it belongs to SYSTEM. false, if it belongs to GENERAL
	IsSystem *bool `json:"isSystem,omitempty" tf:"is_system,omitempty"`

	// Key of this metadata entry.
	// Key of this metadata entry. Required if the metadata entry is not empty
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.
	// Type of this metadata entry. One of: 'MetadataStringValue', 'MetadataNumberValue', 'MetadataBooleanValue', 'MetadataDateTimeValue'
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).
	// User access level for this metadata entry. One of: 'READWRITE', 'READONLY', 'PRIVATE'
	UserAccess *string `json:"userAccess,omitempty" tf:"user_access,omitempty"`

	// Value of this metadata entry.
	// Value of this metadata entry. Required if the metadata entry is not empty
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CatalogItemMetadataEntryParameters struct {

	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.
	// Domain for this metadata entry. true, if it belongs to SYSTEM. false, if it belongs to GENERAL
	// +kubebuilder:validation:Optional
	IsSystem *bool `json:"isSystem,omitempty" tf:"is_system,omitempty"`

	// Key of this metadata entry.
	// Key of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.
	// Type of this metadata entry. One of: 'MetadataStringValue', 'MetadataNumberValue', 'MetadataBooleanValue', 'MetadataDateTimeValue'
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).
	// User access level for this metadata entry. One of: 'READWRITE', 'READONLY', 'PRIVATE'
	// +kubebuilder:validation:Optional
	UserAccess *string `json:"userAccess,omitempty" tf:"user_access,omitempty"`

	// Value of this metadata entry.
	// Value of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CatalogItemObservation struct {

	// The name of the catalog where to upload OVA file
	// catalog name where upload the OVA file
	Catalog *string `json:"catalog,omitempty" tf:"catalog,omitempty"`

	// (Deprecated; v3.7+) Use metadata_entry instead.  Key value map of metadata to assign to the Catalog Item
	// Key and value pairs for catalog item metadata
	// +mapType=granular
	CatalogItemMetadata map[string]*string `json:"catalogItemMetadata,omitempty" tf:"catalog_item_metadata,omitempty"`

	// Time stamp of when the item was created
	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	// Description of item
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Key value map of metadata to assign to the associated vApp Template
	// Key and value pairs for the metadata of the vApp template associated to this catalog item
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// A set of metadata entries to assign to the Catalog Item. See Metadata section for details.
	// Metadata entries for the given Catalog Item
	MetadataEntry []CatalogItemMetadataEntryObservation `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// Item name in catalog
	// catalog item name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Absolute or relative path to file to upload
	// Absolute or relative path to OVA
	OvaPath *string `json:"ovaPath,omitempty" tf:"ova_path,omitempty"`

	// URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
	// URL of OVF file
	OvfURL *string `json:"ovfUrl,omitempty" tf:"ovf_url,omitempty"`

	// - Default false. Allows seeing upload progress. (See note below)
	// shows upload progress in stdout
	ShowUploadProgress *bool `json:"showUploadProgress,omitempty" tf:"show_upload_progress,omitempty"`

	// - Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.
	// size of upload file piece size in mega bytes
	UploadPieceSize *float64 `json:"uploadPieceSize,omitempty" tf:"upload_piece_size,omitempty"`
}

type CatalogItemParameters struct {

	// The name of the catalog where to upload OVA file
	// catalog name where upload the OVA file
	// +kubebuilder:validation:Optional
	Catalog *string `json:"catalog,omitempty" tf:"catalog,omitempty"`

	// (Deprecated; v3.7+) Use metadata_entry instead.  Key value map of metadata to assign to the Catalog Item
	// Key and value pairs for catalog item metadata
	// +kubebuilder:validation:Optional
	// +mapType=granular
	CatalogItemMetadata map[string]*string `json:"catalogItemMetadata,omitempty" tf:"catalog_item_metadata,omitempty"`

	// Description of item
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Key value map of metadata to assign to the associated vApp Template
	// Key and value pairs for the metadata of the vApp template associated to this catalog item
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// A set of metadata entries to assign to the Catalog Item. See Metadata section for details.
	// Metadata entries for the given Catalog Item
	// +kubebuilder:validation:Optional
	MetadataEntry []CatalogItemMetadataEntryParameters `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// Item name in catalog
	// catalog item name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Absolute or relative path to file to upload
	// Absolute or relative path to OVA
	// +kubebuilder:validation:Optional
	OvaPath *string `json:"ovaPath,omitempty" tf:"ova_path,omitempty"`

	// URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
	// URL of OVF file
	// +kubebuilder:validation:Optional
	OvfURL *string `json:"ovfUrl,omitempty" tf:"ovf_url,omitempty"`

	// - Default false. Allows seeing upload progress. (See note below)
	// shows upload progress in stdout
	// +kubebuilder:validation:Optional
	ShowUploadProgress *bool `json:"showUploadProgress,omitempty" tf:"show_upload_progress,omitempty"`

	// - Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.
	// size of upload file piece size in mega bytes
	// +kubebuilder:validation:Optional
	UploadPieceSize *float64 `json:"uploadPieceSize,omitempty" tf:"upload_piece_size,omitempty"`
}

// CatalogItemSpec defines the desired state of CatalogItem
type CatalogItemSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CatalogItemParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CatalogItemInitParameters `json:"initProvider,omitempty"`
}

// CatalogItemStatus defines the observed state of CatalogItem.
type CatalogItemStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CatalogItemObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CatalogItem is the Schema for the CatalogItems API. Provides a VMware Cloud Director catalog item resource. This can be used to upload and delete OVA file inside a catalog.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type CatalogItem struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.catalog) || (has(self.initProvider) && has(self.initProvider.catalog))",message="spec.forProvider.catalog is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   CatalogItemSpec   `json:"spec"`
	Status CatalogItemStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CatalogItemList contains a list of CatalogItems
type CatalogItemList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CatalogItem `json:"items"`
}

// Repository type metadata.
var (
	CatalogItem_Kind             = "CatalogItem"
	CatalogItem_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CatalogItem_Kind}.String()
	CatalogItem_KindAPIVersion   = CatalogItem_Kind + "." + CRDGroupVersion.String()
	CatalogItem_GroupVersionKind = CRDGroupVersion.WithKind(CatalogItem_Kind)
)

func init() {
	SchemeBuilder.Register(&CatalogItem{}, &CatalogItemList{})
}
