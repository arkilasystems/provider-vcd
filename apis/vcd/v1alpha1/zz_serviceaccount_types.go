// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceAccountInitParameters struct {

	// Status of the Service Account. Can be set to false and back to true if
	// the access token was lost to get a new one.
	// Status of the service account.
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// If set to false, will output a warning about the service account file
	// containing sensitive information.
	// Set this to true if you understand the security risks of using API token files and would like to suppress the warnings
	AllowTokenFile *bool `json:"allowTokenFile,omitempty" tf:"allow_token_file,omitempty"`

	// Required only when active is set to true. Contains the access token
	// that can be used for authenticating to VCD.
	// Name of the file that the API token will be saved to
	FileName *string `json:"fileName,omitempty" tf:"file_name,omitempty"`

	// A unique name for the Service Account in an organisation.
	// Name of service account
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Role ID of service account
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// UUID of the Service Account.
	// Any valid UUID, depends on the user, e.g: 12345678-1234-5678-90ab-1234567890ab
	SoftwareID *string `json:"softwareId,omitempty" tf:"software_id,omitempty"`

	// Version of the service using the Service Account
	// Version of software using the service account, can be freely defined by the user
	SoftwareVersion *string `json:"softwareVersion,omitempty" tf:"software_version,omitempty"`

	// URI of the service using the Service Account
	// URI of the client using the service account, can be freely defined by the user
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

type ServiceAccountObservation struct {

	// Status of the Service Account. Can be set to false and back to true if
	// the access token was lost to get a new one.
	// Status of the service account.
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// If set to false, will output a warning about the service account file
	// containing sensitive information.
	// Set this to true if you understand the security risks of using API token files and would like to suppress the warnings
	AllowTokenFile *bool `json:"allowTokenFile,omitempty" tf:"allow_token_file,omitempty"`

	// Required only when active is set to true. Contains the access token
	// that can be used for authenticating to VCD.
	// Name of the file that the API token will be saved to
	FileName *string `json:"fileName,omitempty" tf:"file_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A unique name for the Service Account in an organisation.
	// Name of service account
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Role ID of service account
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// UUID of the Service Account.
	// Any valid UUID, depends on the user, e.g: 12345678-1234-5678-90ab-1234567890ab
	SoftwareID *string `json:"softwareId,omitempty" tf:"software_id,omitempty"`

	// Version of the service using the Service Account
	// Version of software using the service account, can be freely defined by the user
	SoftwareVersion *string `json:"softwareVersion,omitempty" tf:"software_version,omitempty"`

	// URI of the service using the Service Account
	// URI of the client using the service account, can be freely defined by the user
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

type ServiceAccountParameters struct {

	// Status of the Service Account. Can be set to false and back to true if
	// the access token was lost to get a new one.
	// Status of the service account.
	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// If set to false, will output a warning about the service account file
	// containing sensitive information.
	// Set this to true if you understand the security risks of using API token files and would like to suppress the warnings
	// +kubebuilder:validation:Optional
	AllowTokenFile *bool `json:"allowTokenFile,omitempty" tf:"allow_token_file,omitempty"`

	// Required only when active is set to true. Contains the access token
	// that can be used for authenticating to VCD.
	// Name of the file that the API token will be saved to
	// +kubebuilder:validation:Optional
	FileName *string `json:"fileName,omitempty" tf:"file_name,omitempty"`

	// A unique name for the Service Account in an organisation.
	// Name of service account
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Role ID of service account
	// +kubebuilder:validation:Optional
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// UUID of the Service Account.
	// Any valid UUID, depends on the user, e.g: 12345678-1234-5678-90ab-1234567890ab
	// +kubebuilder:validation:Optional
	SoftwareID *string `json:"softwareId,omitempty" tf:"software_id,omitempty"`

	// Version of the service using the Service Account
	// Version of software using the service account, can be freely defined by the user
	// +kubebuilder:validation:Optional
	SoftwareVersion *string `json:"softwareVersion,omitempty" tf:"software_version,omitempty"`

	// URI of the service using the Service Account
	// URI of the client using the service account, can be freely defined by the user
	// +kubebuilder:validation:Optional
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

// ServiceAccountSpec defines the desired state of ServiceAccount
type ServiceAccountSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceAccountParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServiceAccountInitParameters `json:"initProvider,omitempty"`
}

// ServiceAccountStatus defines the observed state of ServiceAccount.
type ServiceAccountStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceAccountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ServiceAccount is the Schema for the ServiceAccounts API. Provides a resource to manage Service Accounts. Service Accounts can have defined roles and act just like a VCD user. Service Accounts, when activated, provide one-time use access tokens for authentication to the VCD API, during which a new access token is generated.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type ServiceAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.roleId) || (has(self.initProvider) && has(self.initProvider.roleId))",message="spec.forProvider.roleId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.softwareId) || (has(self.initProvider) && has(self.initProvider.softwareId))",message="spec.forProvider.softwareId is a required parameter"
	Spec   ServiceAccountSpec   `json:"spec"`
	Status ServiceAccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceAccountList contains a list of ServiceAccounts
type ServiceAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceAccount `json:"items"`
}

// Repository type metadata.
var (
	ServiceAccount_Kind             = "ServiceAccount"
	ServiceAccount_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceAccount_Kind}.String()
	ServiceAccount_KindAPIVersion   = ServiceAccount_Kind + "." + CRDGroupVersion.String()
	ServiceAccount_GroupVersionKind = CRDGroupVersion.WithKind(ServiceAccount_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceAccount{}, &ServiceAccountList{})
}
