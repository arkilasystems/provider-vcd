name: vmware/vcd
resources:
    vcd_api_filter:
        subCategory: ""
        description: Provides a resource to manage API Filters in VMware Cloud Director. An API Filter allows to extend VCD API with customised URLs that can be redirected to an External Endpoint.
        name: vcd_api_filter
        title: vcd_api_filter
        examples:
            - name: af
              manifest: |-
                {
                  "external_endpoint_id": "${vcd_external_endpoint.external_endpoint1.id}",
                  "url_matcher_pattern": "/custom/.*",
                  "url_matcher_scope": "EXT_API"
                }
              references:
                external_endpoint_id: vcd_external_endpoint.external_endpoint1.id
              dependencies:
                vcd_external_endpoint.external_endpoint1: |-
                    {
                      "description": "A simple external endpoint example",
                      "enabled": true,
                      "name": "my-endpoint",
                      "root_url": "https://www.vmware.com",
                      "vendor": "vmware",
                      "version": "1.0.0"
                    }
        argumentDocs:
            external_endpoint_id: '- (Required) ID of the External Endpoint where this API Filter will process the requests to'
            url_matcher_pattern: |-
                - (Required) Request URL pattern, written as a regular expression. This argument cannot exceed 1024 characters.
                In most cases, it should end with .* (it is like a suffix) which specifies that all the parts of the URL coming after (like parameters) will be redirected to an external endpoint.
                It is important to note that in the case of url_matcher_scope=EXT_UI_TENANT, the tenant name is not part of the pattern, it will match the request after the tenant name - if request
                is "/ext-ui/tenant/testOrg/custom/test", the pattern will match against /custom/test
            url_matcher_scope: |-
                - (Required) Allowed values are EXT_API, EXT_UI_PROVIDER, EXT_UI_TENANT corresponding to
                /ext-api, /ext-ui/provider, /ext-ui/tenant/
        importStatements: []
    vcd_api_token:
        subCategory: ""
        description: Provides a resource to manage API tokens. API tokens are an easy way to authenticate to VCD. They are user-based and have the same role as the user.
        name: vcd_api_token
        title: vcd_api_token
        examples:
            - name: example_token
              manifest: |-
                {
                  "allow_token_file": true,
                  "file_name": "example_token.json",
                  "name": "example_token"
                }
        argumentDocs:
            allow_token_file: |-
                - (Required) An additional check that the user is aware that the file contains
                SENSITIVE information. Must be set to true or it will return a validation error.
            file_name: '- (Required) The name of the file which will be created containing the API token'
            name: '- (Required) The unique name of the API token for a specific user.'
        importStatements: []
    vcd_catalog:
        subCategory: ""
        description: Provides a VMware Cloud Director catalog resource. This can be used to create and delete a catalog.
        name: vcd_catalog
        title: vcd_catalog
        examples:
            - name: myNewCatalog
              manifest: |-
                {
                  "delete_force": true,
                  "delete_recursive": true,
                  "description": "catalog for files",
                  "name": "my-catalog",
                  "org": "my-org"
                }
            - name: myNewCatalog
              manifest: |-
                {
                  "delete_force": true,
                  "delete_recursive": true,
                  "description": "catalog for files",
                  "name": "my-catalog",
                  "org": "my-org",
                  "storage_profile_id": "${data.vcd_storage_profile.sp1.id}"
                }
              references:
                storage_profile_id: data.vcd_storage_profile.sp1.id
            - name: example
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "is_system": true,
                      "key": "foo",
                      "type": "MetadataStringValue",
                      "user_access": "PRIVATE",
                      "value": "bar"
                    },
                    {
                      "is_system": false,
                      "key": "myBool",
                      "type": "MetadataBooleanValue",
                      "user_access": "READWRITE",
                      "value": "true"
                    }
                  ]
                }
            - name: my-catalog
              manifest: |-
                {
                  "delete_force": true,
                  "delete_recursive": true,
                  "name": "my-catalog",
                  "org": "my-org"
                }
        argumentDocs:
            cache_enabled: '- (Optional, v3.6+) Enable early catalog export to optimize synchronization. Default is false. It is recommended to set it to true when publishing the catalog.'
            catalog_version: '- (v3.6+) Version number from this catalog.'
            created: '- (v3.6+) Date and time of catalog creation'
            delete_force: '- (Optional, but recommended) When destroying use delete_force=true with delete_recursive=true to remove a catalog and any objects it contains, regardless of their state. Default is false'
            delete_recursive: '- (Optional, but recommended) When destroying use delete_recursive=true to remove the catalog and any objects it contains that are in a state that normally allows removal. Default is false'
            description: '- (Optional) Description of catalog'
            is_local: '- (v3.8.1+) Indicates if this catalog was created in the current organization.'
            is_published: '- (v3.6+) Indicates if this catalog is shared to all organizations.'
            is_shared: '- (v3.6+) Indicates if the catalog is shared.'
            is_system: '- (Required) Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            key: '- (Required) Key of this metadata entry.'
            media_item_list: (v3.8+) List of media item names in this catalog, in alphabetical order.
            metadata: '- (Deprecated; v3.6+) Use metadata_entry instead. Key value map of metadata to assign.'
            metadata_entry: '- (Optional; v3.8+) A set of metadata entries to assign. See Metadata section for details.'
            name: '- (Required) Catalog name'
            number_of_media: '- (v3.6+) Number of media items available in this catalog.'
            number_of_vapp_templates: '- (v3.6+) Number of vApp templates available in this catalog.'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations.
                When using a catalog shared from another organization, this field must have the name of that one, not the current one.
                If you don't know the name of the sharing org, and put the current one, an error message will list the possible names.
            owner_name: '- (v3.6+) Owner of the catalog.'
            password: '- (Optional, v3.6+) An optional password to access the catalog. Only ASCII characters are allowed in a valid password.'
            preserve_identity_information: '- (Optional, v3.6+) Enable include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the portability of the package, and you should use it only when necessary. Default is false.'
            publish_enabled: '- (Optional, v3.6+) Enable allows to publish a catalog externally to make its vApp templates and media files available for subscription by organizations outside the Cloud Director installation. Default is false.'
            publish_subscription_type: '- (v3.6+) Shows if the catalog is PUBLISHED, if it is a subscription from another one (SUBSCRIBED), or none of those (UNPUBLISHED).'
            publish_subscription_url: '- (v3.8+) URL to which other catalogs can subscribe.'
            storage_profile_id: |-
                - (Optional, v3.1+) Allows to set specific storage profile to be used for catalog. Note. Data
                source vcd_storage_profile can help to lookup storage profile ID.
            type: '- (Required) Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.'
            user_access: '- (Required) User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            value: '- (Required) Value of this metadata entry.'
            vapp_template_list: (v3.8+) List of vApp template names in this catalog, in alphabetical order.
        importStatements: []
    vcd_catalog_access_control:
        subCategory: ""
        description: Provides a VMware Cloud Director Access Control structure for a Catalog.
        name: vcd_catalog_access_control
        title: vcd_catalog_access_control
        examples:
            - name: AC-not-shared
              manifest: |-
                {
                  "catalog_id": "${data.vcd_catalog.Catalog-AC-0.id}",
                  "shared_with_everyone": false
                }
              references:
                catalog_id: data.vcd_catalog.Catalog-AC-0.id
            - name: AC-global
              manifest: |-
                {
                  "catalog_id": "${data.vcd_catalog.Catalog-AC-1.id}",
                  "everyone_access_level": "ReadOnly",
                  "shared_with_everyone": true
                }
              references:
                catalog_id: data.vcd_catalog.Catalog-AC-1.id
            - name: AC-users-and-orgs
              manifest: |-
                {
                  "catalog_id": "${data.vcd_catalog.Catalog-AC-2.id}",
                  "shared_with": [
                    {
                      "access_level": "FullControl",
                      "user_id": "${data.vcd_org_user.ac-admin1.id}"
                    },
                    {
                      "access_level": "Change",
                      "user_id": "${data.vcd_org_user.ac-vapp-creator2.id}"
                    },
                    {
                      "access_level": "ReadOnly",
                      "org_id": "${data.vcd_org.another-org.id}"
                    }
                  ],
                  "shared_with_everyone": false
                }
              references:
                catalog_id: data.vcd_catalog.Catalog-AC-2.id
                shared_with.org_id: data.vcd_org.another-org.id
                shared_with.user_id: data.vcd_org_user.ac-vapp-creator2.id
            - name: ac-other-orgs
              manifest: |-
                {
                  "catalog_id": "${vcd_catalog.Test-Catalog-AC-5.id}",
                  "org": "datacloud",
                  "read_only_shared_with_all_orgs": true,
                  "shared_with_everyone": false
                }
              references:
                catalog_id: vcd_catalog.Test-Catalog-AC-5.id
            - name: my-ac
              manifest: |-
                {
                  "catalog_id": "${data.vcd_catalog.my-cat.id}",
                  "org": "my-org"
                }
              references:
                catalog_id: data.vcd_catalog.my-cat.id
        argumentDocs:
            catalog_id: '- (Required) A unique identifier for the Catalog.'
            everyone_access_level: |-
                - (Optional) Access level when the Catalog is shared with everyone (it can only be set to
                ReadOnly). Required if shared_with_everyone is set.
            org: '- (Optional) The name of organization to which the Catalog belongs. Optional if defined at provider level.'
            read_only_shared_with_all_orgs: '- (Optional; v3.11+) If true, the catalog is shared as read-only with all organizations.'
            shared_with: |-
                - (Optional) one or more blocks defining a subject (one of Organization, User, or Group) to which we are sharing.
                See shared_with below for detail. It cannot be used if shared_with_everyone is true.
            shared_with.access_level: |-
                - (Required) The access level for the user or group to which we are sharing. (One of ReadOnly,
                Change, FullControl, but it can only be ReadOnly when we share to an Organization)
            shared_with.group_id: '- (Optional) The ID of a group with which we are sharing. Required if user_id or org_id is not set.'
            shared_with.org_id: '- (Optional) The ID of a group with which we are sharing. Required if user_id or group_id is not set.'
            shared_with.subject_name: '- (Computed) the name of the subject (Org, group, or user) with which we are sharing.'
            shared_with.user_id: '- (Optional) The ID of a user with which we are sharing. Required if group_id or org_id is not set.'
            shared_with_everyone: |-
                - (Required) Whether the Catalog is shared with everyone. If any shared_with blocks are included,
                this property must be set to false.
        importStatements: []
    vcd_catalog_item:
        subCategory: ""
        description: Provides a VMware Cloud Director catalog item resource. This can be used to upload and delete OVA file inside a catalog.
        name: vcd_catalog_item
        title: vcd_catalog_item
        examples:
            - name: myNewCatalogItem
              manifest: |-
                {
                  "catalog": "my-catalog",
                  "description": "new vapp template",
                  "metadata_entry": [
                    {
                      "key": "license",
                      "value": "public"
                    },
                    {
                      "key": "version",
                      "value": "v1"
                    }
                  ],
                  "name": "my ova",
                  "org": "my-org",
                  "ova_path": "/home/user/file.ova",
                  "upload_piece_size": 10
                }
            - name: example
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "is_system": true,
                      "key": "foo",
                      "type": "MetadataStringValue",
                      "user_access": "PRIVATE",
                      "value": "bar"
                    },
                    {
                      "is_system": false,
                      "key": "myBool",
                      "type": "MetadataBooleanValue",
                      "user_access": "READWRITE",
                      "value": "true"
                    }
                  ]
                }
            - name: my-item
              manifest: |-
                {
                  "catalog": "my-catalog",
                  "name": "my-item",
                  "org": "my-org",
                  "ova_path": "guess"
                }
        argumentDocs:
            catalog: '- (Required) The name of the catalog where to upload OVA file'
            catalog_item_metadata: '- (Deprecated; v3.7+) Use metadata_entry instead.  Key value map of metadata to assign to the Catalog Item'
            description: '- (Optional) Description of item'
            is_system: '- (Required) Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            key: '- (Required) Key of this metadata entry.'
            metadata: '- (Optional; v2.5+) Key value map of metadata to assign to the associated vApp Template'
            metadata_entry: '- (Optional; v3.8+) A set of metadata entries to assign to the Catalog Item. See Metadata section for details.'
            name: '- (Required) Item name in catalog'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            ova_path: '- (Optional) Absolute or relative path to file to upload'
            ovf_url: '- (Optional; v3.6+) URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL'
            show_upload_progress: '- (Optional) - Default false. Allows seeing upload progress. (See note below)'
            type: '- (Required) Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.'
            upload_piece_size: '- (Optional) - Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.'
            user_access: '- (Required) User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            value: '- (Required) Value of this metadata entry.'
        importStatements: []
    vcd_catalog_media:
        subCategory: ""
        description: Provides a VMware Cloud Director media resource. This can be used to upload and delete media (ISO) file inside a catalog.
        name: vcd_catalog_media
        title: vcd_catalog_media
        examples:
            - name: myNewMedia
              manifest: |-
                {
                  "catalog_id": "${data.vcd_catalog.my-catalog.id}",
                  "description": "new os versions",
                  "media_path": "/home/user/file.iso",
                  "metadata_entry": [
                    {
                      "key": "license",
                      "value": "public"
                    },
                    {
                      "key": "version",
                      "value": "v1"
                    }
                  ],
                  "name": "my iso",
                  "org": "my-org",
                  "upload_piece_size": 10
                }
              references:
                catalog_id: data.vcd_catalog.my-catalog.id
            - name: example
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "is_system": true,
                      "key": "foo",
                      "type": "MetadataStringValue",
                      "user_access": "PRIVATE",
                      "value": "bar"
                    },
                    {
                      "is_system": false,
                      "key": "myBool",
                      "type": "MetadataBooleanValue",
                      "user_access": "READWRITE",
                      "value": "true"
                    }
                  ]
                }
            - name: tf-mymedia
              manifest: |-
                {
                  "catalog": "my-catalog",
                  "name": "my-media",
                  "org": "my-org"
                }
        argumentDocs:
            catalog: '- (Optional; Deprecated) The name of the catalog where to upload media file. It''s mandatory if catalog_id is not used.'
            catalog_id: '- (Optional; v3.8.2+) The ID of the catalog where to upload media file. It''s mandatory if catalog field is not used.'
            creation_date: '- (Computed) returns creation date'
            description: '- (Optional) - Description of media file'
            is_iso: '- (Computed) returns True if this media file is ISO'
            is_published: '- (Computed) returns True if this media file is in a published catalog'
            is_system: '- (Required) Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            key: '- (Required) Key of this metadata entry.'
            media_path: '- (Required) - Absolute or relative path to file to upload'
            metadata: '- (Deprecated; v2.5+) Use metadata_entry instead. Key value map of metadata to assign'
            metadata_entry: '- (Optional; v3.8+) A set of metadata entries to assign. See Metadata section for details.'
            name: '- (Required) Media file name in catalog'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            owner_name: '- (Computed) returns owner name'
            show_upload_progress: '- (Optional) - Default false. Allows to see upload progress. (See note below)'
            size: '- (Computed) returns media storage in Bytes'
            status: '- (Computed) returns media status'
            storage_profile_name: '- (Computed) returns storage profile name'
            type: '- (Required) Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.'
            upload_any_file: '- (Optional; v3.11+) - If true, allows uploading any file type. With the default false, we can only upload .ISO files.'
            upload_piece_size: '- (Optional) - size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.'
            user_access: '- (Required) User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            value: '- (Required) Value of this metadata entry.'
        importStatements: []
    vcd_catalog_vapp_template:
        subCategory: ""
        description: Provides a VMware Cloud Director vApp Template resource. This can be used to upload and delete OVA files inside a catalog.
        name: vcd_catalog_vapp_template
        title: vcd_catalog_vapp_template
        examples:
            - name: myNewVappTemplate
              manifest: |-
                {
                  "catalog_id": "${data.vcd_catalog.my-catalog.id}",
                  "description": "new vapp template",
                  "lease": [
                    {
                      "storage_lease_in_sec": "${60 * 60 * 24 * 7}"
                    }
                  ],
                  "metadata_entry": [
                    {
                      "is_system": false,
                      "key": "license",
                      "type": "MetadataStringValue",
                      "user_access": "READWRITE",
                      "value": "public"
                    },
                    {
                      "is_system": false,
                      "key": "version",
                      "type": "MetadataStringValue",
                      "user_access": "READWRITE",
                      "value": "v1"
                    }
                  ],
                  "name": "my ova",
                  "org": "my-org",
                  "ova_path": "/home/user/file.ova",
                  "upload_piece_size": 10
                }
              references:
                catalog_id: data.vcd_catalog.my-catalog.id
            - name: from-vapp
              manifest: |-
                {
                  "capture_vapp": [
                    {
                      "customize_on_instantiate": false,
                      "source_id": "${vcd_vapp.web.id}"
                    }
                  ],
                  "catalog_id": "${data.vcd_catalog.cat.id}",
                  "depends_on": [
                    "${vcd_vapp_vm.emptyVM}"
                  ],
                  "lease": [
                    {
                      "storage_lease_in_sec": "${3600 * 24 * 3}"
                    }
                  ],
                  "metadata": {
                    "vapp_template_metadata": "vApp Template Metadata"
                  },
                  "name": "from-vapp",
                  "org": "v51"
                }
              references:
                capture_vapp.source_id: vcd_vapp.web.id
                catalog_id: data.vcd_catalog.cat.id
            - name: from-standalone-vm
              manifest: |-
                {
                  "capture_vapp": [
                    {
                      "customize_on_instantiate": true,
                      "source_id": "${vcd_vm.standalone.vapp_id}"
                    }
                  ],
                  "catalog_id": "${data.vcd_catalog.cat.id}",
                  "name": "captured-vApp",
                  "org": "v51"
                }
              references:
                capture_vapp.source_id: vcd_vm.standalone.vapp_id
                catalog_id: data.vcd_catalog.cat.id
            - name: example
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "is_system": true,
                      "key": "foo",
                      "type": "MetadataStringValue",
                      "user_access": "PRIVATE",
                      "value": "bar"
                    },
                    {
                      "is_system": false,
                      "key": "myBool",
                      "type": "MetadataBooleanValue",
                      "user_access": "READWRITE",
                      "value": "true"
                    }
                  ]
                }
            - name: my-vapp-template
              manifest: |-
                {
                  "catalog_id": "${data.vcd_catalog.my-catalog.id}",
                  "name": "my-vapp-template",
                  "org": "my-org",
                  "ova_path": "guess"
                }
              references:
                catalog_id: data.vcd_catalog.my-catalog.id
        argumentDocs:
            capture_vapp: |-
                - (Optional; v3.12+) A configuration block to create template from existing
                vApp (Standalone VM or vApp)
            catalog_id: '- (Required) ID of the Catalog where to upload the OVA file'
            catalog_item_id: '- Catalog Item ID'
            created: '- Timestamp of when the vApp Template was created'
            customize_on_instantiate: |-
                - (Optional) Default false - means "Make identical copy". true
                means "Customize VM settings". Note true can only be set when source vApp is powered off
            description: '- (Optional) Description of the vApp Template. Not to be used with ovf_url when target OVA has a description'
            is_system: '- (Required) Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            key: '- (Required) Key of this metadata entry.'
            lease: |-
                - (Optional v3.11+) The information about the vApp Template lease. It includes the field below. When this section is
                included, the field is mandatory. If lease value is higher than the one allowed for the whole Org, we get an error
            metadata: '-  (Deprecated) Use metadata_entry instead. Key/value map of metadata to assign to the associated vApp Template'
            metadata_entry: '- (Optional; v3.8+) A set of metadata entries to assign. See Metadata section for details.'
            name: '- (Required) vApp Template name in Catalog'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            ova_path: '- (Optional) Absolute or relative path to file to upload'
            overwrite_catalog_item_id: |-
                - (Optional) Optionally newly created template can overwrite. It can
                either be id of vcd_catalog_item resource or catalog_item_id of
                vcd_catalog_vapp_template resource
            ovf_url: '- (Optional) URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL'
            source_id: |-
                - (Required) Source vApp ID (can be referenced by vcd_vapp.id or
                vcd_vm.vapp_id/vcd_vapp_vm.vapp_id)
            storage_lease_in_sec: '- How long the vApp Template is available before being automatically deleted or marked as expired. 0 means never expires (or maximum allowed by parent Org). Regular values accepted from 3600+.'
            type: '- (Required) Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.'
            upload_piece_size: '- (Optional) - Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB'
            user_access: '- (Required) User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            value: '- (Required) Value of this metadata entry.'
            vdc_id: '- The VDC ID to which this vApp Template belongs'
            vm_names: '- Set of VM names within the vApp template'
        importStatements: []
    vcd_cloned_vapp:
        subCategory: ""
        description: Provides a VMware Cloud Director Cloned vApp resource. This can be used to create vApps from either a vApp template or another vApp.
        name: vcd_cloned_vapp
        title: vcd_cloned_vapp
        examples:
            - name: vapp_from_template
              manifest: |-
                {
                  "description": "vApp from template",
                  "name": "VappFromTemplate",
                  "power_on": true,
                  "source_id": "${data.vcd_catalog_vapp_template.tmpl.id}",
                  "source_type": "template"
                }
              references:
                source_id: data.vcd_catalog_vapp_template.tmpl.id
            - name: vapp_from_vapp
              manifest: |-
                {
                  "delete_source": false,
                  "description": "vApp from vApp",
                  "name": "VappFromVapp",
                  "power_on": true,
                  "source_id": "${data.vcd_vapp.source_vapp.id}",
                  "source_type": "vapp"
                }
              references:
                source_id: data.vcd_vapp.source_vapp.id
        argumentDocs:
            delete_source: |-
                - (Optional) A boolean value of true or false stating if the source entity should be deleted after creation.
                A source vApp can only be deleted if it is fully powered off.
            delete_source = true: |-
                , and it is in
                fact a copy followed by a deletion.
            description: (Optional) An optional description for the vApp, up to 256 characters.
            href: '- (Computed) The vApp Hyper Reference.'
            name: '- (Required) A unique name for the vApp'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            power_on: '- (Optional) A boolean value stating if this vApp should be powered on. Default is false.'
            source_id: '- (Required) The ID of the source to use.'
            source_type: '- (Required) The type of the source to use: one of template or vapp.'
            status: '- (Computed) The vApp status as a numeric code.'
            status_text: '- (Computed) The vApp status as text.'
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level'
            vm_list: '- (Computed) The list of VM names included in this vApp, in alphabetic order.'
        importStatements: []
    vcd_cse_kubernetes_cluster:
        subCategory: ""
        description: Provides a resource to manage Kubernetes clusters in VMware Cloud Director with Container Service Extension installed and running.
        name: vcd_cse_kubernetes_cluster
        title: vcd_cse_kubernetes_cluster
        examples:
            - name: my_cluster
              manifest: |-
                {
                  "api_token_file": "${vcd_api_token.token.file_name}",
                  "auto_repair_on_errors": true,
                  "control_plane": [
                    {
                      "disk_size_gi": 20,
                      "machine_count": 1,
                      "sizing_policy_id": "${data.vcd_vm_sizing_policy.tkg_small.id}",
                      "storage_profile_id": "${data.vcd_storage_profile.sp.id}"
                    }
                  ],
                  "cse_version": "4.2.1",
                  "default_storage_class": [
                    {
                      "filesystem": "ext4",
                      "name": "sc-1",
                      "reclaim_policy": "delete",
                      "storage_profile_id": "${data.vcd_storage_profile.sp.id}"
                    }
                  ],
                  "kubernetes_template_id": "${data.vcd_catalog_vapp_template.tkg_ova.id}",
                  "name": "test2",
                  "network_id": "${data.vcd_network_routed_v2.routed.id}",
                  "node_health_check": true,
                  "operations_timeout_minutes": 0,
                  "org": "${data.vcd_org_vdc.vdc.org}",
                  "runtime": "tkg",
                  "vdc_id": "${data.vcd_org_vdc.vdc.id}",
                  "worker_pool": [
                    {
                      "disk_size_gi": 20,
                      "machine_count": 1,
                      "name": "node-pool-1",
                      "sizing_policy_id": "${data.vcd_vm_sizing_policy.tkg_small.id}",
                      "storage_profile_id": "${data.vcd_storage_profile.sp.id}"
                    }
                  ]
                }
              references:
                api_token_file: vcd_api_token.token.file_name
                control_plane.sizing_policy_id: data.vcd_vm_sizing_policy.tkg_small.id
                control_plane.storage_profile_id: data.vcd_storage_profile.sp.id
                default_storage_class.storage_profile_id: data.vcd_storage_profile.sp.id
                kubernetes_template_id: data.vcd_catalog_vapp_template.tkg_ova.id
                network_id: data.vcd_network_routed_v2.routed.id
                org: data.vcd_org_vdc.vdc.org
                vdc_id: data.vcd_org_vdc.vdc.id
                worker_pool.sizing_policy_id: data.vcd_vm_sizing_policy.tkg_small.id
                worker_pool.storage_profile_id: data.vcd_storage_profile.sp.id
              dependencies:
                vcd_api_token.token: |-
                    {
                      "allow_token_file": true,
                      "file_name": "/home/Bob/safely_stored_token.json",
                      "name": "myClusterToken"
                    }
            - name: my_cluster
              manifest: |-
                {
                  "control_plane": [
                    {}
                  ],
                  "name": "test",
                  "worker_pool": [
                    {
                      "autoscaler_max_replicas": 10,
                      "autoscaler_min_replicas": 2,
                      "disk_size_gi": 20,
                      "name": "node-pool-1",
                      "sizing_policy_id": "${data.vcd_vm_sizing_policy.tkg_small.id}",
                      "storage_profile_id": "${data.vcd_storage_profile.sp.id}"
                    },
                    {
                      "disk_size_gi": 20,
                      "machine_count": 1,
                      "name": "node-pool-1",
                      "sizing_policy_id": "${data.vcd_vm_sizing_policy.tkg_small.id}",
                      "storage_profile_id": "${data.vcd_storage_profile.sp.id}"
                    }
                  ]
                }
              references:
                worker_pool.sizing_policy_id: data.vcd_vm_sizing_policy.tkg_small.id
                worker_pool.storage_profile_id: data.vcd_storage_profile.sp.id
            - name: imported_cluster
              manifest: |-
                {
                  "control_plane": [
                    {
                      "machine_count": 5,
                      "sizing_policy_id": "${data.vcd_vm_sizing_policy.tkg_small.id}",
                      "storage_profile_id": "${data.vcd_storage_profile.sp.id}"
                    }
                  ],
                  "cse_version": "4.2.1",
                  "default_storage_class": [
                    {
                      "filesystem": "ext4",
                      "name": "sc-1",
                      "reclaim_policy": "delete",
                      "storage_profile_id": "${data.vcd_storage_profile.sp.id}"
                    }
                  ],
                  "kubernetes_template_id": "${data.vcd_catalog_vapp_template.tkg_ova.id}",
                  "name": "test2",
                  "network_id": "${data.vcd_network_routed_v2.routed.id}",
                  "node_health_check": true,
                  "vdc_id": "${data.vcd_org_vdc.vdc.id}",
                  "worker_pool": [
                    {
                      "machine_count": 40,
                      "name": "node-pool-1",
                      "sizing_policy_id": "${data.vcd_vm_sizing_policy.tkg_small.id}",
                      "storage_profile_id": "${data.vcd_storage_profile.sp.id}"
                    }
                  ]
                }
              references:
                control_plane.sizing_policy_id: data.vcd_vm_sizing_policy.tkg_small.id
                control_plane.storage_profile_id: data.vcd_storage_profile.sp.id
                default_storage_class.storage_profile_id: data.vcd_storage_profile.sp.id
                kubernetes_template_id: data.vcd_catalog_vapp_template.tkg_ova.id
                network_id: data.vcd_network_routed_v2.routed.id
                vdc_id: data.vcd_org_vdc.vdc.id
                worker_pool.sizing_policy_id: data.vcd_vm_sizing_policy.tkg_small.id
                worker_pool.storage_profile_id: data.vcd_storage_profile.sp.id
        argumentDocs:
            api_token_file: |-
                - (Required) Must be a file generated by vcd_api_token resource,
                or a file that follows the same formatting, that stores the API token used to create and manage the cluster,
                owned by the user specified in owner. Be careful about this file, as it contains sensitive information
            auto_repair_on_errors: |-
                - (Optional) If errors occur before the Kubernetes cluster becomes available, and this argument is true,
                CSE Server will automatically attempt to repair the cluster. Defaults to false.
                Since CSE 4.1.1, when the cluster is available/provisioned, this flag is set automatically to false.
            autoscaler_max_replicas: |-
                - (Optional; v3.13+) Together with autoscaler_min_replicas, and only when , defines the maximum number of nodes that
                the Kubernetes Autoscaler will deploy for this worker pool. Read the section below for details.
            autoscaler_min_replicas: |-
                - (Optional; v3.13+) Together with autoscaler_max_replicas, and only when , defines the minimum number of nodes that
                the Kubernetes Autoscaler will deploy for this worker pool. Read the section below for details.
            capvcd_version: '- The version of CAPVCD used by this cluster'
            cluster_resource_set_bindings: '- The cluster resource set bindings of this cluster'
            control_plane: '- (Required) See Control Plane'
            cpi_version: '- The version of the Cloud Provider Interface used by this cluster'
            cse_version: '- (Required) Specifies the CSE version to use. Accepted versions: 4.1.0, 4.1.1 (also for 4.1.1a), 4.2.0 and 4.2.1'
            csi_version: '- The version of the Container Storage Interface used by this cluster'
            default_storage_class: '- (Optional) See Default Storage Class'
            details: '- Details of the event'
            disk_size_gi: '- (Optional) Disk size, in Gibibytes (Gi), for the control plane VMs. Must be at least 20. Defaults to 20'
            events: '- A set of events that happened during the Kubernetes cluster lifecycle. They''re ordered from most recent to least. Each event has:'
            filesystem: '- (Required) Filesystem of the storage class, can be either ext4 or xfs'
            ip: '- (Optional) IP for the control plane. It will be automatically assigned during cluster creation if left empty'
            kubeconfig: '- The ready-to-use Kubeconfig file contents as a raw string. Only available when state=provisioned'
            kubernetes_template_id: '- (Required) The ID of the vApp Template that corresponds to a Kubernetes template OVA'
            kubernetes_version: '- The version of Kubernetes installed in this cluster'
            machine_count: '- (Optional) The number of nodes that the control plane has. Must be an odd number and higher than 0. Defaults to 3'
            machine_count=0: (or unset)
            name: |-
                - (Required) The name of the Kubernetes cluster. It must contain only lowercase alphanumeric characters or "-",
                start with an alphabetic character, end with an alphanumeric, and contain at most 31 characters
            network_id: '- (Required) The ID of the network that the Kubernetes cluster will use'
            node_health_check: |-
                - (Optional) After the Kubernetes cluster becomes available, nodes that become unhealthy will be
                remediated according to unhealthy node conditions and remediation rules. Defaults to false
            occurred_at: '- When the event happened'
            operations_timeout_minutes: |-
                - (Optional) The time, in minutes, to wait for the cluster operations to be successfully completed.
                For example, during cluster creation, it should be in provisioned state before the timeout is reached, otherwise the
                operation will return an error. For cluster deletion, this timeout specifies the time to wait until the cluster is completely deleted.
                Setting this argument to 0 means to wait indefinitely (not recommended as it could hang Terraform if the cluster can't be created
                due to a configuration error if auto_repair_on_errors=true). Defaults to 60
            org: '- (Optional) The name of organization that will host the Kubernetes cluster, optional if defined in the provider configuration'
            owner: |-
                - (Optional) The user that creates the cluster and owns the API token specified in api_token.
                It must have the Kubernetes Cluster Author role that was created during CSE installation.
                If not specified, it assumes it's the user from the provider configuration
            placement_policy_id: '- (Optional) VM Placement policy for the control plane VMs'
            pods_cidr: '- (Optional) A CIDR block for the pods to use. Defaults to 100.96.0.0/11'
            reclaim_policy: |-
                - (Required) A value of delete deletes the volume when the PersistentVolumeClaim is deleted. retain does not,
                and the volume can be manually reclaimed
            resource_id: '- ID of the resource that caused the event'
            runtime: '- (Optional) Specifies the Kubernetes runtime to use. Defaults to tkg (Tanzu Kubernetes Grid)'
            services_cidr: '- (Optional) A CIDR block for the services to use. Defaults to 100.64.0.0/13'
            sizing_policy_id: '- (Optional) VM Sizing policy for the control plane VMs. Must be one of the ones made available during CSE installation'
            ssh_public_key: '- (Optional) The SSH public key used to log in into the cluster nodes'
            state: |-
                - The Kubernetes cluster status, can be provisioning when it is being created, provisioned when it was successfully
                created and ready to use, or error when an error occurred. provisioning can only be obtained when a timeout happens during
                cluster creation. error can only be obtained either with a timeout or when auto_repair_on_errors=false.
            storage_profile_id: '- (Optional) Storage profile for the control plane VMs'
            supported_upgrades: |-
                - A set of vApp Template names that can be fetched with a
                vcd_catalog_vapp_template data source to upgrade the cluster.
            tkg_product_version: '- The version of TKG installed in this cluster'
            type: '- Type of the event, either event or error'
            vdc_id: '- (Required) The ID of the VDC that hosts the Kubernetes cluster'
            vgpu_policy_id: '- (Optional) vGPU policy for the worker pool VMs. If this one is set, placement_policy_id must be empty'
            virtual_ip_subnet: '- (Optional) A virtual IP subnet for the cluster'
            worker_pool: '- (Required) See Worker Pools'
            worker_pool.Deployment: ', this is the Autoscaler deployment definition'
            worker_pool.ServiceAccount: ', a ClusterRole, a Role and a ClusterRoleBinding'
        importStatements:
            - terraform output -raw kubeconfig > $HOME/kubeconfig
    vcd_dse_registry_configuration:
        subCategory: ""
        description: Provides a resource to manage Data Solution Extension (DSE) registry configuration.
        name: vcd_dse_registry_configuration
        title: vcd_dse_registry_configuration
        examples:
            - name: mongodb-community
              manifest: |-
                {
                  "chart_repository": "https://mongodb.github.io/helm-charts",
                  "depends_on": [
                    "${vcd_solution_add_on_instance_publish.public}"
                  ],
                  "name": "MongoDB Community",
                  "package_name": "community-operator",
                  "version": "0.9.0"
                }
            - name: mysql
              manifest: |-
                {
                  "depends_on": [
                    "${vcd_solution_add_on_instance_publish.public}"
                  ],
                  "name": "VMware SQL with MySQL",
                  "package_repository": "registry.tanzu.vmware.com/packages-for-vmware-tanzu-data-services/tds-packages:1.13.0",
                  "version": "1.10.1"
                }
            - name: dso
              manifest: |-
                {
                  "container_registry": [
                    {
                      "description": "host2",
                      "host": "first-host.sample",
                      "password": "pass1",
                      "username": "user1"
                    },
                    {
                      "description": "Test Host that does not work",
                      "host": "another-host.sample",
                      "password": "pass2",
                      "username": "user2"
                    }
                  ],
                  "depends_on": [
                    "${vcd_solution_add_on_instance_publish.public}"
                  ],
                  "name": "VCD Data Solutions",
                  "use_default_values": true
                }
        argumentDocs:
            chart_repository: '- (Optional) Chart repository for Helm based images'
            compatible_version_constraints: '- A set of version constrains that this Data Solution defines'
            container_registry: |-
                - (Optional) Only applies to VCD Data Solutions configuration. Specifies
                credentials that can be used to authenticate to repositories. See Container Registry
                Configuration
            default_chart_repository: '- Default chart repository as provided by Data Solution'
            default_package_name: '- Default package name as provided by Data Solution'
            default_repository: '- Default container repository as provided by Data Solution'
            default_version: '- Default package version as provided by Data Solution'
            description: '- (Required) Description of container registry entry'
            host: '- (Required) Host of container registry'
            name: '- (Required) The name of Data Solution as it appears in repository configuration'
            package_name: '- (Optional) Helm package name. Only for Helm based images'
            package_repository: '- (Optional) Package repository for container based images'
            password: '- (Required) Password for authentication'
            rde_state: '- State of parent Runtime Defined Entity (RDE)'
            requires_version_compatibility: '- Boolean flag as defined in Data Solution'
            type: '- Type of repository settings. It can be one of PackageRepository, ChartRepository'
            use_default_values: |-
                - (Optional) Defines if repository settings should be inherited from Data
                Solution itself. Default false
            username: '- (Required) Username for authentication'
            version: '- (Optional) Version of package to use. Required when use_default_values is not used.'
        importStatements: []
    vcd_dse_solution_publish:
        subCategory: ""
        description: Provides a resource to manage Data Solution Extension (DSE) publishing settings.
        name: vcd_dse_solution_publish
        title: vcd_dse_solution_publish
        examples:
            - name: mongodb-community
              manifest: |-
                {
                  "data_solution_id": "${data.vcd_dse_registry_configuration.mongodb-community.id}",
                  "org_id": "${data.vcd_org.tenant-org.id}"
                }
              references:
                data_solution_id: data.vcd_dse_registry_configuration.mongodb-community.id
                org_id: data.vcd_org.tenant-org.id
            - name: confluent-platform
              manifest: |-
                {
                  "confluent_license_key": "XXXXXXXXXX",
                  "confluent_license_type": "With License",
                  "data_solution_id": "${data.vcd_dse_registry_configuration.confluent-platform.id}",
                  "org_id": "${data.vcd_org.tenant-org.id}"
                }
              references:
                data_solution_id: data.vcd_dse_registry_configuration.confluent-platform.id
                org_id: data.vcd_org.tenant-org.id
        argumentDocs:
            confluent_license_key: |-
                - (Optional) Required for Confluent Platform Data Solution if . One of
                confluent_license_type is set to With License.
            confluent_license_type: |-
                - (Optional) Required for Confluent Platform Data Solution. One of
                With License, No License.
            data_solution_id: '- (Required) ID of Data Solution'
            ds_org_config_id: |-
                - Data Solution Org Configuration ID (only available for Confluent Platform
                which has additional licensing configuration)
            dso_acl_id: '- Data Solutions Operator ACL ID'
            org_id: '- (Required) Organization ID'
            template_acl_ids: '- A set of Data Solution Instance Template ACL IDs'
        importStatements: []
    vcd_edgegateway:
        subCategory: ""
        description: Provides a VMware Cloud Director NSX-V edge gateway. This can be used to create and delete edge gateways connected to one or more external networks.
        name: vcd_edgegateway
        title: vcd_edgegateway
        examples:
            - name: egw
              manifest: |-
                {
                  "configuration": "compact",
                  "description": "new edge gateway",
                  "external_network": [
                    {
                      "name": "my-ext-net1",
                      "subnet": [
                        {
                          "gateway": "192.168.30.49",
                          "ip_address": "192.168.30.51",
                          "netmask": "255.255.255.240",
                          "use_for_default_route": true
                        }
                      ]
                    }
                  ],
                  "name": "my-egw",
                  "org": "my-org",
                  "vdc": "my-vdc"
                }
              dependencies:
                vcd_network_routed.rnet1: |-
                    {
                      "edge_gateway": "${vcd_edgegateway.egw.name}",
                      "gateway": "192.168.2.1",
                      "name": "rnet1",
                      "org": "my-org",
                      "static_ip_pool": [
                        {
                          "end_address": "192.168.2.100",
                          "start_address": "192.168.2.2"
                        }
                      ],
                      "vdc": "my-vdc"
                    }
            - name: egw
              manifest: |-
                {
                  "configuration": "compact",
                  "description": "new edge gateway",
                  "external_network": [
                    {
                      "name": "my-main-external-network",
                      "subnet": [
                        {
                          "gateway": "192.168.30.49",
                          "ip_address": "192.168.30.51",
                          "netmask": "255.255.255.240",
                          "suballocate_pool": [
                            {
                              "end_address": "192.168.30.55",
                              "start_address": "192.168.30.53"
                            },
                            {
                              "end_address": "192.168.30.60",
                              "start_address": "192.168.30.58"
                            }
                          ]
                        },
                        {
                          "gateway": "192.168.40.149",
                          "netmask": "255.255.255.0",
                          "use_for_default_route": true
                        }
                      ]
                    },
                    {
                      "name": "my-other-external-network",
                      "subnet": [
                        {
                          "gateway": "1.1.1.1",
                          "netmask": "255.255.255.248"
                        }
                      ]
                    }
                  ],
                  "name": "edge-with-complex-networks",
                  "org": "my-org",
                  "vdc": "my-vdc"
                }
            - name: tf-edgegateway
              manifest: |-
                {
                  "configuration": "COMPUTE",
                  "external_network": [
                    {
                      "name": "my-ext-net1",
                      "subnet": [
                        {
                          "gateway": "192.168.30.49",
                          "ip_address": "192.168.30.51",
                          "netmask": "255.255.255.240",
                          "use_for_default_route": true
                        }
                      ]
                    }
                  ],
                  "name": "my-edge-gw",
                  "org": "my-org",
                  "vdc": "my-vdc"
                }
        argumentDocs:
            Provider.import_separator: or variable VCD_IMPORT_SEPARATOR
            configuration: '- (Required) Configuration of the vShield edge VM for this gateway. One of: compact, full ("Large"), x-large, full4 ("Quad Large").'
            default_external_network_ip: (v2.6+) - IP address of edge gateway used for default network
            distributed_routing: |-
                - (Optional) If advanced networking enabled, also enable distributed
                routing. Default is false.
            enable_rate_limit: |-
                (Optional) - True if rate limiting should be applied on this interface.
                Default is false.
            end_address: (Required) - End IP address of a range
            external_network: |-
                - (Required, v2.6+) One or more blocks defining external networks, their
                subnets, IP addresses and  IP pool suballocation attached to edge gateway interfaces. Details are
                in external network block below.
            external_network_ips: |-
                (v2.6+) - A list of IP addresses assigned to edge gateway interfaces
                connected to external networks.
            fips_mode_enabled: |-
                - (Optional) When FIPS mode is enabled, any secure communication to or from
                the NSX Edge uses cryptographic algorithms or protocols that are allowed by United States Federal
                Information Processing Standards (FIPS). FIPS mode turns on the cipher suites that comply with
                FIPS. Default is false. Note: to use FIPS mode it must be enabled in vCD system settings.
            fw_default_rule_action: |-
                (Optional) Default firewall rule (last in the processing order) action.
                One of accept or deny. Default deny.
            fw_default_rule_logging_enabled: |-
                (Optional) Enable default firewall rule (last in the processing
                order) logging. Default false.
            fw_enabled: |-
                (Optional) Enable firewall. Default true. Note: Disabling Firewall will also
                disable NAT and other NAT dependent features like Load Balancer.
            gateway: (Required) - Gateway for a subnet in external network
            ha_enabled: '- (Optional) Enable high availability on this edge gateway. Default is false.'
            incoming_rate_limit: (Optional) - Incoming rate limit in Mbps.
            ip_address: |-
                (Optional) - IP address to assign to edge gateway interface (will be auto-assigned if
                unspecified)
            lb_acceleration_enabled: |-
                - (Optional) Enable to configure the load balancer to use the faster L4
                engine rather than L7 engine. The L4 TCP VIP is processed before the edge gateway firewall so no
                allow firewall rule is required. Default is false. Note: L7 VIPs for HTTP and HTTPS are
                processed after the firewall, so when Acceleration Enabled is not selected, an edge gateway firewall
                rule must exist to allow access to the L7 VIP for those protocols. When Acceleration Enabled is
                selected and the server pool is in non-transparent mode, an SNAT rule is added, so you must ensure
                that the firewall is enabled on the edge gateway.
            lb_enabled: '- (Optional) Enable load balancing. Default is false.'
            lb_logging_enabled: |-
                - (Optional) Enables the edge gateway load balancer to collect traffic logs.
                Default is false.
            lb_loglevel: |-
                - (Optional) Choose the severity of events to be logged. One of emergency,
                alert, critical, error, warning, notice, info, debug
            name: '- (Required) A unique name for the edge gateway.'
            netmask: (Required) - Netmask of a subnet in external network
            org: '- (Optional) The name of organization to which the VDC belongs. Optional if defined at provider level.'
            outgoing_rate_limit: (Optional) - Outgoing rate limit in Mbps.
            start_address: (Required) - Start IP address of a range
            suballocate_pool: |-
                (Optional) - One or more blocks of ip
                ranges in the subnet to be sub-allocated
            subnet: (Required) - One or more blocks of External Network Subnet.
            use_default_route_for_dns_relay: |-
                - (Optional) When default route is set, it will be used for
                gateways' default routing and DNS forwarding. Default is false.
            use_for_default_route: |-
                (Optional) - Should this network be used as default gateway on edge
                gateway. Default is false.
            vdc: '- (Optional) The name of VDC that owns the edge gateway. Optional if defined at provider level.'
        importStatements: []
    vcd_edgegateway_settings:
        subCategory: ""
        description: Provides a VMware Cloud Director edge gateway global settings. This can be used to update global edge gateways settings related to firewall and load balancing.
        name: vcd_edgegateway_settings
        title: vcd_edgegateway_settings
        examples:
            - name: egw-settings
              manifest: |-
                {
                  "edge_gateway_id": "${data.vcd_edgegateway.egw.id}",
                  "fw_default_rule_action": "accept",
                  "fw_default_rule_logging_enabled": true,
                  "fw_enabled": true,
                  "lb_acceleration_enabled": true,
                  "lb_enabled": true,
                  "lb_logging_enabled": true,
                  "lb_loglevel": "debug"
                }
              references:
                edge_gateway_id: data.vcd_edgegateway.egw.id
            - name: tf-egw
              manifest: |-
                {
                  "edge_gateway_name": "my-edge-gw"
                }
        argumentDocs:
            Provider.import_separator: or variable VCD_IMPORT_SEPARATOR
            edge_gateway_id: '- (Optional) The edge gateway ID. (Required if edge_gateway_name is not set)'
            edge_gateway_name: '- (Optional) A unique name for the edge gateway. (Required if edge_gateway_id is not set)'
            fw_default_rule_action: |-
                (Optional) Default firewall rule (last in the processing order) action.
                One of accept or deny. Default deny.
            fw_default_rule_logging_enabled: |-
                (Optional) Enable default firewall rule (last in the processing
                order) logging. Default false.
            fw_enabled: '- (Optional) Enable firewall. Default true.'
            lb_acceleration_enabled: '- (Optional) Enable to configure the load balancer.'
            lb_enabled: '- (Optional) Enable load balancing. Default is false.'
            lb_logging_enabled: |-
                - (Optional) Enables the edge gateway load balancer to collect traffic logs.
                Default is false. Note: only System administrators can change this property. It is ignored by API for Org users.
            lb_loglevel: |-
                - (Optional) Choose the severity of events to be logged. One of emergency,
                alert, critical, error, warning, notice, info, debug. Note: only System administrators can change this property. It is ignored by API for Org users.
            org: '- (Optional) The name of organization to which the VDC belongs. Optional if defined at provider level.'
            vdc: '- (Optional) The name of VDC that owns the edge gateway. Optional if defined at provider level.'
        importStatements: []
    vcd_edgegateway_vpn:
        subCategory: ""
        description: Provides a VMware Cloud Director IPsec VPN. This can be used to create, modify, and delete VPN settings and rules.
        name: vcd_edgegateway_vpn
        title: vcd_edgegateway_vpn
        examples:
            - name: vpn
              manifest: |-
                {
                  "description": "Description",
                  "edge_gateway": "Internet_01(nti0000bi2_123-456-2)",
                  "encryption_protocol": "AES256",
                  "local_id": "64.121.123.10",
                  "local_ip_address": "64.121.123.10",
                  "local_subnets": [
                    {
                      "local_subnet_gateway": "10.0.1.1",
                      "local_subnet_mask": "255.255.255.0",
                      "local_subnet_name": "DMZ_EAST"
                    },
                    {
                      "local_subnet_gateway": "10.0.22.1",
                      "local_subnet_mask": "255.255.255.0",
                      "local_subnet_name": "WEB_EAST"
                    }
                  ],
                  "mtu": 1400,
                  "name": "west-to-east",
                  "peer_id": "64.121.123.11",
                  "peer_ip_address": "64.121.123.11",
                  "peer_subnets": [
                    {
                      "peer_subnet_gateway": "10.0.10.1",
                      "peer_subnet_mask": "255.255.255.0",
                      "peer_subnet_name": "DMZ_WEST"
                    },
                    {
                      "peer_subnet_gateway": "10.0.20.1",
                      "peer_subnet_mask": "255.255.255.0",
                      "peer_subnet_name": "WEB_WEST"
                    }
                  ],
                  "shared_secret": "***********************"
                }
        argumentDocs:
            description: '- (Required) A description for the VPN'
            edge_gateway: '- (Required) The name of the edge gateway on which to apply the Firewall Rules'
            encryption_protocol: '- (Required) - E.g. AES256'
            local_id: '- (Required) - Local ID'
            local_ip_address: '- (Required) - Local IP Address'
            local_subnet_gateway: '- (Required) Gateway of the local subnet'
            local_subnet_mask: '- (Required) Subnet mask of the local subnet'
            local_subnet_name: '- (Required) Name of the local subnet'
            local_subnets: '- (Required) - List of Local Subnets see Local Subnets below for details.'
            mtu: '- (Required) - The MTU setting'
            name: '- (Required) The name of the VPN'
            org: '- (Optional; v2.0+) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            peer_id: '- (Required) - Peer ID'
            peer_ip_address: '- (Required) - Peer IP Address'
            peer_subnet_gateway: '- (Required) Gateway of the peer subnet'
            peer_subnet_mask: '- (Required) Subnet mask of the peer subnet'
            peer_subnet_name: '- (Required) Name of the peer subnet'
            peer_subnets: '- (Required) - List of Peer Subnets see Peer Subnets below for details.'
            shared_secret: '- (Required) - Shared Secret'
            vdc: '- (Optional; v2.0+) The name of VDC to use, optional if defined at provider level'
        importStatements: []
    vcd_external_endpoint:
        subCategory: ""
        description: Provides a resource to manage External Endpoints in VMware Cloud Director. An External Endpoint holds information for the HTTPS endpoint which requests will be proxied to when using an API Filter.
        name: vcd_external_endpoint
        title: vcd_external_endpoint
        examples:
            - name: external_endpoint1
              manifest: |-
                {
                  "description": "A simple external endpoint example",
                  "disable_on_removal": true,
                  "enabled": true,
                  "name": "my-endpoint",
                  "root_url": "https://www.vmware.com",
                  "vendor": "vmware",
                  "version": "1.0.0"
                }
        argumentDocs:
            description: '- (Optional) Description of the External Endpoint'
            disable_on_removal: |-
                - (Optional) Whether the External Endpoint should be disabled before a delete operation, to flawlessly remove it even if it is enabled.
                It is false by default
            enabled: |-
                - (Required) Whether the External Endpoint is enabled or not. Must be , otherwise deletion will fail.
                To disable it automatically on removal, set disable_on_removal=true (see below)
            "false": before removing this resource
            name: '- (Required) The name of the External Endpoint. The combination of vendor + name + version must be unique. Can''t be modified after creation'
            root_url: '- (Required) The endpoint which requests will be redirected to. Must use HTTPS protocol'
            vendor: '- (Required) The vendor name of the External Endpoint. The combination of vendor + name + version must be unique. Can''t be modified after creation'
            version: '- (Required) The version of the External Endpoint. The combination of vendor + name + version must be unique. Can''t be modified after creation'
        importStatements:
            - terraform import vcd_external_endpoint.ep1 vmware.my-endpoint.1.0.0
            - VCD_IMPORT_SEPARATOR='%' terraform import vcd_external_endpoint.ep1 vmware%my-endpoint%1.0.0
    vcd_external_network:
        subCategory: ""
        description: Provides a VMware Cloud Director external network resource.  This can be used to create and delete external networks.
        name: vcd_external_network
        title: vcd_external_network
        examples:
            - name: net
              manifest: |-
                {
                  "description": "Reference for vCD external network",
                  "ip_scope": [
                    {
                      "dns1": "192.168.0.164",
                      "dns2": "192.168.0.196",
                      "dns_suffix": "mybiz.biz",
                      "gateway": "192.168.30.49",
                      "netmask": "255.255.255.240",
                      "static_ip_pool": [
                        {
                          "end_address": "192.168.30.62",
                          "start_address": "192.168.30.51"
                        }
                      ]
                    },
                    {
                      "dns1": "192.168.1.164",
                      "dns2": "192.168.1.196",
                      "dns_suffix": "my.biz",
                      "gateway": "192.168.31.49",
                      "netmask": "255.255.255.240",
                      "static_ip_pool": [
                        {
                          "end_address": "192.168.31.55",
                          "start_address": "192.168.31.51"
                        },
                        {
                          "end_address": "192.168.31.59",
                          "start_address": "192.168.31.57"
                        }
                      ]
                    }
                  ],
                  "name": "my-ext-net",
                  "retain_net_info_across_deployments": false,
                  "vsphere_network": [
                    {
                      "name": "myNetwork",
                      "type": "DV_PORTGROUP",
                      "vcenter": "vcenter-name"
                    },
                    {
                      "name": "myNetwork2",
                      "type": "DV_PORTGROUP",
                      "vcenter": "vcenter-name2"
                    }
                  ]
                }
              dependencies:
                vcd_network_direct.net: |-
                    {
                      "external_network": "${vcd_external_network.net.name}",
                      "name": "my-net",
                      "org": "my-org",
                      "vdc": "my-vdc"
                    }
            - name: tf-external-network
              manifest: |-
                {
                  "name": "my-ext-net"
                }
        argumentDocs:
            description: '- (Optional) Network friendly description'
            dns_suffix: '- (Optional) A FQDN for the virtual machines on this network.'
            dns1: '- (Optional) Primary DNS server'
            dns2: '- (Optional) Secondary DNS server'
            end_address: '- (Required) End address of the IP range'
            gateway: '- (Required) Gateway of the network'
            ip_scope: '- (Required) A list of IP scopes for the network.  See IP Scope below for details.'
            name: '- (Required) A unique name for the network'
            netmask: '- (Required) Network mask'
            retain_net_info_across_deployments: '- (Optional) Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.'
            start_address: '- (Required) Start address of the IP range'
            static_ip_pool: '- (Required) IP ranges used for static pool allocation in the network.  See IP Pool below for details.'
            type: '- (Required) The vSphere type of the object. One of: DV_PORTGROUP (distributed virtual port group), NETWORK (standard switch port group)'
            vcenter: '- (Required) The vCenter server name'
            vsphere_network: '- (Required) A list of DV_PORTGROUP or NETWORK objects names that back this network. Each referenced DV_PORTGROUP or NETWORK must exist on a vCenter server registered with the system.  See vSphere Network below for details.'
        importStatements: []
    vcd_external_network_v2:
        subCategory: ""
        description: Provides a VMware Cloud Director External Network resource (version 2). New version of this resource uses new VCD API and is capable of creating NSX-T backed external networks as well as port group backed ones.
        name: vcd_external_network_v2
        title: vcd_external_network_v2
        examples:
            - name: ext-net-nsxt-t0
              manifest: |-
                {
                  "dedicated_org_id": "${data.vcd_org.org1.id}",
                  "description": "IP Space backed",
                  "name": "nsxt-external-network",
                  "nsxt_network": [
                    {
                      "nsxt_manager_id": "${data.vcd_nsxt_manager.main.id}",
                      "nsxt_tier0_router_id": "${data.vcd_nsxt_tier0_router.router.id}"
                    }
                  ],
                  "use_ip_spaces": true
                }
              references:
                dedicated_org_id: data.vcd_org.org1.id
                nsxt_network.nsxt_manager_id: data.vcd_nsxt_manager.main.id
                nsxt_network.nsxt_tier0_router_id: data.vcd_nsxt_tier0_router.router.id
            - name: ext-net-nsxt-t0
              manifest: |-
                {
                  "dedicated_org_id": "${data.vcd_org.org1.id}",
                  "description": "IP Space backed",
                  "name": "nsxt-external-network",
                  "nat_and_firewall_service_intention": "PROVIDER_AND_EDGE_GATEWAY",
                  "nsxt_network": [
                    {
                      "nsxt_manager_id": "${data.vcd_nsxt_manager.main.id}",
                      "nsxt_tier0_router_id": "${data.vcd_nsxt_tier0_router.router.id}"
                    }
                  ],
                  "route_advertisement_intention": "ALL_NETWORKS_ADVERTISED",
                  "use_ip_spaces": true
                }
              references:
                dedicated_org_id: data.vcd_org.org1.id
                nsxt_network.nsxt_manager_id: data.vcd_nsxt_manager.main.id
                nsxt_network.nsxt_tier0_router_id: data.vcd_nsxt_tier0_router.router.id
            - name: ext-net-nsxt-t0
              manifest: |-
                {
                  "description": "First NSX-T Tier 0 router backed network",
                  "ip_scope": [
                    {
                      "enabled": false,
                      "gateway": "88.88.88.1",
                      "prefix_length": "24",
                      "static_ip_pool": [
                        {
                          "end_address": "88.88.88.100",
                          "start_address": "88.88.88.88"
                        }
                      ]
                    },
                    {
                      "gateway": "14.14.14.1",
                      "prefix_length": "24",
                      "static_ip_pool": [
                        {
                          "end_address": "14.14.14.15",
                          "start_address": "14.14.14.10"
                        },
                        {
                          "end_address": "14.14.14.25",
                          "start_address": "14.14.14.20"
                        }
                      ]
                    }
                  ],
                  "name": "nsxt-external-network",
                  "nsxt_network": [
                    {
                      "nsxt_manager_id": "${data.vcd_nsxt_manager.main.id}",
                      "nsxt_tier0_router_id": "${data.vcd_nsxt_tier0_router.router.id}"
                    }
                  ]
                }
              references:
                nsxt_network.nsxt_manager_id: data.vcd_nsxt_manager.main.id
                nsxt_network.nsxt_tier0_router_id: data.vcd_nsxt_tier0_router.router.id
            - name: ext-net-nsxt-segment
              manifest: |-
                {
                  "description": "First NSX-T segment backed network",
                  "ip_scope": [
                    {
                      "enabled": false,
                      "gateway": "88.88.88.1",
                      "prefix_length": "24",
                      "static_ip_pool": [
                        {
                          "end_address": "88.88.88.100",
                          "start_address": "88.88.88.88"
                        }
                      ]
                    },
                    {
                      "gateway": "14.14.14.1",
                      "prefix_length": "24",
                      "static_ip_pool": [
                        {
                          "end_address": "14.14.14.15",
                          "start_address": "14.14.14.10"
                        },
                        {
                          "end_address": "14.14.14.25",
                          "start_address": "14.14.14.20"
                        }
                      ]
                    }
                  ],
                  "name": "nsxt-external-network",
                  "nsxt_network": [
                    {
                      "nsxt_manager_id": "${data.vcd_nsxt_manager.main.id}",
                      "nsxt_segment_name": "existing-nsxt-segment"
                    }
                  ]
                }
              references:
                nsxt_network.nsxt_manager_id: data.vcd_nsxt_manager.main.id
              dependencies:
                vcd_network_direct.net: |-
                    {
                      "depends_on": [
                        "${vcd_external_network_v2.ext-net-nsxt}"
                      ],
                      "external_network": "${vcd_external_network_v2.ext-net-nsxt-segment.name}",
                      "name": "direct-net",
                      "vdc": "nsxt-vdc"
                    }
            - name: ext-net-nsxv
              manifest: |-
                {
                  "description": "NSX-V based external network",
                  "ip_scope": [
                    {
                      "dns1": "192.168.0.164",
                      "dns2": "192.168.0.196",
                      "dns_suffix": "company.biz",
                      "gateway": "192.168.30.49",
                      "prefix_length": "24",
                      "static_ip_pool": [
                        {
                          "end_address": "192.168.30.62",
                          "start_address": "192.168.30.51"
                        }
                      ]
                    }
                  ],
                  "name": "nsxv-external-network",
                  "vsphere_network": [
                    {
                      "portgroup_id": "${data.vcd_portgroup.sw.id}",
                      "vcenter_id": "${data.vcd_vcenter.vc.id}"
                    }
                  ]
                }
              references:
                vsphere_network.portgroup_id: data.vcd_portgroup.sw.id
                vsphere_network.vcenter_id: data.vcd_vcenter.vc.id
            - name: tf-external-network
              manifest: |-
                {
                  "name": "my-ext-net"
                }
        argumentDocs:
            ALL_NETWORKS_ADVERTISED: |-
                - All networks, regardless on whether they fall inside of any IP Spaces
                associated with IP Space Uplinks, will be advertised by default. This can be changed on an
                individual network level later, if necessary.
            EDGE_GATEWAY: |-
                - Allow management of NAT and firewall rules only on Edge Gateways. This is the
                default behavior.
            IP_SPACE_UPLINKS_ADVERTISED_FLEXIBLE: |-
                - All networks within IP Space associated with IP Space
                Uplink will be advertised by default. This can be changed on an individual network level later,
                if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks are not
                advertised by default but can be configured to be advertised after creation.
            IP_SPACE_UPLINKS_ADVERTISED_STRICT: |-
                - All networks within IP Space associated with IP Space
                Uplink will be advertised by default. This can be changed on an individual network level later,
                if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks cannot be
                configured to be advertised. This is the default behavior.
            PROVIDER_AND_EDGE_GATEWAY: |-
                - Allow management of NAT and firewall rules on both the Provider and
                Edge gateways.
            PROVIDER_GATEWAY: '- Allow management of NAT and firewall rules only on Provider Gateways.'
            dedicated_org_id: |-
                - (Optional; v3.10+; VCD 10.4.1+) An Org ID that this network should be
                dedicated to. Only applicable when use_ip_spaces=true
            description: '- (Optional) Network friendly description'
            dns_suffix: |-
                - (Optional) A FQDN for the virtual machines on this network. Provider version
                v3.9+ also supports NSX-T
            dns1: '- (Optional) Primary DNS server. Provider version v3.9+ also supports NSX-T'
            dns2: '- (Optional) Secondary DNS server. Provider version v3.9+ also supports NSX-T'
            enabled: '- (Optional) Default is true.'
            end_address: '- (Required) End address of the IP range'
            gateway: '- (Required) Gateway of the network.'
            ip_scope: '- (Optional) One or more IP scopes for the network. See IP Scope below for details.'
            name: '- (Required) A unique name for the network'
            nat_and_firewall_service_intention: |-
                - (Optional; v3.13+; VCD 10.5.1+) Configure intentions for
                NAT and Firewall rule configuration:
            nsxt_manager_id: '- (Required) NSX-T manager ID. Can be looked up using vcd_nsxt_manager data source.'
            nsxt_network: '- (Optional) NSX-T network definition. See NSX-T Network below for details.'
            nsxt_segment_name: '- (Optional; v3.4+; VCD 10.3+) Existing NSX-T segment name.'
            nsxt_tier0_router_id: |-
                - (Optional) NSX-T Tier-0 router ID. Can be looked up using
                vcd_nsxt_tier0_router data source.
            portgroup_id: '- (Required) vSphere portgroup ID. Can be looked up using  vcd_portgroup data source.'
            prefix_length: '- (Required) Network prefix.'
            route_advertisement_intention: |-
                - (Optional; v3.13+; VCD 10.5.1+) Configure intentions for
                Org VDC network Route Advertisement:
            start_address: '- (Required) Start address of the IP range'
            static_ip_pool: '- (Required) IP ranges used for static pool allocation in the network.  See IP Pool below for details.'
            use_ip_spaces: |-
                - (Optional; v3.10+; VCD 10.4.1+) Defines if the network uses IP Spaces. Do
                not specify ip_scope when using IP Spaces. (default false)
            vcenter_id: '- (Required) vCenter ID. Can be looked up using vcd_vcenter data source.'
            vsphere_network: '- (Optional) One or more blocks of vSphere Network..'
        importStatements: []
    vcd_global_role:
        subCategory: ""
        description: Provides a VMware Cloud Director global role. This can be used to create, modify, and delete global roles.
        name: vcd_global_role
        title: vcd_global_role
        examples:
            - name: new-global-role
              manifest: |-
                {
                  "description": "new global role from CLI",
                  "name": "new-global-role",
                  "publish_to_all_tenants": false,
                  "rights": [
                    "Catalog: Add vApp from My Cloud",
                    "Catalog: Edit Properties",
                    "Catalog: View Private and Shared Catalogs",
                    "Organization vDC Compute Policy: View",
                    "vApp Template / Media: Edit",
                    "vApp Template / Media: View"
                  ],
                  "tenants": [
                    "org1",
                    "org2"
                  ]
                }
            - name: catalog-author
              manifest: |-
                {
                  "name": "Catalog Author"
                }
        argumentDocs:
            bundle_key: '- Key used for internationalization'
            description: '- (Required) A description of the global role'
            name: '- (Required) The name of the global role.'
            publish_to_all_tenants: '- (Required) When true, publishes the global role to all tenants'
            read_only: '- Whether this global role is read-only'
            rights: '- (Optional) List of rights assigned to this role'
            tenants: '- (Optional) List of tenants to which this global role gets published. Ignored if publish_to_all_tenants is true.'
        importStatements: []
    vcd_independent_disk:
        subCategory: ""
        description: Provides a VMware Cloud Director independent disk resource. This can be used to create and delete independent disks.
        name: vcd_independent_disk
        title: vcd_independent_disk
        examples:
            - name: myNewIndependentDisk
              manifest: |-
                {
                  "bus_sub_type": "VirtualSCSI",
                  "bus_type": "SCSI",
                  "name": "logDisk",
                  "size_in_mb": "1024",
                  "storage_profile": "external",
                  "vdc": "my-vcd"
                }
              dependencies:
                vcd_vapp_vm.web2: |-
                    {
                      "disk": [
                        {
                          "bus_number": 1,
                          "name": "${vcd_independent_disk.myNewIndependentDisk.name}",
                          "unit_number": 0
                        }
                      ],
                      "vapp_name": "${vcd_vapp.web.name}"
                    }
            - name: example
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "is_system": true,
                      "key": "foo",
                      "type": "MetadataStringValue",
                      "user_access": "PRIVATE",
                      "value": "bar"
                    },
                    {
                      "is_system": false,
                      "key": "myBool",
                      "type": "MetadataBooleanValue",
                      "user_access": "READWRITE",
                      "value": "true"
                    }
                  ]
                }
            - name: tf-myDisk
              manifest: |-
                {
                  "name": "my-disk",
                  "vdc": "my-vdc"
                }
        argumentDocs:
            attached_vm_ids: '- (Computed, v3.6+) IDs of VM which are using the disk'
            bus_sub_type: '- (Optional) Disk bus subtype. Values can be: buslogic, lsilogic, lsilogicsas, VirtualSCSI for SCSI, ahci for SATA and (v3.6+) nvmecontroller for NVME'
            bus_type: '- (Optional) Disk bus type. Values can be: IDE, SCSI, SATA, (v3.6+) NVME. Note When the disk type is IDE then VM is required to be powered off'
            datastore_name: '- (Computed) Data store name. Readable only for system user.'
            encrypted: '- (Computed, v3.6+ and VCD 10.2+) True if disk is encrypted'
            iops: '- (Computed) IOPS request for the created disk'
            is_attached: '- (Computed) True if the disk is already attached'
            is_system: '- (Required) Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            key: '- (Required) Key of this metadata entry.'
            metadata: '- (Deprecated; v3.6+) Use metadata_entry instead. Key value map of metadata to assign to this independent disk.'
            metadata_entry: '- (Optional; v3.8+) A set of metadata entries to assign. See Metadata section for details.'
            name: '- (Required) Disk name'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            owner_name: '- (Computed) The owner name of the disk'
            sharing_type: '- (Optional, v3.6+ and VCD 10.2+) This is the sharing type. Values can be: DiskSharing,ControllerSharing, or None'
            size_in_mb: '- (Required, v3.0+) Size of disk in MB.'
            storage_profile: '- (Optional) The name of storage profile where disk will be created'
            type: '- (Required) Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.'
            user_access: '- (Required) User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            uuid: '- (Computed, v3.6+ and VCD 10.2+) The UUID of this named disk''s device backing'
            value: '- (Required) Value of this metadata entry.'
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level'
        importStatements:
            - |-
              $ terraform import vcd_independent_disk.imported list@org-name.vdc-name.my-independent-disk-name
              vcd_independent_disk.Disk_import: Importing from ID "list@org-name.vdc-name.my-independent-disk-name"...
              Retrieving all disks by name
              No  ID                                                      Name    Description Size
              --  --                                                      ----    ------      ----
              1  urn:vcloud:disk:1bbc273d-7701-4f06-97be-428b46b0805e     diskV2  loging      78946548
              2  urn:vcloud:disk:6e1c996f-48b8-4e78-8111-a6407188d8b6     diskV2              5557452

              Error: resource was not imported! resource id must be specified in one of these formats:
              'org-name.vdc-name.my-independent-disk-id' to import by rule id
              'list@org-name.vdc-name.my-independent-disk-name' to get a list of disks with their IDs
            - $ terraform import vcd_independent_disk.imported list@org-name.vdc-name.urn:vcloud:disk:1bbc273d-7701-4f06-97be-428b46b0805e
    vcd_inserted_media:
        subCategory: ""
        description: Provides a VMware Cloud Director resource for inserting or ejecting media (ISO) file for the VM. Create this resource for inserting the media, and destroy it for ejecting.
        name: vcd_inserted_media
        title: vcd_inserted_media
        argumentDocs:
            catalog: '- (Required) The name of the catalog where to find media file'
            eject_force: |-
                - (Optional; v2.1+) Allows to pass answer to question in vCD
                "The guest operating system has locked the CD-ROM door and is probably using the CD-ROM.
                Disconnect anyway (and override the lock)?"
                when ejecting from a VM which is powered on. True means "Yes" as answer to question. Default is true
            name: '- (Required) Media file name in catalog which will be inserted to VM'
            org: '- (Optional; v2.0+) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            vapp_name: '- (Required) - The name of vApp to find'
            vdc: '- (Optional; v2.0+) The name of VDC to use, optional if defined at provider level'
            vm_name: '- (Required) - The name of VM to be used to insert media file'
        importStatements: []
    vcd_ip_space:
        subCategory: ""
        description: Provides a resource to manage IP Spaces for IP address management needs. IP Spaces provide structured approach to allocating public and private IP addresses by preventing the use of overlapping IP addresses across organizations and organization VDCs.
        name: vcd_ip_space
        title: vcd_ip_space
        examples:
            - name: space1
              manifest: |-
                {
                  "description": "description of IP Space",
                  "internal_scope": [
                    "192.168.1.0/24",
                    "10.10.10.0/24",
                    "11.11.11.0/24"
                  ],
                  "ip_prefix": [
                    {
                      "default_quota": -1,
                      "prefix": [
                        {
                          "first_ip": "192.168.1.100",
                          "prefix_count": 4,
                          "prefix_length": 30
                        },
                        {
                          "first_ip": "192.168.1.200",
                          "prefix_count": 4,
                          "prefix_length": 30
                        }
                      ]
                    },
                    {
                      "default_quota": -1,
                      "prefix": [
                        {
                          "first_ip": "10.10.10.96",
                          "prefix_count": 4,
                          "prefix_length": 29
                        }
                      ]
                    }
                  ],
                  "ip_range": [
                    {
                      "end_address": "11.11.11.110",
                      "start_address": "11.11.11.100"
                    },
                    {
                      "end_address": "11.11.11.123",
                      "start_address": "11.11.11.120"
                    }
                  ],
                  "name": "org-owned-ip-space",
                  "org_id": "${data.vcd_org.org1.id}",
                  "route_advertisement_enabled": false,
                  "type": "PRIVATE"
                }
              references:
                org_id: data.vcd_org.org1.id
            - name: space1
              manifest: |-
                {
                  "internal_scope": [
                    "192.168.1.0/24",
                    "10.10.10.0/24",
                    "11.11.11.0/24"
                  ],
                  "ip_prefix": [
                    {
                      "default_quota": 2,
                      "prefix": [
                        {
                          "first_ip": "192.168.1.100",
                          "prefix_count": 4,
                          "prefix_length": 30
                        }
                      ]
                    },
                    {
                      "default_quota": -1,
                      "prefix": [
                        {
                          "first_ip": "10.10.10.96",
                          "prefix_count": 4,
                          "prefix_length": 29
                        }
                      ]
                    }
                  ],
                  "ip_range": [
                    {
                      "end_address": "11.11.11.110",
                      "start_address": "11.11.11.100"
                    }
                  ],
                  "name": "Public-Tokyo",
                  "route_advertisement_enabled": true,
                  "type": "PUBLIC"
                }
            - name: space1
              manifest: |-
                {
                  "description": "Network used for backups",
                  "internal_scope": [
                    "192.168.1.0/24",
                    "10.10.10.0/24",
                    "11.11.11.0/24"
                  ],
                  "ip_prefix": [
                    {
                      "default_quota": 0,
                      "prefix": [
                        {
                          "first_ip": "192.168.1.100",
                          "prefix_count": 4,
                          "prefix_length": 30
                        }
                      ]
                    },
                    {
                      "default_quota": 0,
                      "prefix": [
                        {
                          "first_ip": "10.10.10.96",
                          "prefix_count": 4,
                          "prefix_length": 29
                        }
                      ]
                    }
                  ],
                  "name": "Backup-network",
                  "route_advertisement_enabled": false,
                  "type": "SHARED_SERVICES"
                }
            - name: space1
              manifest: |-
                {
                  "default_firewall_rule_creation_enabled": true,
                  "default_no_snat_rule_creation_enabled": true,
                  "default_snat_rule_creation_enabled": true,
                  "external_scope": "0.0.0.0/0",
                  "internal_scope": [
                    "192.168.1.0/24",
                    "10.10.10.0/24",
                    "11.11.11.0/24"
                  ],
                  "ip_prefix": [
                    {
                      "default_quota": 2,
                      "prefix": [
                        {
                          "first_ip": "192.168.1.100",
                          "prefix_count": 4,
                          "prefix_length": 30
                        }
                      ]
                    }
                  ],
                  "ip_range": [
                    {
                      "end_address": "11.11.11.110",
                      "start_address": "11.11.11.100"
                    }
                  ],
                  "name": "Public-Tokyo",
                  "route_advertisement_enabled": true,
                  "type": "PUBLIC"
                }
        argumentDocs:
            PRIVATE: |-
                - Private IP spaces are dedicated to a single tenant - a private IP space is used by
                only one organization that is specified during the space creation. For this organization, IP
                consumption is unlimited.
            PUBLIC: |-
                - A public IP space is used by multiple organizations and is controlled by the service
                provider through a quota-based system.
            SHARED_SERVICES: |-
                - An IP space for services and management networks that are required in the
                tenant space, but as a service provider, you don't want to expose it to organizations in your
                environment. The main difference from PUBLIC network is that IPs cannot be allocated by tenants.
            default_firewall_rule_creation_enabled: |-
                - (Optional, v3.11+, VCD 10.5.0+) Defines whether
                default firewall rule creation should be enabled
            default_no_snat_rule_creation_enabled: |-
                - (Optional, v3.11+, VCD 10.5.0+) Defines whether NO SNAT
                rule creation should be enabled
            default_snat_rule_creation_enabled: |-
                - (Optional, v3.11+, VCD 10.5.0+) Defines whether SNAT rule
                creation should be enabled
            description: '- (Optional) Description of IP Space'
            external_scope: |-
                - (Optional) The external scope defines the total span of IP addresses to which the IP
                space has access, for example the internet or a WAN.
            internal_scope: |-
                - (Required) The internal scope of an IP space is a list of CIDR notations that
                defines the exact span of IP addresses in which all ranges and blocks must be contained in.
            internal_scope.first_ip: '- (Required) - First IP of the prefix'
            internal_scope.prefix_count: '- (Required) - Number of prefixes'
            internal_scope.prefix_length: '- (Required) Prefix length'
            ip_prefix: '- (Optional) One or more IP prefixes (blocks) ip_prefix'
            ip_prefix.default_quota: |-
                - default Quota for this particular Prefix defined in
                prefix field. A Quota of -1 means there is no cap to the number of
                IP Prefixes that can be allocated. A Quota of 0 means that the IP Prefixes cannot be allocated.
            ip_prefix.prefix: '- IP block definition as detail below'
            ip_range: |-
                - (Optional) One or more ip_range for floating IP address
                allocation. (Floating IP addresses are just IP addresses taken from the defined range)
            ip_range.end_address: '- (Required) - End IP address of a range'
            ip_range.start_address: '- (Required) - Start IP address of a range'
            ip_range_quota: |-
                - (Optional) If you entered at least one IP Range
                (ip_range), enter a number of floating IP addresses to allocate individually.
                -1 is unlimited, while 0 means that no IPs can be allocated.
            name: '- (Required) A name for IP Space'
            org_id: '- (Optional) Required for PRIVATE type'
            route_advertisement_enabled: |-
                - (Optional) Toggle on the route advertisement option to
                enable advertising networks with IP prefixes from this IP space (default false)
            type: '- (Required) One of PUBLIC, SHARED_SERVICES, PRIVATE'
        importStatements: []
    vcd_ip_space_custom_quota:
        subCategory: ""
        description: Provides a resource to manage Custom Quotas for a given Org in a particular IP Space if one wants to override default quota set for IP Space.
        name: vcd_ip_space_custom_quota
        title: vcd_ip_space_custom_quota
        examples:
            - name: q1
              manifest: |-
                {
                  "depends_on": [
                    "${vcd_nsxt_edgegateway.ip-space}"
                  ],
                  "ip_prefix_quota": [
                    {
                      "prefix_length": 29,
                      "quota": 17
                    },
                    {
                      "prefix_length": 30,
                      "quota": 15
                    }
                  ],
                  "ip_range_quota": 23,
                  "ip_space_id": "${vcd_ip_space.space1.id}",
                  "org_id": "${data.vcd_org.org1.id}"
                }
              references:
                ip_space_id: vcd_ip_space.space1.id
                org_id: data.vcd_org.org1.id
        argumentDocs:
            ip_prefix_quota: |-
                - (Optional) IP Prefix Quota set in ip_prefix_quota blocks.
                Will inherit the default Quota set in vcd_ip_space if not set
            ip_prefix_quota.prefix_length: |-
                - (Required) Prefix length for which the quota should be set (must be an
                existing prefix length in parent IP Space)
            ip_prefix_quota.quota: '- (Required) - Quota value for specific prefix_length'
            ip_range_quota: |-
                - (Optional) Floating IP Quota. Will inherit the default Quota set in
                vcd_ip_space if not set
            ip_space_id: '- (Required) IP Space ID to set Custom Quotas'
            org_id: '- (Required) Organization ID, for which the Quota should be customized'
        importStatements: []
    vcd_ip_space_ip_allocation:
        subCategory: ""
        description: Provides a resource to manage IP Allocations within IP Spaces. It supports both - Floating IPs (IPs from IP Ranges) and IP Prefix (subnet) allocations with manual and automatic reservations.
        name: vcd_ip_space_ip_allocation
        title: vcd_ip_space_ip_allocation
        examples:
            - name: public-floating-ip
              manifest: |-
                {
                  "depends_on": [
                    "${vcd_nsxt_edgegateway.ip-space}"
                  ],
                  "ip_space_id": "${vcd_ip_space.space1.id}",
                  "org_id": "${data.vcd_org.org1.id}",
                  "type": "FLOATING_IP"
                }
              references:
                ip_space_id: vcd_ip_space.space1.id
                org_id: data.vcd_org.org1.id
              dependencies:
                vcd_nsxt_nat_rule.dnat-floating-ip: |-
                    {
                      "edge_gateway_id": "${vcd_nsxt_edgegateway.ip-space.id}",
                      "external_address": "${vcd_ip_space_ip_allocation.public-floating-ip.ip_address}",
                      "internal_address": "77.77.77.1",
                      "logging": true,
                      "name": "IP Space integration",
                      "org": "v42",
                      "rule_type": "DNAT"
                    }
            - name: public-floating-ip-manual
              manifest: |-
                {
                  "depends_on": [
                    "${vcd_nsxt_edgegateway.ip-space}"
                  ],
                  "description": "manually used floating IP",
                  "ip_space_id": "${vcd_ip_space.space1.id}",
                  "org_id": "${data.vcd_org.org1.id}",
                  "type": "FLOATING_IP",
                  "usage_state": "USED_MANUAL"
                }
              references:
                ip_space_id: vcd_ip_space.space1.id
                org_id: data.vcd_org.org1.id
            - name: public-ip-prefix
              manifest: |-
                {
                  "depends_on": [
                    "${vcd_nsxt_edgegateway.ip-space}"
                  ],
                  "ip_space_id": "${vcd_ip_space.space1.id}",
                  "org_id": "${data.vcd_org.org1.id}",
                  "prefix_length": 29,
                  "type": "IP_PREFIX"
                }
              references:
                ip_space_id: vcd_ip_space.space1.id
                org_id: data.vcd_org.org1.id
              dependencies:
                vcd_network_routed_v2.using-public-prefix: |-
                    {
                      "edge_gateway_id": "${vcd_nsxt_edgegateway.ip-space.id}",
                      "gateway": "${cidrhost(vcd_ip_space_ip_allocation.public-ip-prefix.ip_address, 1)}",
                      "name": "ip-space-backed-external-network",
                      "org": "v42",
                      "prefix_length": "${split(\"/\", vcd_ip_space_ip_allocation.public-ip-prefix.ip_address)[1]}",
                      "static_ip_pool": [
                        {
                          "end_address": "${cidrhost(vcd_ip_space_ip_allocation.public-ip-prefix.ip_address, 4)}",
                          "start_address": "${cidrhost(vcd_ip_space_ip_allocation.public-ip-prefix.ip_address, 2)}"
                        }
                      ]
                    }
            - name: public-ip-prefix-manual
              manifest: |-
                {
                  "depends_on": [
                    "${vcd_nsxt_edgegateway.ip-space}"
                  ],
                  "description": "manually used IP Prefix",
                  "ip_space_id": "${vcd_ip_space.space1.id}",
                  "org_id": "${data.vcd_org.org1.id}",
                  "prefix_length": 30,
                  "type": "IP_PREFIX",
                  "usage_state": "USED_MANUAL"
                }
              references:
                ip_space_id: vcd_ip_space.space1.id
                org_id: data.vcd_org.org1.id
            - name: public-floating-ip-2
              manifest: |-
                {
                  "depends_on": [
                    "${vcd_nsxt_edgegateway.ip-space}"
                  ],
                  "ip_space_id": "${vcd_ip_space.space1.id}",
                  "org_id": "${data.vcd_org.org1.id}",
                  "type": "FLOATING_IP",
                  "value": "11.11.11.102"
                }
              references:
                ip_space_id: vcd_ip_space.space1.id
                org_id: data.vcd_org.org1.id
            - name: public-ip-prefix
              manifest: |-
                {
                  "depends_on": [
                    "${vcd_nsxt_edgegateway.ip-space}"
                  ],
                  "ip_space_id": "${vcd_ip_space.space1.id}",
                  "org_id": "${data.vcd_org.org1.id}",
                  "type": "IP_PREFIX",
                  "value": "10.10.10.96/29"
                }
              references:
                ip_space_id: vcd_ip_space.space1.id
                org_id: data.vcd_org.org1.id
        argumentDocs:
            FLOATING_IP: '- allocates single IP from defined ranges in IP Space'
            IP_PREFIX: |-
                - allocates subnets. Note field prefix_length is required to allocate IP
                Prefix
            allocation_date: '- allocation date in formated as 2023-06-07T09:57:58.721Z (ISO 8601)'
            description: '- (Optional) Can only be set when usage_state=USED_MANUAL'
            ip: '- convenience field. For type=IP_PREFIX it will contain only the IP from CIDR returned'
            ip_address: |-
                - contains either single IP when type=FLOATING_IP (e.g. 192.168.1.100) or subnet
                in CIDR format when type=IP_PREFIX (e.g. 192.168.1.100/30). Note: Terraform built-in
                function cidrhost is a
                convenient method to getting IPs within returned CIDR
            ip_space_id: '- (Required) IP Space ID to use for IP Allocations'
            org_id: '- (Required) Org ID in which the IP is allocated'
            prefix_length: (Optional) Required when type=IP_PREFIX
            type: '- (Required) One of FLOATING_IP, IP_PREFIX'
            usage_state: |-
                - (Optional) (Optional) Only used with manual reservations. Value USED_MANUAL
                enables manual IP reservation. Value UNUSED is set to release manual allocation of IP.
            used_by_id: '- contains entity ID that is using the IP if usage_state=USED'
            value: |-
                - (Optional; VCD 10.4.2+) An option to request a specific IP or subnet from IP Space.
                Note: This field does not support IP ranges because it would cause multiple allocations
                created in one resource. Please use multiple resource instances to allocate IP ranges.
        importStatements: []
    vcd_ip_space_uplink:
        subCategory: ""
        description: Provides a resource to manage IP Space Uplinks in External Networks (Provider Gateways).
        name: vcd_ip_space_uplink
        title: vcd_ip_space_uplink
        examples:
            - name: u1
              manifest: |-
                {
                  "description": "uplink number one",
                  "external_network_id": "${vcd_external_network_v2.provider-gateway.id}",
                  "ip_space_id": "${vcd_ip_space.space1.id}",
                  "name": "uplink"
                }
              references:
                external_network_id: vcd_external_network_v2.provider-gateway.id
                ip_space_id: vcd_ip_space.space1.id
              dependencies:
                vcd_external_network_v2.provider-gateway: |-
                    {
                      "name": "ProviderGateway1",
                      "nsxt_network": [
                        {
                          "nsxt_manager_id": "${data.vcd_nsxt_manager.main.id}",
                          "nsxt_tier0_router_id": "${data.vcd_nsxt_tier0_router.router.id}"
                        }
                      ],
                      "use_ip_spaces": true
                    }
                vcd_ip_space.space1: |-
                    {
                      "internal_scope": [
                        "192.168.1.0/24"
                      ],
                      "name": "ip-space-1",
                      "route_advertisement_enabled": false,
                      "type": "PUBLIC"
                    }
            - name: u1
              manifest: |-
                {
                  "associated_interface_ids": [
                    "${data.vcd_nsxt_tier0_interface.one.id}"
                  ],
                  "external_network_id": "${vcd_external_network_v2.provider-gateway.id}",
                  "ip_space_id": "${vcd_ip_space.space1.id}",
                  "name": "uplink"
                }
              references:
                external_network_id: vcd_external_network_v2.provider-gateway.id
                ip_space_id: vcd_ip_space.space1.id
        argumentDocs:
            associated_interface_ids_id: |-
                - (Optional; v3.14+, VCD 10.5+) A set of Tier-0 Router Interface
                IDs that can be associated with the Uplink. Data Source
                vcd_nsxt_tier0_router_interface
                can help to look it up.
            description: '- (Optional) An optional description for IP Space Uplink'
            external_network_id: '- (Required) External Network ID For IP Space Uplink configuration'
            ip_space_id: '- (Required) IP Space ID configuration'
            ip_space_type: '- Backing IP Space type'
            name: '- (Required) A tenant facing name for IP Space Uplink'
            status: '- Status of IP Space Uplink'
        importStatements: []
    vcd_lb_app_profile:
        subCategory: ""
        description: Provides an NSX edge gateway load balancer application profile resource.
        name: vcd_lb_app_profile
        title: vcd_lb_app_profile
        examples:
            - name: tcp
              manifest: |-
                {
                  "edge_gateway": "my-edge-gw",
                  "name": "tcp-app-profile",
                  "org": "my-org",
                  "type": "tcp",
                  "vdc": "my-org-vdc"
                }
            - name: http
              manifest: |-
                {
                  "cookie_mode": "insert",
                  "cookie_name": "JSESSIONID",
                  "edge_gateway": "my-edge-gw",
                  "http_redirect_url": "/service-one",
                  "insert_x_forwarded_http_header": true,
                  "name": "http-profile",
                  "org": "my-org",
                  "persistence_mechanism": "cookie",
                  "type": "http",
                  "vdc": "my-org-vdc"
                }
        argumentDocs:
            cookie_mode: |-
                - (Optional) The mode by which the cookie should be inserted. One of 'insert',
                'prefix', or 'appsession'
            cookie_name: |-
                - (Optional) Used to uniquely identify the session the first time a client accesses
                the site. The load balancer refers to this cookie when connecting subsequent requests in the
                session, so that they all go to the same virtual server. Only applies for
                persistence_mechanism 'cookie'
            edge_gateway: '- (Required) The name of the edge gateway on which the application profile is to be created'
            enable_pool_side_ssl: |-
                - (Optional) Enable to define the certificate, CAs, or CRLs used to
                authenticate the load balancer from the server side. Note: This resource does not currently
                support attaching Pool and Virtual Server certificates therefore this toggle only enables it. To
                make it fully work certificates must be currently attached manually.
            enable_ssl_passthrough: |-
                - (Optional) Enable SSL authentication to be passed through to the
                virtual server. Otherwise SSL authentication takes place at the destination address
            expiration: '- (Optional) Length of time in seconds that persistence stays in effect'
            http_redirect_url: |-
                - (Optional) The URL to which traffic that arrives at the destination address
                should be redirected. Only applies for types http and https
            id: '- The NSX ID of the load balancer application profile'
            insert_x_forwarded_http_header: |-
                - (Optional) Enables 'X-Forwarded-For' header for identifying
                the originating IP address of a client connecting to a Web server through the load balancer.
                Only applies for types http and https
            name: '- (Required) Application profile name'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            persistence_mechanism: |-
                - (Optional) Persistence mechanism for the profile. One of 'cookie',
                'ssl-sessionid', 'sourceip'
            type: |-
                - (Required) Protocol type used to send requests to the server. One of tcp, udp,
                http, or https
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level'
        importStatements: []
    vcd_lb_app_rule:
        subCategory: ""
        description: Provides an NSX edge gateway load balancer application rule resource.
        name: vcd_lb_app_rule
        title: vcd_lb_app_rule
        examples:
            - name: example-one
              manifest: |-
                {
                  "edge_gateway": "my-edge-gw",
                  "name": "script1",
                  "org": "my-org",
                  "script": "acl vmware_page url_beg / vmware redirect location https://www.vmware.com/ ifvmware_page",
                  "vdc": "my-org-vdc"
                }
            - name: example-two
              manifest: |-
                {
                  "edge_gateway": "my-edge-gw",
                  "name": "script1",
                  "org": "my-org",
                  "script": "acl vmware_page url_beg / vmware redirect location https://www.vmware.com/ ifvmware_page\nacl other_page2 url_beg / other2 redirect location https://www.other2.com/ ifother_page2\nacl hello payload(0,6) -m bin 48656c6c6f0a\n",
                  "vdc": "my-org-vdc"
                }
        argumentDocs:
            edge_gateway: '- (Required) The name of the edge gateway on which the application rule is to be created'
            id: '- The NSX ID of the load balancer application rule'
            name: '- (Required) Application rule name'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            script: |-
                - (Required) A multiline application rule script.
                Terraform's HEREDOC syntax
                may be useful for multiline scripts. Note: For information on
                the application rule syntax, see more in [VMware Cloud Director documentation]
                (https://docs.vmware.com/en/vCloud-Director/9.7/com.vmware.vcloud.tenantportal.doc/GUID-AFF9F70F-85C9-4053-BA69-F2B062F34C7F.html)
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level'
        importStatements: []
    vcd_lb_server_pool:
        subCategory: ""
        description: Provides an NSX edge gateway load balancer server pool resource.
        name: vcd_lb_server_pool
        title: vcd_lb_server_pool
        examples:
            - name: web-servers
              manifest: |-
                {
                  "algorithm": "round-robin",
                  "edge_gateway": "my-edge-gw",
                  "member": [
                    {
                      "condition": "enabled",
                      "ip_address": "1.1.1.1",
                      "max_connections": 100,
                      "min_connections": 0,
                      "monitor_port": 9000,
                      "name": "member1",
                      "port": 8443,
                      "weight": 1
                    }
                  ],
                  "name": "web-servers",
                  "org": "my-org",
                  "vdc": "my-org-vdc"
                }
            - name: web-servers
              manifest: |-
                {
                  "algorithm": "httpheader",
                  "algorithm_parameters": "headerName=host",
                  "description": "description",
                  "edge_gateway": "my-edge-gw",
                  "enable_transparency": true,
                  "member": [
                    {
                      "condition": "enabled",
                      "ip_address": "1.1.1.1",
                      "max_connections": 100,
                      "min_connections": 0,
                      "monitor_port": 9000,
                      "name": "member1",
                      "port": 8443,
                      "weight": 1
                    },
                    {
                      "condition": "drain",
                      "ip_address": "2.2.2.2",
                      "max_connections": 8,
                      "min_connections": 6,
                      "monitor_port": 4000,
                      "name": "member2",
                      "port": 7000,
                      "weight": 2
                    }
                  ],
                  "monitor_id": "${data.vcd_lb_service_monitor.web-monitor.id}",
                  "name": "web-servers",
                  "org": "my-org",
                  "vdc": "my-org-vdc"
                }
              references:
                monitor_id: data.vcd_lb_service_monitor.web-monitor.id
        argumentDocs:
            algorithm: '- (Required) Server Pool load balancing method. Can be one of ip-hash, round-robin, uri, leastconn, url, or httpheader'
            algorithm_parameters: |-
                - (Optional) Valid only when algorithm is httpheader or url. The httpheader algorithm
                parameter has one option headerName=<name> while the url algorithm parameter has option urlParam=<url>.
            condition: |-
                - (Required) State of member in a pool. One of enabled, disabled, or drain. When member condition
                is set to drain it stops taking new connections and calls, while it allows its sessions on existing connections to
                continue until they naturally end. This allows to gracefully remove member node from load balancing rotation.
            description: '- (Optional) Server Pool description'
            edge_gateway: '- (Required) The name of the edge gateway on which the server pool is to be created'
            enable_transparency: |-
                - (Optional) When transparency is false (default) backend servers see the IP address of the
                traffic source as the internal IP address of the load balancer. When it is true the source IP address is the actual IP
                address of the client and the edge gateway must be set as the default gateway to ensure that return packets go through
                the edge gateway.
            id: '- The NSX ID of the load balancer server pool'
            ip_address: '- (Required) Member IP address'
            max_connections: |-
                - (Optional) The maximum number of concurrent connections the member can handle. Note: when the
                number of incoming requests exceeds the maximum, requests are queued and the load balancer waits for a connection to be
                released.
            member: |-
                - (Optional) A block to define server pool members. Multiple can be used. See Member and
                example for usage details.
            min_connections: '- (Optional) The minimum number of concurrent connections a member must always accept.'
            monitor_id: '- (Optional) vcd_lb_service_monitor resource id to attach to server pool for health check parameters'
            monitor_port: |-
                - (Required) Monitor Port at which the member is to receive health monitor requests. Note: can
                be the same as port
            name: '- (Required) Server Pool name'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            port: '- (Required) The port at which the member is to receive traffic from the load balancer.'
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level'
            weight: '- (Required) The proportion of traffic this member is to handle. Must be an integer in the range 1-256.'
        importStatements: []
    vcd_lb_service_monitor:
        subCategory: ""
        description: Provides an NSX edge gateway load balancer service monitor resource.
        name: vcd_lb_service_monitor
        title: vcd_lb_service_monitor
        examples:
            - name: monitor
              manifest: |-
                {
                  "edge_gateway": "my-edge-gw",
                  "extension": {
                    "content-type": "application/json",
                    "linespan": ""
                  },
                  "interval": "5",
                  "max_retries": "3",
                  "method": "GET",
                  "name": "http-monitor",
                  "org": "my-org",
                  "send": "{\"key\": \"value\"}",
                  "timeout": "20",
                  "type": "http",
                  "url": "/health",
                  "vdc": "my-org-vdc"
                }
        argumentDocs:
            edge_gateway: '- (Required) The name of the edge gateway on which the service monitor is to be created'
            expected: |-
                - (Optional) For types http and https. String that the monitor expects to match in the status line of
                the HTTP or HTTPS response (for example, HTTP/1.1)
            extension: |-
                - (Optional) A map of advanced monitor parameters as key=value pairs (i.e. max-age=SECONDS, invert-regex)
                Note: When you need a value of key only format just set value to empty string (i.e. linespan = "")
            id: '- The NSX ID of the load balancer service monitor'
            interval: |-
                - (Optional) Interval in seconds at which a server is to be monitored using the specified Method.
                Defaults to 10
            max_retries: |-
                - (Optional) Number of times the specified monitoring Method must fail sequentially before the server is
                declared down. Defaults to 3
            method: |-
                - (Optional) For types http and https. Select http method to be used to detect server status. One of
                OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT
            name: '- (Required) Service Monitor name'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            receive: |-
                - (Optional) For types http,  https, and udp. The string to be matched in the response content.
                Note: When expected is not matched, the monitor does not try to match the Receive content
            send: '- (Optional) For types http,  https, and udp. The data to be sent.'
            timeout: '- (Optional) Maximum time in seconds within which a response from the server must be received. Defaults to 15'
            type: |-
                - (Required) Select the way in which you want to send the health check request to the server — http, https,
                tcp, icmp, or udp. Depending on the type selected, the remaining attributes are allowed or not
            url: '- (Optional) For types http and https. URL to be used in the server status request'
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level'
        importStatements: []
    vcd_lb_virtual_server:
        subCategory: ""
        description: Provides an NSX edge gateway load balancer virtual server resource.
        name: vcd_lb_virtual_server
        title: vcd_lb_virtual_server
        examples:
            - name: http
              manifest: |-
                {
                  "app_profile_id": "${vcd_lb_app_profile.http.id}",
                  "app_rule_ids": [
                    "${vcd_lb_app_rule.redirect.id}",
                    "${vcd_lb_app_rule.language.id}"
                  ],
                  "edge_gateway": "my-edge-gw",
                  "ip_address": "1.1.1.1",
                  "name": "http-virtual-server",
                  "org": "my-org",
                  "port": 80,
                  "protocol": "http",
                  "server_pool_id": "${vcd_lb_server_pool.web-servers.id}",
                  "vdc": "my-org-vdc"
                }
              references:
                app_profile_id: vcd_lb_app_profile.http.id
                server_pool_id: vcd_lb_server_pool.web-servers.id
            - name: http
              manifest: |-
                {
                  "app_profile_id": "${vcd_lb_app_profile.http.id}",
                  "app_rule_ids": [
                    "${vcd_lb_app_rule.redirect.id}"
                  ],
                  "edge_gateway": "${var.edge_gateway}",
                  "ip_address": "${data.vcd_edgegateway.mygw.default_external_network_ip}",
                  "name": "my-virtual-server",
                  "org": "${var.org}",
                  "port": 8888,
                  "protocol": "${var.protocol}",
                  "server_pool_id": "${vcd_lb_server_pool.web-servers.id}",
                  "vdc": "${var.vdc}"
                }
              references:
                app_profile_id: vcd_lb_app_profile.http.id
                edge_gateway: var.edge_gateway
                ip_address: data.vcd_edgegateway.mygw.default_external_network_ip
                org: var.org
                protocol: var.protocol
                server_pool_id: vcd_lb_server_pool.web-servers.id
                vdc: var.vdc
              dependencies:
                vcd_lb_app_profile.http: |-
                    {
                      "edge_gateway": "${var.edge_gateway}",
                      "name": "http-app-profile",
                      "org": "${var.org}",
                      "type": "${var.protocol}",
                      "vdc": "${var.vdc}"
                    }
                vcd_lb_app_rule.redirect: |-
                    {
                      "edge_gateway": "${var.edge_gateway}",
                      "name": "redirect",
                      "org": "${var.org}",
                      "script": "acl vmware_page url_beg / vmware redirect location https://www.vmware.com/ ifvmware_page",
                      "vdc": "${var.vdc}"
                    }
                vcd_lb_server_pool.web-servers: |-
                    {
                      "algorithm": "httpheader",
                      "algorithm_parameters": "headerName=host",
                      "description": "description",
                      "edge_gateway": "${var.edge_gateway}",
                      "enable_transparency": true,
                      "member": [
                        {
                          "condition": "enabled",
                          "ip_address": "1.1.1.1",
                          "max_connections": 100,
                          "min_connections": 0,
                          "monitor_port": 9000,
                          "name": "member1",
                          "port": 8443,
                          "weight": 1
                        },
                        {
                          "condition": "drain",
                          "ip_address": "2.2.2.2",
                          "max_connections": 8,
                          "min_connections": 6,
                          "monitor_port": 4000,
                          "name": "member2",
                          "port": 7000,
                          "weight": 2
                        }
                      ],
                      "monitor_id": "${vcd_lb_service_monitor.monitor.id}",
                      "name": "web-servers",
                      "org": "${var.org}",
                      "vdc": "${var.vdc}"
                    }
                vcd_lb_service_monitor.monitor: |-
                    {
                      "edge_gateway": "${var.edge_gateway}",
                      "extension": {
                        "content-type": "application/json",
                        "linespan": ""
                      },
                      "interval": "5",
                      "max_retries": "3",
                      "method": "GET",
                      "name": "http-monitor",
                      "org": "${var.org}",
                      "send": "{\"key\": \"value\"}",
                      "timeout": "20",
                      "type": "${var.protocol}",
                      "url": "/health",
                      "vdc": "${var.vdc}"
                    }
        argumentDocs:
            app_profile_id: '- (Optional) Application profile ID to be associated with the virtual server'
            app_rule_ids: '- (Optional) List of attached application rule IDs'
            connection_limit: '- (Optional) Maximum concurrent connections that the virtual server can process'
            connection_rate_limit: '- (Optional) Maximum incoming new connection requests per second'
            description: '- (Optional) Virtual server description'
            edge_gateway: |-
                - (Required) The name of the edge gateway on which the virtual server is to be
                created
            enable_acceleration: |-
                - (Optional) Defines if the virtual server uses acceleration. Default
                false
            enabled: '- (Optional) Defines if the virtual server is enabled. Default true'
            id: '- The NSX ID of the load balancer virtual server'
            ip_address: '- (Required) Set the IP address that the load balancer listens on'
            name: '- (Required) Virtual server name'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations
            port: '- (Required) The port number that the load balancer listens on'
            protocol: |-
                - (Required) Select the protocol that the virtual server accepts. One of tcp, udp,
                http, or https Note: You must select the same protocol used by the selected
                Application Profile
            server_pool_id: '- (Optional) The server pool that the load balancer will use'
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level'
        importStatements: []
    vcd_library_certificate:
        subCategory: ""
        description: Provides a certificate in System or Org library resource.
        name: vcd_library_certificate
        title: vcd_library_certificate
        examples:
            - name: new-certificate
              manifest: |-
                {
                  "alias": "SAML certificate",
                  "certificate": "${file(\"/home/user/cert.pem\")}",
                  "description": "my description",
                  "org": "myOrg",
                  "private_key": "${file(\"/home/user/key.pem\")}",
                  "private_key_passphrase": "passphrase"
                }
            - name: new-certificate-for-system
              manifest: |-
                {
                  "alias": "provider certificate",
                  "certificate": "${file(\"/home/user/provider-cert.pem\")}",
                  "description": "my description",
                  "org": "System",
                  "private_key": "${file(\"/home/user/provider-key.pem\")}",
                  "private_key_passphrase": "passphrase"
                }
        argumentDocs:
            alias: '- (Required)  - Alias (name) of certificate'
            certificate: |-
                - (Required)  - Content of Certificate. Note. it is best to avoid trailing
                newlines in the certificate, as some versions of VCD trim trailing newline and plan/apply
                operations might always report it.
            description: '- (Optional)  - Certificate description'
            id: '- The added to library certificate ID'
            private_key: '- (Optional)  - Content of private key'
            private_key_passphrase: '- (Optional)  - private key pass phrase'
        importStatements: []
    vcd_multisite_org_association:
        subCategory: ""
        description: Provides a resource to create, read, and modify a VMware Cloud Director org association with the current org.
        name: vcd_multisite_org_association
        title: vcd_multisite_org_association
        examples:
            - name: org1-org2
              manifest: |-
                {
                  "association_data_file": "org2.xml",
                  "org_id": "${data.vcd_org.my-org.id}"
                }
              references:
                org_id: data.vcd_org.my-org.id
            - name: org1-org2
              manifest: |-
                {
                  "association_data": "${var.remote_data}",
                  "org_id": "${data.vcd_org.my-org.id}"
                }
              references:
                association_data: var.remote_data
                org_id: data.vcd_org.my-org.id
        argumentDocs:
            associated_org_id: '- ID of the remote org associated with the current one.'
            associated_org_name: '- The name of the associated org.'
            associated_site_id: '- ID of the remote site to which the associated org belongs.'
            association_data: |-
                - (Optional; required if associated_data_file is not used) Data produced from another org, needed to associate to this org from another one.
                (Used instead of associated_data_file)
            association_data_file: |-
                - (Optional; required if associated_data is not used) Name of the file containing the data used to associate to this org from another one.
                (Used instead of associated_data). This file can be created (by the other org administrator) using the data source vcd_multisite_org_data.
            org_id: '- (Required) The ID of the current organization where we start the association with a remote one.'
            status: '- The status of the association (one of ASYMMETRIC, ACTIVE, UNREACHABLE, ERROR)'
        importStatements: []
    vcd_multisite_site_association:
        subCategory: ""
        description: Provides a resource to create, read, and modify a VMware Cloud Director site association with the current site.
        name: vcd_multisite_site_association
        title: vcd_multisite_site_association
        examples:
            - name: site1-site2
              manifest: |-
                {
                  "association_data_file": "site2.xml"
                }
            - name: site1-site2
              manifest: |-
                {
                  "association_data": "${var.remote_data}"
                }
              references:
                association_data: var.remote_data
        argumentDocs:
            associated_site_id: '- ID of the remote site associated with the current one.'
            associated_site_name: '- The name of the associated site.'
            association_data: |-
                - (Optional; required if associated_data_file is not used) Data produced from another site, needed to associate to this site from another one.
                (Used instead of associated_data_file)
            association_data_file: |-
                - (Optional; required if associated_data is not used) Name of the file containing the data used to associate to this site from another one.
                (Used instead of associated_data). This file can be created (by the other site administrator) using the data source vcd_multisite_site_data.
            connection_timeout_mins: |-
                - (Optional) How many minutes we wait for the association to be complete. (0 = no check)
                This property is only used during update, and should not be used until both sides of the association have been completed.
            status: '- The status of the association (one of ASYMMETRIC, ACTIVE, UNREACHABLE, ERROR)'
        importStatements: []
    vcd_network_direct:
        subCategory: ""
        description: Provides a VMware Cloud Director Org VDC Network attached to an external one. This can be used to create, modify, and delete internal networks for vApps to connect.
        name: vcd_network_direct
        title: vcd_network_direct
        examples:
            - name: net
              manifest: |-
                {
                  "external_network": "my-ext-net",
                  "name": "my-net",
                  "org": "my-org",
                  "vdc": "my-vdc"
                }
            - name: example
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "is_system": true,
                      "key": "foo",
                      "type": "MetadataStringValue",
                      "user_access": "PRIVATE",
                      "value": "bar"
                    },
                    {
                      "is_system": false,
                      "key": "myBool",
                      "type": "MetadataBooleanValue",
                      "user_access": "READWRITE",
                      "value": "true"
                    }
                  ]
                }
            - name: tf-mynet
              manifest: |-
                {
                  "external_network": "COMPUTE",
                  "name": "my-net",
                  "org": "my-org",
                  "vdc": "my-vdc"
                }
        argumentDocs:
            description: '- (Optional v2.6+) An optional description of the network'
            external_network: '- (Required) The name of the external network.'
            external_network_dns_suffix: '- (Computed) returns the DNS suffix from the external network'
            external_network_dns1: '- (Computed) returns the first DNS from the external network'
            external_network_dns2: '- (Computed) returns the second DNS from the external network'
            external_network_gateway: '- (Computed) returns the gateway from the external network'
            external_network_netmask: '- (Computed) returns the netmask from the external network'
            is_system: '- (Required) Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            key: '- (Required) Key of this metadata entry.'
            metadata: '- (Deprecated; v3.6+) Use metadata_entry instead. Key value map of metadata to assign to this network.'
            metadata_entry: '- (Optional; v3.8+) A set of metadata entries to assign. See Metadata section for details.'
            name: '- (Required) A unique name for the network'
            org: |-
                - (Optional; v2.0+) The name of organization to use, optional if defined at provider level. Useful when
                connected as sysadmin working across different organisations
            shared: |-
                - (Optional) Defines if this network is shared between multiple VDCs
                in the Org.  Defaults to false.
            type: '- (Required) Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.'
            user_access: '- (Required) User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            value: '- (Required) Value of this metadata entry.'
            vdc: '- (Optional; v2.0+) The name of VDC to use, optional if defined at provider level'
        importStatements: []
    vcd_network_isolated:
        subCategory: ""
        description: Provides a VMware Cloud Director Org VDC isolated Network. This can be used to create, modify, and delete internal networks for vApps to connect.
        name: vcd_network_isolated
        title: vcd_network_isolated
        examples:
            - name: net
              manifest: |-
                {
                  "dhcp_pool": [
                    {
                      "end_address": "192.168.2.50",
                      "start_address": "192.168.2.2"
                    }
                  ],
                  "dns1": "192.168.2.1",
                  "gateway": "192.168.2.1",
                  "name": "my-net",
                  "org": "my-org",
                  "static_ip_pool": [
                    {
                      "end_address": "192.168.2.100",
                      "start_address": "192.168.2.51"
                    }
                  ],
                  "vdc": "my-vdc"
                }
            - name: example
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "is_system": true,
                      "key": "foo",
                      "type": "MetadataStringValue",
                      "user_access": "PRIVATE",
                      "value": "bar"
                    },
                    {
                      "is_system": false,
                      "key": "myBool",
                      "type": "MetadataBooleanValue",
                      "user_access": "READWRITE",
                      "value": "true"
                    }
                  ]
                }
            - name: tf-mynet
              manifest: |-
                {
                  "gateway": "COMPUTE",
                  "name": "my-net",
                  "org": "my-org",
                  "vdc": "my-vdc"
                }
        argumentDocs:
            default_lease_time: '- (Optional) The default DHCP lease time to use. Defaults to 3600.'
            description: '- (Optional v2.6+) An optional description of the network'
            dhcp_pool: |-
                - (Optional) A range of IPs to issue to virtual machines that don't
                have a static IP; see IP Pools below for details.
            dns_suffix: '- (Optional) A FQDN for the virtual machines on this network'
            dns1: '- (Optional) First DNS server to use.'
            dns2: '- (Optional) Second DNS server to use.'
            end_address: '- (Required) The final address in the IP Range'
            gateway: '- (Required) The gateway for this network'
            is_system: '- (Required) Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            key: '- (Required) Key of this metadata entry.'
            max_lease_time: '- (Optional) The maximum DHCP lease time to use. Defaults to 7200.'
            metadata: '- (Deprecated; v3.6+) Use metadata_entry instead. Key value map of metadata to assign to this network.'
            metadata_entry: '- (Optional; v3.8+) A set of metadata entries to assign. See Metadata section for details.'
            name: '- (Required) A unique name for the network'
            netmask: '- (Optional) The netmask for the new network. Defaults to 255.255.255.0'
            org: |-
                - (Optional; v2.0+) The name of organization to use, optional if defined at provider level. Useful when
                connected as sysadmin working across different organisations
            shared: |-
                - (Optional) Defines if this network is shared between multiple VDCs
                in the Org.  Defaults to false.
            start_address: '- (Required) The first address in the IP Range'
            static_ip_pool: |-
                - (Optional) A range of IPs permitted to be used as static IPs for
                virtual machines; see IP Pools below for details.
            type: '- (Required) Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.'
            user_access: '- (Required) User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            value: '- (Required) Value of this metadata entry.'
            vdc: '- (Optional; v2.0+) The name of VDC to use, optional if defined at provider level'
        importStatements: []
    vcd_network_isolated_v2:
        subCategory: ""
        description: Provides a VMware Cloud Director Org VDC isolated Network. This can be used to create, modify, and delete isolated VDC networks (backed by NSX-T or NSX-V).
        name: vcd_network_isolated_v2
        title: vcd_network_isolated_v2
        examples:
            - name: nsxt-backed
              manifest: |-
                {
                  "description": "My isolated Org VDC network backed by NSX-T",
                  "gateway": "1.1.1.1",
                  "guest_vlan_allowed": true,
                  "name": "nsxt-isolated 1",
                  "org": "my-org",
                  "owner_id": "${data.vcd_org_vdc.main.id}",
                  "prefix_length": 24,
                  "static_ip_pool": [
                    {
                      "end_address": "1.1.1.20",
                      "start_address": "1.1.1.10"
                    },
                    {
                      "end_address": "1.1.1.103",
                      "start_address": "1.1.1.100"
                    }
                  ]
                }
              references:
                owner_id: data.vcd_org_vdc.main.id
            - name: ipv6
              manifest: |-
                {
                  "gateway": "2002:0:0:1234:abcd:ffff:c0a8:121",
                  "name": "isolated-ipv6",
                  "owner_id": "${vcd_org_vdc.with-edge-cluster.id}",
                  "prefix_length": 124,
                  "static_ip_pool": [
                    {
                      "end_address": "2002:0:0:1234:abcd:ffff:c0a8:123",
                      "start_address": "2002:0:0:1234:abcd:ffff:c0a8:122"
                    }
                  ]
                }
              references:
                owner_id: vcd_org_vdc.with-edge-cluster.id
            - name: ipv6-dualstack
              manifest: |-
                {
                  "dual_stack_enabled": true,
                  "gateway": "192.168.1.1",
                  "name": "Isolated Dual Stack",
                  "owner_id": "${vcd_org_vdc.with-edge-cluster.id}",
                  "prefix_length": 24,
                  "secondary_gateway": "2002:0:0:1234:abcd:ffff:c0a6:121",
                  "secondary_prefix_length": 124,
                  "secondary_static_ip_pool": [
                    {
                      "end_address": "2002:0:0:1234:abcd:ffff:c0a6:124",
                      "start_address": "2002:0:0:1234:abcd:ffff:c0a6:122"
                    }
                  ],
                  "static_ip_pool": [
                    {
                      "end_address": "192.168.1.20",
                      "start_address": "192.168.1.10"
                    }
                  ]
                }
              references:
                owner_id: vcd_org_vdc.with-edge-cluster.id
            - name: nsxv-backed
              manifest: |-
                {
                  "description": "NSX-V isolated network",
                  "gateway": "1.1.1.1",
                  "guest_vlan_allowed": true,
                  "is_shared": true,
                  "name": "nsxv-isolated-network",
                  "org": "my-org",
                  "owner_id": "${data.vcd_org_vdc.main.id}",
                  "prefix_length": 24,
                  "static_ip_pool": [
                    {
                      "end_address": "1.1.1.20",
                      "start_address": "1.1.1.10"
                    }
                  ]
                }
              references:
                owner_id: data.vcd_org_vdc.main.id
            - name: example
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "is_system": true,
                      "key": "foo",
                      "type": "MetadataStringValue",
                      "user_access": "PRIVATE",
                      "value": "bar"
                    },
                    {
                      "is_system": false,
                      "key": "myBool",
                      "type": "MetadataBooleanValue",
                      "user_access": "READWRITE",
                      "value": "true"
                    }
                  ]
                }
            - name: tf-mynet
              manifest: |-
                {
                  "name": "my-net",
                  "org": "my-org",
                  "vdc": "my-vdc"
                }
        argumentDocs:
            description: '- (Optional) An optional description of the network'
            dns_suffix: '- (Optional) A FQDN for the virtual machines on this network'
            dns1: '- (Optional) First DNS server to use.'
            dns2: '- (Optional) Second DNS server to use.'
            dual_stack_enabled: |-
                - (Optional; v3.10+) Enables Dual-Stack mode so that one can configure one
                IPv4 and one IPv6 networks. Note In such case IPv4 addresses must be used in gateway,
                prefix_length and static_ip_pool while IPv6 addresses in secondary_gateway,
                secondary_prefix_length and secondary_static_ip_pool fields.
            end_address: '- (Required) The final address in the IP Range'
            gateway: '- (Required) The gateway for this network (e.g. 192.168.1.1, 2002:0:0:1234:abcd:ffff:c0a7:121)'
            guest_vlan_allowed: |-
                - (Optional) Set to true if network should allow guest VLAN tagging.
                Default false.
            is_shared: |-
                - (Optional) NSX-V only. Defines if this network is shared between multiple VDCs
                in the Org.  Defaults to false.
            is_system: '- (Required) Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            key: '- (Required) Key of this metadata entry.'
            metadata: '- (Deprecated; v3.6+) Use metadata_entry instead. Key value map of metadata to assign to this network. Not supported if the network belongs to a VDC Group.'
            metadata_entry: '- (Optional; v3.8+) A set of metadata entries to assign. See Metadata section for details.'
            name: '- (Required) A unique name for the network'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations
            owner_id: |-
                - (Optional) VDC or VDC Group ID. Always takes precedence over vdc fields (in resource
                and inherited from provider configuration)
            prefix_length: '- (Required) The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).'
            secondary_gateway: '- (Optional; v3.10+) IPv6 gateway when Dual-Stack mode is enabled'
            secondary_prefix_length: |-
                - (Optional; v3.10+) IPv6 prefix length when Dual-Stack mode is
                enabled
            secondary_static_ip_pool: |-
                - (Optional; v3.10+) One or more IPv6 static
                pools when Dual-Stack mode is enabled
            start_address: '- (Required) The first address in the IP Range'
            static_ip_pool: |-
                - (Optional) A range of IPs permitted to be used as static IPs for
                virtual machines; see IP Pools below for details.
            type: '- (Required) Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.'
            user_access: '- (Required) User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            value: '- (Required) Value of this metadata entry.'
            vdc: |-
                - (Deprecated; Optional) The name of VDC to use. Deprecated  in favor of new field
                owner_id which supports VDC and VDC Group IDs.
        importStatements: []
    vcd_network_pool:
        subCategory: ""
        description: Provides a VMware Cloud Director Network Pool. This can be used to create, modify, and delete a VCD Network Pool
        name: vcd_network_pool
        title: vcd_network_pool
        examples:
            - name: npool
              manifest: |-
                {
                  "backing": [
                    {
                      "transport_zone": [
                        {
                          "name": "nsx-overlay-transportzone"
                        }
                      ]
                    }
                  ],
                  "description": "New network pool",
                  "name": "new-network-pool",
                  "network_provider_id": "${data.vcd_nsxt_manager.mgr.id}",
                  "type": "GENEVE"
                }
              references:
                network_provider_id: data.vcd_nsxt_manager.mgr.id
            - name: npool
              manifest: |-
                {
                  "backing": [
                    {
                      "distributed_switch": [
                        {
                          "name": "NsxTDVS"
                        }
                      ],
                      "range_id": [
                        {
                          "end_id": 200,
                          "start_id": 101
                        }
                      ]
                    }
                  ],
                  "description": "New VLAN network pool",
                  "name": "my-vlan-network-pool",
                  "network_provider_id": "${data.vcd_vcenter.vc1.id}",
                  "type": "VLAN"
                }
              references:
                network_provider_id: data.vcd_vcenter.vc1.id
            - name: npool
              manifest: |-
                {
                  "backing": [
                    {
                      "port_group": [
                        {
                          "name": "TestbedPG"
                        }
                      ]
                    }
                  ],
                  "description": "New Port Group network pool",
                  "name": "my-pg-network-pool",
                  "network_provider_id": "${data.vcd_vcenter.vc1.id}",
                  "type": "PORTGROUP_BACKED"
                }
              references:
                network_provider_id: data.vcd_vcenter.vc1.id
            - name: npool-1
              manifest: |-
                {
                  "backing_selection_constraint": "use-when-only-one",
                  "description": "network pool without explicit port group",
                  "name": "new-network-pool",
                  "network_provider_id": "${data.vcd_vcenter.vc1.id}",
                  "type": "PORTGROUP_BACKED"
                }
              references:
                network_provider_id: data.vcd_vcenter.vc1.id
            - name: npool-2
              manifest: |-
                {
                  "backing_selection_constraint": "use-first-available",
                  "description": "network pool without explicit transport zone",
                  "name": "new-network-pool",
                  "network_provider_id": "${data.vcd_nsxt_manager.mgr.id}",
                  "type": "GENEVE"
                }
              references:
                network_provider_id: data.vcd_nsxt_manager.mgr.id
            - name: net_pool
              manifest: |-
                {
                  "name": "my-net-pool"
                }
        argumentDocs:
            backing: '- (Optional) The components used by the network pool. See Backing below for details'
            backing_selection_constraint: '- (Optional) Define how the backing components are considered. It should be one of the following:'
            description: '- (Optional) Description of the network pool'
            distributed_switch: '- (Optional) A backing structure used for VLAN network pool'
            end_id: '- (Required) The last ID of the range'
            id: '- (Computed) The ID of the backing element'
            name: '- (Required) Unique name of network pool'
            network_provider_id: '- (Required) Id of the network provider (either vCenter or NSX-T manager)'
            network_provider_name: Name of the network provider
            network_provider_type: Type of network provider
            port_group: '- (Optional) A list of backing structure used for PORTGROUP_BACKED network pool'
            promiscuous_mode: Whether the network pool is in promiscuous mode
            range_id: '- (Optional) A list of range IDs, required with VLAN network pools'
            start_id: '- (Required) The first ID of the range'
            status: Status of the network pool
            total_backings_count: Total number of backings
            transport_zone: '- (Optional) A backing structure used for GENEVE network pool'
            type: '- (Required) Type of the network pool (one of GENEVE, VLAN, PORTGROUP_BACKED)'
            use-explicit-name: (Default) The backing components must be named explicitly;
            use-first-available: Use the first available backing component.
            use-when-only-one: The automatically selected backing component will be used if there is only one available;
            used_backings_count: Number of used backings
        importStatements: []
    vcd_network_routed:
        subCategory: ""
        description: Provides a VMware Cloud Director Org VDC routed Network. This can be used to create, modify, and delete internal networks for vApps to connect.
        name: vcd_network_routed
        title: vcd_network_routed
        examples:
            - name: net
              manifest: |-
                {
                  "dhcp_pool": [
                    {
                      "end_address": "10.10.0.100",
                      "start_address": "10.10.0.2"
                    }
                  ],
                  "edge_gateway": "Edge Gateway Name",
                  "gateway": "10.10.0.1",
                  "name": "my-net",
                  "org": "my-org",
                  "static_ip_pool": [
                    {
                      "end_address": "10.10.0.254",
                      "start_address": "10.10.0.152"
                    }
                  ],
                  "vdc": "my-vdc"
                }
            - name: example
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "is_system": true,
                      "key": "foo",
                      "type": "MetadataStringValue",
                      "user_access": "PRIVATE",
                      "value": "bar"
                    },
                    {
                      "is_system": false,
                      "key": "myBool",
                      "type": "MetadataBooleanValue",
                      "user_access": "READWRITE",
                      "value": "true"
                    }
                  ]
                }
            - name: tf-mynet
              manifest: |-
                {
                  "edge_gateway": "COMPUTE",
                  "gateway": "COMPUTE",
                  "name": "my-net",
                  "org": "my-org",
                  "vdc": "my-vdc"
                }
        argumentDocs:
            description: '- (Optional v2.6+) An optional description of the network'
            dhcp_pool: |-
                - (Optional) A range of IPs to issue to virtual machines that don't
                have a static IP; see IP Pools below for details.
            dns_suffix: '- (Optional) A FQDN for the virtual machines on this network'
            dns1: '- (Optional) First DNS server to use.'
            dns2: '- (Optional) Second DNS server to use.'
            edge_gateway: '- (Required) The name of the edge gateway'
            end_address: '- (Required) The final address in the IP Range'
            gateway: (Required) The gateway for this network
            interface_type: |-
                - (Optional v2.6+) An interface for the network. One of internal (default), subinterface,
                distributed (requires the edge gateway to support distributed networks)
            is_system: '- (Required) Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            key: '- (Required) Key of this metadata entry.'
            max_lease_time: '- (Optional) The maximum DHCP lease time to use. Defaults to 7200.'
            metadata: '- (Deprecated; v3.6+) Use metadata_entry instead. Key value map of metadata to assign to this network.'
            metadata_entry: '- (Optional; v3.8+) A set of metadata entries to assign. See Metadata section for details.'
            name: '- (Required) A unique name for the network'
            netmask: '- (Optional) The netmask for the new network. Defaults to 255.255.255.0'
            org: |-
                - (Optional; v2.0+) The name of organization to use, optional if defined at provider level. Useful when
                connected as sysadmin working across different organisations
            shared: |-
                - (Optional) Defines if this network is shared between multiple VDCs
                in the Org.  Defaults to false.
            start_address: '- (Required) The first address in the IP Range'
            static_ip_pool: |-
                - (Optional) A range of IPs permitted to be used as static IPs for
                virtual machines; see IP Pools below for details.
            type: '- (Required) Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.'
            user_access: '- (Required) User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            value: '- (Required) Value of this metadata entry.'
            vdc: '- (Optional; v2.0+) The name of VDC to use, optional if defined at provider level'
        importStatements: []
    vcd_network_routed_v2:
        subCategory: ""
        description: Provides a VMware Cloud Director Org VDC routed Network. This can be used to create, modify, and delete routed VDC networks (backed by NSX-T or NSX-V).
        name: vcd_network_routed_v2
        title: vcd_network_routed_v2
        examples:
            - name: nsxt-backed
              manifest: |-
                {
                  "description": "My routed Org VDC network backed by NSX-T",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "gateway": "1.1.1.1",
                  "guest_vlan_allowed": true,
                  "name": "nsxt-routed 1",
                  "org": "my-org",
                  "prefix_length": 24,
                  "static_ip_pool": [
                    {
                      "end_address": "1.1.1.20",
                      "start_address": "1.1.1.10"
                    },
                    {
                      "end_address": "1.1.1.103",
                      "start_address": "1.1.1.100"
                    }
                  ]
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
            - name: parent-network
              manifest: |-
                {
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "gateway": "7.1.1.1",
                  "guest_vlan_allowed": false,
                  "name": "nsxt-routed-dhcp",
                  "prefix_length": 24,
                  "static_ip_pool": [
                    {
                      "end_address": "7.1.1.20",
                      "start_address": "7.1.1.10"
                    }
                  ]
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
              dependencies:
                vcd_nsxt_network_dhcp.pools: |-
                    {
                      "org_network_id": "${vcd_network_routed_v2.parent-network.id}",
                      "pool": [
                        {
                          "end_address": "7.1.1.110",
                          "start_address": "7.1.1.100"
                        },
                        {
                          "end_address": "7.1.1.112",
                          "start_address": "7.1.1.111"
                        }
                      ]
                    }
            - name: ipv6-dualstack
              manifest: |-
                {
                  "dual_stack_enabled": true,
                  "edge_gateway_id": "${vcd_nsxt_edgegateway.nsxt-edge.id}",
                  "gateway": "192.168.1.1",
                  "name": "Dual Stack Routed Network",
                  "prefix_length": 24,
                  "secondary_gateway": "2002:0:0:1234:abcd:ffff:c0a6:121",
                  "secondary_prefix_length": 124,
                  "secondary_static_ip_pool": [
                    {
                      "end_address": "2002:0:0:1234:abcd:ffff:c0a6:124",
                      "start_address": "2002:0:0:1234:abcd:ffff:c0a6:122"
                    }
                  ],
                  "static_ip_pool": [
                    {
                      "end_address": "192.168.1.20",
                      "start_address": "192.168.1.10"
                    }
                  ]
                }
              references:
                edge_gateway_id: vcd_nsxt_edgegateway.nsxt-edge.id
            - name: ipv6
              manifest: |-
                {
                  "edge_gateway_id": "${vcd_nsxt_edgegateway.nsxt-edge.id}",
                  "gateway": "2002:0:0:1234:abcd:ffff:c0a7:121",
                  "name": "IPv6 network",
                  "prefix_length": 124,
                  "static_ip_pool": [
                    {
                      "end_address": "2002:0:0:1234:abcd:ffff:c0a7:124",
                      "start_address": "2002:0:0:1234:abcd:ffff:c0a7:122"
                    }
                  ]
                }
              references:
                edge_gateway_id: vcd_nsxt_edgegateway.nsxt-edge.id
            - name: nsxv-backed
              manifest: |-
                {
                  "description": "NSX-V routed network",
                  "edge_gateway_id": "${data.vcd_edgegateway.existing.id}",
                  "gateway": "1.1.1.1",
                  "interface_type": "subinterface",
                  "name": "nsxv-routed-network",
                  "org": "my-org",
                  "prefix_length": 24,
                  "static_ip_pool": [
                    {
                      "end_address": "1.1.1.20",
                      "start_address": "1.1.1.10"
                    }
                  ]
                }
              references:
                edge_gateway_id: data.vcd_edgegateway.existing.id
            - name: example
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "is_system": true,
                      "key": "foo",
                      "type": "MetadataStringValue",
                      "user_access": "PRIVATE",
                      "value": "bar"
                    },
                    {
                      "is_system": false,
                      "key": "myBool",
                      "type": "MetadataBooleanValue",
                      "user_access": "READWRITE",
                      "value": "true"
                    }
                  ]
                }
            - name: tf-mynet
              manifest: |-
                {
                  "name": "my-net",
                  "org": "my-org"
                }
        argumentDocs:
            description: '- (Optional) An optional description of the network'
            dns_suffix: '- (Optional) A FQDN for the virtual machines on this network'
            dns1: '- (Optional) First DNS server to use.'
            dns2: '- (Optional) Second DNS server to use.'
            dual_stack_enabled: |-
                - (Optional; v3.10+) Enables Dual-Stack mode so that one can configure one
                IPv4 and one IPv6 networks. Note In such case IPv4 addresses must be used in gateway,
                prefix_length and static_ip_pool while IPv6 addresses in secondary_gateway,
                secondary_prefix_length and secondary_static_ip_pool fields.
            edge_gateway_id: '- (Required) The ID of the Edge Gateway (NSX-V or NSX-T)'
            end_address: '- (Required) The final address in the IP Range'
            gateway: '- (Required) The gateway for this network (e.g. 192.168.1.1, 2002:0:0:1234:abcd:ffff:c0a7:121)'
            guest_vlan_allowed: |-
                - (Optional) Set to true if network should allow guest VLAN tagging.
                Default false.
            interface_type: |-
                - (Optional) An interface for the network. One of internal (default),
                subinterface, distributed, non_distributed (requires the Edge Gateway to support distributed
                networks). NSX-T supports only internal and non_distributed (v3.14+, requires Edge Gateway
                to have non-distributed routing
                enabled).
            is_system: '- (Required) Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            key: '- (Required) Key of this metadata entry.'
            metadata: '- (Deprecated; v3.6+) Use metadata_entry instead. Key value map of metadata to assign to this network. Not supported if the owner edge gateway belongs to a VDC Group.'
            metadata_entry: '- (Optional; v3.8+) A set of metadata entries to assign. See Metadata section for details.'
            name: '- (Required) A unique name for the network'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful when
                connected as sysadmin working across different organisations
            prefix_length: '- (Required) The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).'
            route_advertisement_enabled: |-
                - (Optional; v3.12+, VCD 10.4.1+) Enables route advertising for
                this network. Note This requires Edge Gateway to use IP Spaces and IP Space must have route
                advertisement
                enabled.
            secondary_gateway: '- (Optional; v3.10+) IPv6 gateway when Dual-Stack mode is enabled'
            secondary_prefix_length: |-
                - (Optional; v3.10+) IPv6 prefix length when Dual-Stack mode is
                enabled
            secondary_static_ip_pool: |-
                - (Optional; v3.10+) One or more IPv6 static
                pools when Dual-Stack mode is enabled
            start_address: '- (Required) The first address in the IP Range'
            static_ip_pool: |-
                - (Optional) A range of IPs permitted to be used as static IPs for
                virtual machines; see IP Pools below for details.
            type: '- (Required) Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.'
            user_access: '- (Required) User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            value: '- (Required) Value of this metadata entry.'
            vdc: |-
                - (Deprecated; Optional) The name of VDC to use. v3.6+ inherits parent VDC or VDC Group
                from edge_gateway_id)
        importStatements: []
    vcd_nsxt_alb_cloud:
        subCategory: ""
        description: Provides a resource to manage ALB Clouds for Providers. An NSX-T Cloud is a service provider-level construct that consists of an NSX-T Manager and an NSX-T Data Center transport zone.
        name: vcd_nsxt_alb_cloud
        title: vcd_nsxt_alb_cloud
        examples:
            - name: first
              manifest: |-
                {
                  "controller_id": "${data.vcd_nsxt_alb_controller.main.id}",
                  "description": "ALB Cloud",
                  "importable_cloud_id": "${data.vcd_nsxt_alb_importable_cloud.cld.id}",
                  "name": "nsxt-cloud",
                  "network_pool_id": "${data.vcd_nsxt_alb_importable_cloud.cld.network_pool_id}"
                }
              references:
                controller_id: data.vcd_nsxt_alb_controller.main.id
                importable_cloud_id: data.vcd_nsxt_alb_importable_cloud.cld.id
                network_pool_id: data.vcd_nsxt_alb_importable_cloud.cld.network_pool_id
        argumentDocs:
            controller_id: '- (Required) ALB Controller ID'
            description: '- (Optional) An optional description ALB Cloud'
            health_message: '- DetailedHealthMessage contains detailed message on the health of the Cloud'
            health_status: '- HealthStatus contains status of the Load Balancer Cloud. Possible values are:'
            importable_cloud_id: |-
                - (Required) Importable Cloud ID. Can be looked up using vcd_nsxt_alb_importable_cloud data
                source
            name: '- (Required) A name for ALB Cloud'
            network_pool_id: |-
                - (Required) Network pool ID for ALB Cloud. Can be looked up using vcd_nsxt_alb_importable_cloud data
                source
            network_pool_name: '- Network Pool Name used by the Cloud'
        importStatements: []
    vcd_nsxt_alb_controller:
        subCategory: ""
        description: Provides a resource to manage ALB Controller for Providers. It helps to integrate VMware Cloud Director with Avi Load Balancer deployment. Controller instances are registered with VMware Cloud Director instance. Controller instances serve as a central control plane for the load-balancing services provided by Avi Load Balancer.
        name: vcd_nsxt_alb_controller
        title: vcd_nsxt_alb_controller
        examples:
            - name: first
              manifest: |-
                {
                  "description": "first alb controller",
                  "license_type": "ENTERPRISE",
                  "name": "aviController1",
                  "password": "CHANGE-ME",
                  "url": "https://my.controller",
                  "username": "admin"
                }
        argumentDocs:
            description: '- (Optional) An optional description ALB Controller'
            license_type: '- (Optional) License type of ALB Controller (ENTERPRISE or BASIC)'
            name: '- (Required) A name for ALB Controller'
            password: '- (Required) The password for ALB Controller. Password will not be refreshed.'
            url: '- (Required) The URL of ALB Controller'
            username: '- (Required) The username for ALB Controller'
            version: '- ALB Controller version (e.g. 20.1.3)'
        importStatements: []
    vcd_nsxt_alb_edgegateway_service_engine_group:
        subCategory: ""
        description: Provides a resource to manage ALB Service Engine Group assignment to Edge Gateway.
        name: vcd_nsxt_alb_edgegateway_service_engine_group
        title: vcd_nsxt_alb_edgegateway_service_engine_group
        examples:
            - name: first
              manifest: |-
                {
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "max_virtual_services": 100,
                  "reserved_virtual_services": 30,
                  "service_engine_group_id": "${data.vcd_nsxt_alb_service_engine_group.first.id}"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
                service_engine_group_id: data.vcd_nsxt_alb_service_engine_group.first.id
        argumentDocs:
            deployed_virtual_services: '-  Number of deployed Virtual Services on this Service Engine Group.'
            edge_gateway_id: |-
                - (Required) An ID of NSX-T Edge Gateway. Can be looked up using
                vcd_nsxt_edgegateway data source.
            max_virtual_services: |-
                - (Optional) Maximum amount of Virtual Services to run on this Service Engine Group. Only for
                Shared Service Engine Groups.
            org: '- (Optional) The name of organization to which the edge gateway belongs. Optional if defined at provider level.'
            reserved_virtual_services: |-
                - (Optional) Number of reserved Virtual Services for this Edge Gateway. Only for Shared
                Service Engine Groups.
            service_engine_group_id: |-
                - (Required) An ID of NSX-T Service Engine Group. Can be looked up using
                vcd_nsxt_alb_service_engine_group data
                source.
        importStatements: []
    vcd_nsxt_alb_pool:
        subCategory: ""
        description: Provides a resource to manage ALB Pools for particular NSX-T Edge Gateway. Pools maintain the list of servers assigned to them and perform health monitoring, load balancing, persistence. A pool may only be used or referenced by only one virtual service at a time.
        name: vcd_nsxt_alb_pool
        title: vcd_nsxt_alb_pool
        examples:
            - name: first-pool
              manifest: |-
                {
                  "edge_gateway_id": "${vcd_nsxt_alb_settings.test.edge_gateway_id}",
                  "member": [
                    {
                      "ip_address": "192.168.1.1"
                    }
                  ],
                  "name": "tiny-pool",
                  "org": "sample"
                }
              references:
                edge_gateway_id: vcd_nsxt_alb_settings.test.edge_gateway_id
            - name: first-pool
              manifest: |-
                {
                  "algorithm": "LEAST_LOAD",
                  "default_port": 9000,
                  "edge_gateway_id": "${vcd_nsxt_alb_settings.test.edge_gateway_id}",
                  "graceful_timeout_period": "0",
                  "health_monitor": [
                    {
                      "type": "PING"
                    }
                  ],
                  "member": [
                    {
                      "enabled": false,
                      "ip_address": "192.168.1.1",
                      "port": 8000,
                      "ratio": 2
                    },
                    {
                      "ip_address": "192.168.1.2",
                      "ratio": 4
                    }
                  ],
                  "name": "configured-pool",
                  "org": "sample",
                  "passive_monitoring_enabled": false,
                  "persistence_profile": [
                    {
                      "type": "CLIENT_IP"
                    }
                  ]
                }
              references:
                edge_gateway_id: vcd_nsxt_alb_settings.test.edge_gateway_id
            - name: sample-pool
              manifest: |-
                {
                  "ca_certificate_ids": [
                    "${data.vcd_library_certificate.sample-cert.id}"
                  ],
                  "cn_check_enabled": true,
                  "domain_names": [
                    "domain1",
                    "domain2"
                  ],
                  "edge_gateway_id": "${vcd_nsxt_alb_settings.test.edge_gateway_id}",
                  "name": "sample-cert-pool",
                  "org": "sample"
                }
              references:
                edge_gateway_id: vcd_nsxt_alb_settings.test.edge_gateway_id
        argumentDocs:
            APP_COOKIE: '- Load Balancer reads existing server cookies or URI embedded data such as JSessionID. Cookie name must be provided as value'
            CLIENT_IP: '- The clients IP is used as the identifier and mapped to the server'
            CUSTOM_HTTP_HEADER: '- Custom, static mappings of header values to specific servers are used. Header name must be provided as value'
            HTTP_COOKIE: '- Load Balancer inserts a cookie into HTTP responses. Cookie name must be provided as value'
            TLS: '- Information is embedded in the client''s SSL/TLS ticket ID. This will use default system profile System-Persistence-TLS'
            algorithm: |-
                - (Optional) Optional algorithm for choosing pool members (default LEAST_CONNECTIONS). Other options
                contain ROUND_ROBIN, CONSISTENT_HASH (uses Source IP Address hash), FASTEST_RESPONSE, LEAST_LOAD,
                FEWEST_SERVERS, RANDOM, FEWEST_TASKS, CORE_AFFINITY
            associated_virtual_service_ids: '- A set of associated Virtual Service IDs'
            associated_virtual_services: '- A set of associated Virtual Service names'
            ca_certificate_ids: |-
                - (Optional) A set of CA Certificates to be used when validating certificates presented by the
                pool members. Can be looked up using
                vcd_library_certificate data source
            cn_check_enabled: |-
                - (Optional) Specifies whether to check the common name of the certificate presented by the pool
                member
            default_port: |-
                - (Optional) Default Port defines destination server port used by the traffic sent to the member
                (default 80)
            description: '- (Optional) An optional description ALB Pool'
            detailed_health_message: '- human-readable member health description.'
            domain_names: |-
                - (Optional) A set of domain names which will be used to verify the common names or subject alternative
                names presented by the pool member certificates. It is performed only when common name check cn_check_enabled is
                enabled
            edge_gateway_id: |-
                - (Required) An ID of NSX-T Edge Gateway. Can be looked up using
                vcd_nsxt_edgegateway data source
            enabled: '- (Optional) Boolean value if ALB Pool should be enabled (default true)'
            enabled_member_count: '- Number of enabled members defined in the Pool'
            graceful_timeout_period: |-
                (Optional) Maximum time in minutes to gracefully disable pool member (default 1). Special
                values are 0 (immediate) and -1 (infinite)
            health_message: '- Health message of ALB Pool'
            health_monitor: |-
                - (Optional) A block to define health monitor. Multiple can be used. See Health
                monitor and example for usage details.
            health_status: '- one of UP, DOWN, DISABLED.'
            ip_address: '- (Required) IP address of pool member.'
            marked_down_by: '- A set of health monitors that marked the member as DOWN'
            member: |-
                - (Optional) A block to define pool members. Multiple can be used. See
                Member and example for usage details. Note only one of member,
                member_group_id can be specified.
            member_count: '- Total number of members defined in the Pool'
            member_group_id: |-
                - (Optional; v3.9+, VCD 10.4.1+) A reference to NSX-T IP Set (vcd_nsxt_ip_set).
                Note only one of member, member_group_id can be specified.
            name: '- (Required) A name for ALB Pool'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            passive_monitoring_enabled: |-
                (Optional) defines if client traffic should be used to check if pool member is up or down
                (default true)
            persistence_profile: |-
                - (Optional) Persistence profile will ensure that the same user sticks to the same server for a
                desired duration of time. If the persistence profile is unmanaged by Cloud Director, updates that leave the values
                unchanged will continue to use the same unmanaged profile. Any changes made to the persistence profile will cause
                Cloud Director to switch the pool to a profile managed by Cloud Director. See Persistence
                profile and example for usage details.
            port: '- (Optional) Port for receiving traffic - overrides the root value default_port for individual members'
            ratio: (Optional) Ratio of selecting eligible servers in the pool (default 1)
            ssl_enabled: (Optional; v3.11+) Enables SSL - Will be turned on automatically when CA certificates are used
            system_defined: '- A boolean flag if the Health monitor is system defined.'
            type: '(Required) Type of persistence profile. One of:'
            up_member_count: '- Number of members defined in the Pool that are accepting traffic'
            value: '(Optional) is required for some type values: HTTP_COOKIE, CUSTOM_HTTP_HEADER, APP_COOKIE'
        importStatements: []
    vcd_nsxt_alb_service_engine_group:
        subCategory: ""
        description: Provides a resource to manage ALB Service Engine Groups. A Service Engine Group is an isolation domain that also defines shared service engine properties, such as size, network access, and failover. Resources in a service engine group can be used for different virtual services, depending on your tenant needs. These resources cannot be shared between different service engine groups.
        name: vcd_nsxt_alb_service_engine_group
        title: vcd_nsxt_alb_service_engine_group
        examples:
            - name: first
              manifest: |-
                {
                  "alb_cloud_id": "${vcd_nsxt_alb_cloud.first.id}",
                  "description": "Service Engine for Terraform documentation",
                  "importable_service_engine_group_name": "Default-Group",
                  "name": "demo-service-engine",
                  "reservation_model": "SHARED",
                  "sync_on_refresh": false
                }
              references:
                alb_cloud_id: vcd_nsxt_alb_cloud.first.id
              dependencies:
                vcd_nsxt_alb_cloud.first: |-
                    {
                      "controller_id": "${vcd_nsxt_alb_controller.first.id}",
                      "description": "first alb cloud",
                      "importable_cloud_id": "${data.vcd_nsxt_alb_importable_cloud.cld.id}",
                      "name": "nsxt-cloud",
                      "network_pool_id": "${data.vcd_nsxt_alb_importable_cloud.cld.network_pool_id}"
                    }
                vcd_nsxt_alb_controller.first: |-
                    {
                      "description": "first alb controller",
                      "license_type": "ENTERPRISE",
                      "name": "aviController1",
                      "password": "Welcome@1234",
                      "url": "https://controller.myXZ",
                      "username": "admin"
                    }
        argumentDocs:
            alb_cloud_id: |-
                - (Required) A reference ALB Cloud. Can be looked up using vcd_nsxt_alb_cloud resource or data
                source
            deployed_virtual_services: '- Number of deployed virtual services'
            description: '- (Optional) An optional description ALB Service Engine Group'
            ha_mode: 'defines High Availability Mode for Service Engine Group. One off:'
            importable_service_engine_group_name: '- (Required) Name of available Service Engine Group in ALB'
            max_virtual_services: '- Maximum number of virtual services this ALB Service Engine Group can run'
            name: '- (Required) A name for ALB Service Engine Group'
            overallocated: '- Boolean value stating if there are more deployed virtual services than allocated ones'
            reservation_model: '- (Required) Definition if the Service Engine Group is DEDICATED or SHARED'
            reserved_virtual_services: '- Number of reserved virtual services'
            supported_feature_set: '- (Optional; v3.7+) Feature set of this ALB Service Engine Group (STANDARD or PREMIUM)'
            sync_on_refresh: |-
                (Optional) - A special argument that is not passed to VCD, but alters behaviour of this resource so
                that it performs a Sync operation on every Terraform refresh. Note this may impact refresh performance, but should
                ensure up-to-date information is read. Default is false.
        importStatements: []
    vcd_nsxt_alb_settings:
        subCategory: ""
        description: Provides a resource to manage ALB General Settings for particular NSX-T Edge Gateway. One can activate or deactivate ALB for a defined Edge Gateway.
        name: vcd_nsxt_alb_settings
        title: vcd_nsxt_alb_settings
        examples:
            - name: org1
              manifest: |-
                {
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "is_active": true,
                  "org": "my-org"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
            - name: org1
              manifest: |-
                {
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "ipv6_service_network_specification": "2001:0db8:85a3:0000:0000:8a2e:0370:7334/120",
                  "is_active": true,
                  "is_transparent_mode_enabled": true,
                  "org": "my-org",
                  "service_network_specification": "10.10.255.225/27"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
        argumentDocs:
            edge_gateway_id: |-
                - (Required) An ID of NSX-T Edge Gateway. Can be looked up using
                vcd_nsxt_edgegateway data source
            ipv6_service_network_specification: |-
                (Optional; v3.9+, VCD 10.4.0+) The IPv6 network
                definition in CIDR format which will be used by Load Balancer service in the Edge Gateway. All the
                load balancer service engines associated with the Service Engine Group will be attached to this
                network. This field cannot be updated
            is_active: |-
                - (Required) Boolean value true or false if ALB is enabled. Note Delete operation of this resource
                will set it to false
            is_transparent_mode_enabled: |-
                - (Optional; v3.9+, VCD 10.4.1+) When enabled, it allows to
                configure Preserve Client IP on a Virtual Service
            org: '- (Optional) The name of organization to which the edge gateway belongs. Optional if defined at provider level.'
            service_network_specification: |-
                - (Optional) Gateway CIDR format which will be used by Load
                Balancer service. All the load balancer service engines associated with the Service Engine Group
                will be attached to this network. The subnet prefix length must be 25. If nothing is set and
                ipv6_service_network_specification is not used, the default is 192.168.255.125/25. This
                field cannot be updated
            supported_feature_set: '- (Optional; v3.7+) Feature set of this Edge Gateway if ALB is enabled (STANDARD or PREMIUM)'
        importStatements: []
    vcd_nsxt_alb_virtual_service:
        subCategory: ""
        description: Provides a resource to manage ALB Virtual services for particular NSX-T Edge Gateway. A virtual service advertises an IP address and ports to the external world and listens for client traffic. When a virtual service receives traffic, it directs it to members in ALB Pool.
        name: vcd_nsxt_alb_virtual_service
        title: vcd_nsxt_alb_virtual_service
        examples:
            - name: test
              manifest: |-
                {
                  "application_profile_type": "HTTP",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "name": "new-virtual-service",
                  "org": "my-org",
                  "pool_id": "${vcd_nsxt_alb_pool.test.id}",
                  "service_engine_group_id": "${vcd_nsxt_alb_edgegateway_service_engine_group.assignment.service_engine_group_id}",
                  "service_port": [
                    {
                      "start_port": 80,
                      "type": "TCP_PROXY"
                    }
                  ],
                  "virtual_ip_address": "${tolist(data.vcd_nsxt_edgegateway.existing.subnet)[0].primary_ip}"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
                pool_id: vcd_nsxt_alb_pool.test.id
                service_engine_group_id: vcd_nsxt_alb_edgegateway_service_engine_group.assignment.service_engine_group_id
              dependencies:
                vcd_nsxt_alb_pool.test: |-
                    {
                      "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                      "name": "test-pool",
                      "org": "my-org"
                    }
            - name: test
              manifest: |-
                {
                  "application_profile_type": "L4_TLS",
                  "ca_certificate_id": "${data.vcd_library_certificate.org-cert-1.id}",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "name": "new-virtual-service",
                  "org": "my-org",
                  "pool_id": "${vcd_nsxt_alb_pool.test.id}",
                  "service_engine_group_id": "${vcd_nsxt_alb_edgegateway_service_engine_group.assignment.service_engine_group_id}",
                  "service_port": [
                    {
                      "ssl_enabled": true,
                      "start_port": 80,
                      "type": "TCP_PROXY"
                    },
                    {
                      "end_port": 85,
                      "ssl_enabled": true,
                      "start_port": 84,
                      "type": "TCP_PROXY"
                    },
                    {
                      "start_port": 87,
                      "type": "TCP_PROXY"
                    }
                  ],
                  "virtual_ip_address": "${tolist(data.vcd_nsxt_edgegateway.existing.subnet)[0].primary_ip}"
                }
              references:
                ca_certificate_id: data.vcd_library_certificate.org-cert-1.id
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
                pool_id: vcd_nsxt_alb_pool.test.id
                service_engine_group_id: vcd_nsxt_alb_edgegateway_service_engine_group.assignment.service_engine_group_id
              dependencies:
                vcd_nsxt_alb_pool.test: |-
                    {
                      "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                      "name": "test-pool",
                      "org": "my-org"
                    }
            - name: test
              manifest: |-
                {
                  "application_profile_type": "HTTP",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "is_transparent_mode_enabled": true,
                  "name": "new-virtual-service",
                  "org": "my-org",
                  "pool_id": "${vcd_nsxt_alb_pool.test.id}",
                  "service_engine_group_id": "${vcd_nsxt_alb_edgegateway_service_engine_group.assignment.service_engine_group_id}",
                  "service_port": [
                    {
                      "start_port": 80,
                      "type": "TCP_PROXY"
                    }
                  ],
                  "virtual_ip_address": "${tolist(data.vcd_nsxt_edgegateway.existing.subnet)[0].primary_ip}"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
                pool_id: vcd_nsxt_alb_pool.test.id
                service_engine_group_id: vcd_nsxt_alb_edgegateway_service_engine_group.assignment.service_engine_group_id
              dependencies:
                vcd_nsxt_alb_pool.test: |-
                    {
                      "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                      "member_group_id": "${data.vcd_nsxt_ip_set.frontend.id}",
                      "name": "test-pool",
                      "org": "my-org"
                    }
        argumentDocs:
            application_profile_type: '- (Required) One of HTTP, HTTPS, L4, L4_TLS.'
            ca_certificate_id: |-
                - (Optional) ID reference of CA certificate. Required when application_profile_type is HTTPS
                or L4_TLS
            description: '- (Optional) An optional description ALB Virtual Service'
            edge_gateway_id: |-
                - (Required) An ID of NSX-T Edge Gateway. Can be looked up using
                vcd_nsxt_edgegateway data source
            end_port: (Optional) Only required to specify port range and is not needed for single port values
            ipv6_virtual_ip_address: '- (Optional; v3.10+, VCD 10.4.0+) IPv6 Address for the service to listen on.'
            is_transparent_mode_enabled: |-
                - (Optional; v3.9+, VCD 10.4.1+) Preserves Client IP on a
                Virtual Service. Note - the following criteria must be matched to make transparent mode work:
            name: '- (Required) A name for ALB Virtual Service'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            pool_id: |-
                - (Required) A reference to ALB Pool. Can be looked up using vcd_nsxt_alb_pool resource or data
                source
            service_engine_group_id: |-
                - (Required) A reference to ALB Service Engine Group. Can be looked up using
                vcd_nsxt_alb_edgegateway_service_engine_group resource or data source
            service_port: |-
                - (Required) A block to define port, port range and traffic type. Multiple can be used. See
                service_port and example for usage details.
            ssl_enabled: (Optional) Must be enabled if CA certificate is to be used for this port. Default false
            start_port: (Required) Starting port in the range or exact port number
            type: (Required) One of TCP_PROXY, TCP_FAST_PATH, UDP_FAST_PATH
            virtual_ip_address: '- (Required) IP Address for the service to listen on.'
        importStatements: []
    vcd_nsxt_alb_virtual_service_http_req_rules:
        subCategory: ""
        description: Provides a resource to manage ALB Service Engine Groups policies for HTTP requests. HTTP request rules modify requests before they are either forwarded to the application, used as a basis for content switching, or discarded.
        name: vcd_nsxt_alb_virtual_service_http_req_rules
        title: vcd_nsxt_alb_virtual_service_http_req_rules
        examples:
            - name: example
              manifest: |-
                {
                  "rule": [
                    {
                      "actions": [
                        {
                          "rewrite_url": [
                            {
                              "existing_path": "/123",
                              "host_header": "X-HOST-HEADER",
                              "keep_query": true,
                              "query": "rewrite"
                            }
                          ]
                        }
                      ],
                      "active": true,
                      "match_criteria": [
                        {
                          "client_ip_address": [
                            {
                              "criteria": "IS_NOT_IN",
                              "ip_addresses": [
                                "1.1.1.1",
                                "2.2.2.2"
                              ]
                            }
                          ],
                          "cookie": [
                            {
                              "criteria": "DOES_NOT_END_WITH",
                              "name": "does-not-name",
                              "value": "does-not-value"
                            }
                          ],
                          "http_methods": [
                            {
                              "criteria": "IS_IN",
                              "methods": [
                                "COPY",
                                "HEAD"
                              ]
                            }
                          ],
                          "path": [
                            {
                              "criteria": "CONTAINS",
                              "paths": [
                                "/123",
                                "/234"
                              ]
                            }
                          ],
                          "protocol_type": "HTTP",
                          "query": [
                            "546",
                            "666"
                          ],
                          "request_headers": [
                            {
                              "criteria": "DOES_NOT_BEGIN_WITH",
                              "name": "X",
                              "values": [
                                "value1",
                                "value2"
                              ]
                            },
                            {
                              "criteria": "DOES_NOT_EQUAL",
                              "name": "Y-DOES-NOT",
                              "values": [
                                "value1",
                                "value2"
                              ]
                            }
                          ],
                          "service_ports": [
                            {
                              "criteria": "IS_IN",
                              "ports": [
                                80,
                                81
                              ]
                            }
                          ]
                        }
                      ],
                      "name": "criteria-max-rewrite"
                    },
                    {
                      "actions": [
                        {
                          "modify_header": [
                            {
                              "action": "REMOVE",
                              "name": "X-REMOVE-HEADER"
                            },
                            {
                              "action": "ADD",
                              "name": "X-ADDED-HEADER",
                              "value": "value"
                            },
                            {
                              "action": "REPLACE",
                              "name": "X-EXISTING-HEADER",
                              "value": "new-value"
                            }
                          ]
                        }
                      ],
                      "active": true,
                      "match_criteria": [
                        {
                          "client_ip_address": [
                            {
                              "criteria": "IS_NOT_IN",
                              "ip_addresses": [
                                "1.1.1.1",
                                "2.2.2.2"
                              ]
                            }
                          ]
                        }
                      ],
                      "name": "other"
                    }
                  ],
                  "virtual_service_id": "${data.vcd_nsxt_alb_virtual_service.test.id}"
                }
              references:
                virtual_service_id: data.vcd_nsxt_alb_virtual_service.test.id
        argumentDocs:
            action: '- (Required) One of ADD, REMOVE, REPLACE'
            actions: '- (Required) A block of actions to perform with requests that match'
            active: '- (Optional) Defines if the rule is active. Default true'
            client_ip_address: '- (Optional) Match the rule based on client IP address rules'
            cookie: '- (Optional) A block'
            criteria: '- (Required) One of IS_IN, IS_NOT_IN'
            existing_path: '- (Required) Path to use for the rewritten URL'
            host: '- (Optional) Host, to which the request should be redirected'
            host_header: '- (Required) Host to use for the rewritten URL'
            http_methods: '- (Optional) Defines HTTP methods that should be matched'
            ip_addresses: '- (Required) A set of IP addresses to match'
            keep_query: '- (Optional) Boolean value to mark if query part be preserved or not'
            logging: '- (Optional) Defines if the requests that match should be logged. Default false'
            match_criteria: '- (Required) A block of criteria to match the requests'
            methods: |-
                - (Required) A set of HTTP methods from the list: GET, PUT, POST, DELETE,
                HEAD, OPTIONS, TRACE, CONNECT, PATCH, PROPFIND, PROPPATCH, MKCOL, COPY, MOVE,
                LOCK, UNLOCK
            modify_header: '- (Optional) An optional block of header modification actions'
            name: '- (Required) Name of the rule'
            path: '- (Optional)'
            paths: '- (Required) A set of patchs to match given criteria'
            port: |-
                - (Required) Destination port for redirect. Default is 80 for protocol HTTP, 443 for
                HTTPS
            ports: '- (Required) A set of ports to match'
            protocol: '- (Required) One of HTTP, HTTPS'
            protocol_type: '- (Optional) One of HTTP or HTTPS'
            query: '- (Optional) HTTP request query strings to match'
            redirect: '- (Optional) Redirects the request to different location'
            request_headers: '- (Optional) One or more blocks of request headers to match'
            rewrite_url: '- (Optional) URL Rewrite rules, at most one block'
            rule: '- (Required) One or more rule blocks with matching criteria and actions.'
            service_ports: '- (Optional) Match the rule based on service ports'
            status_code: '- (Required) Status code to use for redirect. One of 301, 302, 307'
            value: '- (Required) A cookie value to match'
            values: '- (Required) A set of strings values that should match header value'
            virtual_service_id: '- (Required) An ID of existing ALB Virtual Service.'
        importStatements: []
    vcd_nsxt_alb_virtual_service_http_resp_rules:
        subCategory: ""
        description: Provides a resource to manage ALB Service Engine Groups policies for HTTP responses. HTTP response rules can be used to to evaluate and modify the response and response attributes that the application returns.
        name: vcd_nsxt_alb_virtual_service_http_resp_rules
        title: vcd_nsxt_alb_virtual_service_http_resp_rules
        examples:
            - name: example
              manifest: |-
                {
                  "rule": [
                    {
                      "actions": [
                        {
                          "rewrite_location_header": [
                            {
                              "host": "another-host",
                              "keep_query": true,
                              "path": "/",
                              "port": 443,
                              "protocol": "HTTP"
                            }
                          ]
                        }
                      ],
                      "active": true,
                      "logging": true,
                      "match_criteria": [
                        {
                          "status_code": [
                            {
                              "criteria": "IS_NOT_IN",
                              "http_status_code": "200"
                            }
                          ]
                        }
                      ],
                      "name": "rule1"
                    },
                    {
                      "actions": [
                        {
                          "modify_header": [
                            {
                              "action": "REMOVE",
                              "name": "X-REMOVE-HEADER"
                            },
                            {
                              "action": "ADD",
                              "name": "X-ADDED-HEADER",
                              "value": "value"
                            }
                          ]
                        }
                      ],
                      "active": false,
                      "match_criteria": [
                        {
                          "client_ip_address": [
                            {
                              "criteria": "IS_NOT_IN",
                              "ip_addresses": [
                                "1.1.1.1",
                                "2.2.2.2"
                              ]
                            }
                          ],
                          "cookie": [
                            {
                              "criteria": "DOES_NOT_END_WITH",
                              "name": "does-not-name",
                              "value": "does-not-value"
                            }
                          ],
                          "http_methods": [
                            {
                              "criteria": "IS_IN",
                              "methods": [
                                "COPY",
                                "HEAD"
                              ]
                            }
                          ],
                          "location_header": [
                            {
                              "criteria": "DOES_NOT_EQUAL",
                              "values": [
                                "one",
                                "two"
                              ]
                            }
                          ],
                          "protocol_type": "HTTP",
                          "request_headers": [
                            {
                              "criteria": "DOES_NOT_BEGIN_WITH",
                              "name": "X",
                              "values": [
                                "value1",
                                "value2"
                              ]
                            },
                            {
                              "criteria": "DOES_NOT_EQUAL",
                              "name": "Y-DOES-NOT",
                              "values": [
                                "value1",
                                "value2"
                              ]
                            }
                          ],
                          "response_headers": [
                            {
                              "criteria": "CONTAINS",
                              "name": "X-CONTAINS-RESP-HEADER",
                              "values": [
                                "vone",
                                "vtwo"
                              ]
                            },
                            {
                              "criteria": "DOES_NOT_END_WITH",
                              "name": "-END",
                              "values": [
                                "asd",
                                "bsd"
                              ]
                            }
                          ],
                          "service_ports": [
                            {
                              "criteria": "IS_IN",
                              "ports": [
                                80,
                                81
                              ]
                            }
                          ],
                          "status_code": [
                            {
                              "criteria": "IS_NOT_IN",
                              "http_status_code": "200"
                            }
                          ]
                        }
                      ],
                      "name": "criteria-max-modify-header"
                    }
                  ],
                  "virtual_service_id": "${vcd_nsxt_alb_virtual_service.test.id}"
                }
              references:
                virtual_service_id: vcd_nsxt_alb_virtual_service.test.id
        argumentDocs:
            action: '- (Required) One of ADD, REMOVE, REPLACE'
            actions: '- (Required) A block of actions to perform with requests that match'
            active: '- (Optional) Defines if the rule is active. Default true'
            client_ip_address: '- (Optional) Match the rule based on client IP address rules'
            cookie: '- (Optional) A block'
            criteria: '- (Required) One of IS_IN, IS_NOT_IN'
            host: '- (Optional) Host, to which the request should be redirected'
            http_methods: '- (Optional) Defines HTTP methods that should be matched'
            http_status_code: '- (Required) HTTP status code or range (e.g. 200, 200-300)'
            ip_addresses: '- (Required) A set of IP addresses to match'
            keep_query: '- (Optional) Boolean value to mark if query part be preserved or not'
            location_header: '- (Optional)'
            logging: '- (Optional) Defines if the requests that match should be logged. Default false'
            match_criteria: '- (Required) A block of criteria to match the requests'
            methods: |-
                - (Required) A set of HTTP methods from the list: GET, PUT, POST, DELETE,
                HEAD, OPTIONS, TRACE, CONNECT, PATCH, PROPFIND, PROPPATCH, MKCOL, COPY, MOVE,
                LOCK, UNLOCK
            modify_header: '- (Optional) One or more blocks to perform actions on headers'
            name: '- (Required) Name of the rule'
            path: '- (Optional)'
            paths: '- (Required) A set of patchs to match given criteria'
            port: '- (Required) Destination port for redirect'
            ports: '- (Required) A set of ports to match'
            protocol: '- (Required) One of HTTP, HTTPS'
            protocol_type: '- (Optional) One of HTTP or HTTPS'
            query: '- (Optional) HTTP request query strings to match'
            request_headers: '- (Optional) One or more blocks of request headers to match'
            response_headers: '- (Optional) One or more blocks containng such fields'
            rewrite_location_header: '- (Optional) Rewrites location header'
            rule: '- (Required) One or more rule blocks with matching criteria and actions.'
            service_ports: '- (Optional) Match the rule based on service ports'
            status_code: '- (Optional)'
            value: '- (Required) A cookie value to match'
            values: '- (Required) A set of strings values that should match header value'
            virtual_service_id: '- (Required) An ID of existing ALB Virtual Service.'
        importStatements: []
    vcd_nsxt_alb_virtual_service_http_sec_rules:
        subCategory: ""
        description: Provides a resource to manage ALB Service Engine Groups policies for HTTP security rules. HTTP security rules allow users to configure allowing or denying certain requests, to close the TCP connection, to redirect a request to HTTPS, or to apply a rate limit.
        name: vcd_nsxt_alb_virtual_service_http_sec_rules
        title: vcd_nsxt_alb_virtual_service_http_sec_rules
        examples:
            - name: example
              manifest: |-
                {
                  "rule": [
                    {
                      "actions": [
                        {
                          "redirect_to_https": "80"
                        }
                      ],
                      "active": true,
                      "logging": true,
                      "match_criteria": [
                        {
                          "protocol_type": "HTTP"
                        }
                      ],
                      "name": "sec-redirect-to-https"
                    },
                    {
                      "actions": [
                        {
                          "connections": "ALLOW"
                        }
                      ],
                      "active": true,
                      "logging": false,
                      "match_criteria": [
                        {
                          "client_ip_address": [
                            {
                              "criteria": "IS_IN",
                              "ip_addresses": [
                                "1.1.1.1",
                                "2.2.2.2"
                              ]
                            }
                          ],
                          "cookie": [
                            {
                              "criteria": "DOES_NOT_END_WITH",
                              "name": "does-not-name",
                              "value": "does-not-value"
                            }
                          ],
                          "http_methods": [
                            {
                              "criteria": "IS_IN",
                              "methods": [
                                "COPY",
                                "HEAD"
                              ]
                            }
                          ],
                          "path": [
                            {
                              "criteria": "CONTAINS",
                              "paths": [
                                "/123",
                                "/234"
                              ]
                            }
                          ],
                          "protocol_type": "HTTP",
                          "query": [
                            "546",
                            "666"
                          ],
                          "request_headers": [
                            {
                              "criteria": "DOES_NOT_BEGIN_WITH",
                              "name": "X",
                              "values": [
                                "value1",
                                "value2"
                              ]
                            },
                            {
                              "criteria": "DOES_NOT_EQUAL",
                              "name": "Y-DOES-NOT",
                              "values": [
                                "value1",
                                "value2"
                              ]
                            }
                          ],
                          "service_ports": [
                            {
                              "criteria": "IS_IN",
                              "ports": [
                                80,
                                81
                              ]
                            }
                          ]
                        }
                      ],
                      "name": "sec-connection-allow"
                    },
                    {
                      "actions": [
                        {
                          "connections": "CLOSE"
                        }
                      ],
                      "active": true,
                      "logging": true,
                      "match_criteria": [
                        {
                          "path": [
                            {
                              "criteria": "CONTAINS",
                              "paths": [
                                "/123",
                                "/234"
                              ]
                            }
                          ]
                        }
                      ],
                      "name": "sec-connection-close"
                    },
                    {
                      "actions": [
                        {
                          "send_response": [
                            {
                              "content": "${base64encode(\"PERMISSION DENIED\")}",
                              "content_type": "text/plain",
                              "status_code": "403"
                            }
                          ]
                        }
                      ],
                      "active": true,
                      "logging": true,
                      "match_criteria": [
                        {
                          "client_ip_address": [
                            {
                              "criteria": "IS_NOT_IN",
                              "ip_addresses": [
                                "2.1.1.1",
                                "6.2.2.2"
                              ]
                            }
                          ],
                          "protocol_type": "HTTP",
                          "service_ports": [
                            {
                              "criteria": "IS_IN",
                              "ports": [
                                80,
                                81
                              ]
                            }
                          ]
                        }
                      ],
                      "name": "sec-response"
                    },
                    {
                      "actions": [
                        {
                          "rate_limit": [
                            {
                              "action_close_connection": true,
                              "count": "10000",
                              "period": "2000"
                            }
                          ]
                        }
                      ],
                      "active": true,
                      "logging": true,
                      "match_criteria": [
                        {
                          "request_headers": [
                            {
                              "criteria": "DOES_NOT_BEGIN_WITH",
                              "name": "X",
                              "values": [
                                "value1",
                                "value2"
                              ]
                            }
                          ]
                        }
                      ],
                      "name": "sec-rate-limit-close-connection"
                    },
                    {
                      "actions": [
                        {
                          "rate_limit": [
                            {
                              "action_redirect": [
                                {
                                  "host": "other-host",
                                  "keep_query": true,
                                  "path": "/",
                                  "port": 80,
                                  "protocol": "HTTPS",
                                  "status_code": 302
                                }
                              ],
                              "count": "10000",
                              "period": "2000"
                            }
                          ]
                        }
                      ],
                      "active": true,
                      "logging": true,
                      "match_criteria": [
                        {
                          "request_headers": [
                            {
                              "criteria": "DOES_NOT_BEGIN_WITH",
                              "name": "X",
                              "values": [
                                "value1",
                                "value2"
                              ]
                            }
                          ]
                        }
                      ],
                      "name": "sec-rate-limit-redirect"
                    },
                    {
                      "actions": [
                        {
                          "rate_limit": [
                            {
                              "action_local_response": [
                                {
                                  "content": "${base64encode(\"PERMISSION DENIED\")}",
                                  "content_type": "text/plain",
                                  "status_code": "403"
                                }
                              ],
                              "count": "10000",
                              "period": "2000"
                            }
                          ]
                        }
                      ],
                      "active": true,
                      "logging": true,
                      "match_criteria": [
                        {
                          "query": [
                            "546",
                            "666"
                          ]
                        }
                      ],
                      "name": "sec-rate-limit-local-resp"
                    },
                    {
                      "actions": [
                        {
                          "redirect_to_https": "80"
                        }
                      ],
                      "active": true,
                      "logging": true,
                      "match_criteria": [
                        {
                          "cookie": [
                            {
                              "criteria": "DOES_NOT_END_WITH",
                              "name": "does-not-name",
                              "value": "does-not-value"
                            }
                          ]
                        }
                      ],
                      "name": "one-criteria"
                    }
                  ],
                  "virtual_service_id": "${vcd_nsxt_alb_virtual_service.test.id}"
                }
              references:
                virtual_service_id: vcd_nsxt_alb_virtual_service.test.id
        argumentDocs:
            action_close_connection: |-
                - (Optional) Boolean value to mark that the connection should be closed
                if count limit is hit.
            action_local_response: '- (Optional)'
            action_redirect: '- (Optional)'
            actions: '- (Required) A block of actions to perform with requests that match'
            active: '- (Optional) Defines if the rule is active. Default true'
            client_ip_address: '- (Optional) Match the rule based on client IP address rules'
            connections: '- (Optional) One of ALLOW or CLOSE'
            content: '- (Required) Base64 encoded content. Terraform function base64encode can be used.'
            content_type: '- (Required) Mime type of content. E.g. text/plain'
            cookie: '- (Optional) A block'
            count: '- (Required) Amount of connections that are permitted within each period before triggering the action'
            criteria: '- (Required) One of IS_IN, IS_NOT_IN'
            host: '- (Required) Host, to which the request should be redirected'
            http_methods: '- (Optional) Defines HTTP methods that should be matched'
            ip_addresses: '- (Required) A set of IP addresses to match'
            keep_query: '- (Required) Boolean value to mark if query part be preserved or not'
            logging: '- (Optional) Defines if the requests that match should be logged. Default false'
            match_criteria: '- (Required) A block of criteria to match the requests'
            methods: |-
                - (Required) A set of HTTP methods from the list: GET, PUT, POST, DELETE,
                HEAD, OPTIONS, TRACE, CONNECT, PATCH, PROPFIND, PROPPATCH, MKCOL, COPY, MOVE,
                LOCK, UNLOCK
            name: '- (Required) Name of the rule'
            path: '- (Optional)'
            paths: '- (Required) A set of patchs to match given criteria'
            period: '- (Required) Time value in seconds to enforce rate count.'
            port: '- (Required) Destination port for redirect'
            ports: '- (Required) A set of ports to match'
            protocol: '- (Required) One of HTTP, HTTPS'
            protocol_type: '- (Optional) One of HTTP or HTTPS'
            query: '- (Optional) HTTP request query strings to match'
            rate_limit: '- (Optional) Rate based action'
            redirect_to_https: '- (Optional) Port number that should be redirected to HTTPS'
            request_headers: '- (Optional) One or more blocks of request headers to match'
            rule: '- (Required) One or more rule blocks with matching criteria and actions.'
            send_response: '- (Optional) Send a customized response'
            service_ports: '- (Optional) Match the rule based on service ports'
            status_code: '- (Required) Status code to use for redirect. One of 301, 302, 307'
            value: '- (Required) A cookie value to match'
            values: '- (Required) A set of strings values that should match header value'
            virtual_service_id: '- (Required) An ID of existing ALB Virtual Service.'
        importStatements: []
    vcd_nsxt_app_port_profile:
        subCategory: ""
        description: Provides a resource to manage NSX-T Application Port Profiles. Application Port Profiles include a combination of a protocol and a port, or a group of ports, that is used for Firewall and NAT services on the Edge Gateway. In addition to the default Port Profiles that are preconfigured for NSX-T Data Center, you can create custom Application Port Profiles.
        name: vcd_nsxt_app_port_profile
        title: vcd_nsxt_app_port_profile
        examples:
            - name: icmpv4
              manifest: |-
                {
                  "app_port": [
                    {
                      "protocol": "ICMPv4"
                    }
                  ],
                  "context_id": "${data.vcd_nsxt_manager.first.id}",
                  "description": "Application port profile for ICMPv4",
                  "name": "ICMP custom profile",
                  "org": "System",
                  "scope": "PROVIDER"
                }
              references:
                context_id: data.vcd_nsxt_manager.first.id
            - name: custom-app
              manifest: |-
                {
                  "app_port": [
                    {
                      "protocol": "ICMPv6"
                    },
                    {
                      "port": [
                        "2000",
                        "2010-2020",
                        "12345",
                        "65000"
                      ],
                      "protocol": "TCP"
                    },
                    {
                      "port": [
                        "40000-60000"
                      ],
                      "protocol": "UDP"
                    }
                  ],
                  "context_id": "${data.vcd_org_vdc.v1.id}",
                  "description": "Application port profile for custom application",
                  "name": "custom app profile",
                  "org": "my-org",
                  "scope": "TENANT"
                }
              references:
                context_id: data.vcd_org_vdc.v1.id
        argumentDocs:
            PROVIDER: 'scoped import path is:'
            TENANT: 'scoped import path is:'
            app_port: '- (Required) At least one block of Application Port definition'
            context_id: |-
                - (Optional) ID of NSX-T Manager, VDC or VDC Group. Replaces deprecated fields vdc
                and nsxt_manager_id. It accepts VDC, VDC Group or NSX-T Manager ID.
            name: '- (Required) A unique name for Security Group'
            nsxt_manager_id: |-
                - (Deprecated; Optional) Required only when scope is PROVIDER. Deprecated
                and replaced by context_id
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            port: '- (Optional) A set of port numbers or port ranges (e.g. "10000", "20000-20010")'
            protocol: '- (Required) One of protocols ICMPv4, ICMPv6, TCP, UDP'
            scope: '- (Required) Application Port Profile scope - PROVIDER, TENANT'
            vdc: |-
                - (Deprecated; Optional) The name of VDC to use, optional if defined at provider level.
                Deprecated and replaced by context_id
        importStatements: []
    vcd_nsxt_distributed_firewall:
        subCategory: ""
        description: The Distributed Firewall allows user to segment organization virtual data center entities, such as virtual machines, based on virtual machine names and attributes.
        name: vcd_nsxt_distributed_firewall
        title: vcd_nsxt_distributed_firewall
        examples:
            - name: t1
              manifest: |-
                {
                  "org": "my-org",
                  "rule": [
                    {
                      "action": "ALLOW",
                      "app_port_profile_ids": [
                        "${data.vcd_nsxt_app_port_profile.WINS.id}",
                        "${data.vcd_nsxt_app_port_profile.FTP.id}"
                      ],
                      "comment": "My first rule to allow everything",
                      "description": "description",
                      "name": "rule1",
                      "source_groups_excluded": true,
                      "source_ids": [
                        "${data.vcd_nsxt_ip_set.set1.id}",
                        "${data.vcd_nsxt_ip_set.set2.id}"
                      ]
                    },
                    {
                      "action": "DROP",
                      "direction": "IN_OUT",
                      "enabled": false,
                      "logging": true,
                      "name": "rule2",
                      "network_context_profile_ids": [
                        "${vcd_nsxt_network_context_profile.cp1.id}"
                      ]
                    },
                    {
                      "action": "REJECT",
                      "ip_protocol": "IPV4",
                      "name": "rule3"
                    },
                    {
                      "action": "ALLOW",
                      "destination_groups_excluded": false,
                      "direction": "OUT",
                      "ip_protocol": "IPV6",
                      "name": "rule4",
                      "source_groups_excluded": false
                    },
                    {
                      "action": "ALLOW",
                      "direction": "IN",
                      "ip_protocol": "IPV6",
                      "name": "rule5"
                    }
                  ],
                  "vdc_group_id": "${vcd_vdc_group.existing.id}"
                }
              references:
                vdc_group_id: vcd_vdc_group.existing.id
        argumentDocs:
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            rule: |-
                - (Required) One or more blocks with Firewall Rule definitions. Order
                defines firewall rule precedence
            rule.action: |-
                - (Required) Defines if it should ALLOW, DROP, REJECT traffic. REJECT is only
                supported in VCD 10.2.2+
            rule.app_port_profile_ids: '- (Optional) An optional set of Application Port Profiles.'
            rule.comment: '- (Optional; VCD 10.3.2+) Comment field shown in UI'
            rule.description: '- (Optional) Description of firewall rule (not shown in UI)'
            rule.destination_groups_excluded: |-
                - (Optional; VCD 10.3.2+) - reverses value of destination_ids for
                the rule to match everything except specified IDs.
            rule.destination_ids: '- (Optional) A set of source object Firewall Groups (IP Sets or Security groups). Leaving it empty matches Any (all)'
            rule.direction: '- (Optional) One of IN, OUT, or IN_OUT. (default IN_OUT)'
            rule.enabled: '- (Optional) Defines if the rule is enabled (default true)'
            rule.ip_protocol: '- (Optional) One of IPV4,  IPV6, or IPV4_IPV6 (default IPV4_IPV6)'
            rule.logging: '- (Optional) Defines if logging for this rule is enabled (default false)'
            rule.name: '- (Required) Explanatory name for firewall rule (uniqueness not enforced)'
            rule.network_context_profile_ids: |-
                - (Optional) An optional set of Network Context Profiles. Can be
                looked up using vcd_nsxt_network_context_profile data source.
            rule.source_groups_excluded: |-
                - (Optional; VCD 10.3.2+) - reverses value of source_ids for the rule to
                match everything except specified IDs.
            rule.source_ids: |-
                - (Optional) A set of source object Firewall Groups (IP Sets or Security groups).
                Leaving it empty matches Any (all)
            vdc_group_id: |-
                - (Required) The ID of VDC Group to manage Distributed Firewall in. Can be looked
                up using vcd_vdc_group resource or data source.
        importStatements: []
    vcd_nsxt_distributed_firewall_rule:
        subCategory: ""
        description: The Distributed Firewall rule allows user to segment organization network entities by creating firewall rules.
        name: vcd_nsxt_distributed_firewall_rule
        title: vcd_nsxt_distributed_firewall_rule
        examples:
            - name: r1
              manifest: |-
                {
                  "action": "ALLOW",
                  "app_port_profile_ids": [
                    "${data.vcd_nsxt_app_port_profile.FTP.id}"
                  ],
                  "description": "description",
                  "destination_ids": [
                    "${vcd_nsxt_security_group.g1-empty.id}",
                    "${vcd_nsxt_security_group.g2.id}"
                  ],
                  "name": "rule1",
                  "org": "my-org",
                  "source_ids": [
                    "${vcd_nsxt_ip_set.set1.id}",
                    "${vcd_nsxt_ip_set.set2.id}"
                  ],
                  "vdc_group_id": "${data.vcd_vdc_group.test1.id}"
                }
              references:
                vdc_group_id: data.vcd_vdc_group.test1.id
            - name: r2
              manifest: |-
                {
                  "above_rule_id": "${vcd_nsxt_distributed_firewall_rule.r1.id}",
                  "action": "ALLOW",
                  "direction": "OUT",
                  "ip_protocol": "IPV6",
                  "name": "rule4",
                  "org": "{{.Org}}",
                  "vdc_group_id": "${data.vcd_vdc_group.test1.id}"
                }
              references:
                above_rule_id: vcd_nsxt_distributed_firewall_rule.r1.id
                vdc_group_id: data.vcd_vdc_group.test1.id
        argumentDocs:
            above_rule_id: |-
                - (Optional) ID of an existing vcd_nsxt_distributed_firewall_rule entry, above
                which the newly created firewall rule will be positioned. Note. By default, new rule will be
                created at the bottom of the list
            action: |-
                - (Required) Defines if it should ALLOW, DROP, REJECT traffic. REJECT is only
                supported in VCD 10.2.2+
            app_port_profile_ids: '- (Optional) An optional set of Application Port Profiles.'
            comment: '- (Optional; VCD 10.3.2+) Comment field shown in UI'
            description: '- (Optional) Description of firewall rule (not shown in UI)'
            destination_groups_excluded: |-
                - (Optional; VCD 10.3.2+) - reverses value of destination_ids for
                the rule to match everything except specified IDs.
            destination_ids: '- (Optional) A set of source object Firewall Groups (IP Sets or Security groups). Leaving it empty matches Any (all)'
            direction: '- (Optional) One of IN, OUT, or IN_OUT. (default IN_OUT)'
            enabled: '- (Optional) Defines if the rule is enabled (default true)'
            ip_protocol: '- (Optional) One of IPV4,  IPV6, or IPV4_IPV6 (default IPV4_IPV6)'
            logging: '- (Optional) Defines if logging for this rule is enabled (default false)'
            name: '- (Required) Explanatory name for firewall rule (uniqueness not enforced)'
            network_context_profile_ids: |-
                - (Optional) An optional set of Network Context Profiles. Can be
                looked up using vcd_nsxt_network_context_profile data source.
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            source_groups_excluded: |-
                - (Optional; VCD 10.3.2+) - reverses value of source_ids for the rule to
                match everything except specified IDs.
            source_ids: |-
                - (Optional) A set of source object Firewall Groups (IP Sets or Security groups).
                Leaving it empty matches Any (all)
            vdc_group_id: |-
                - (Required) The ID of VDC Group to manage Distributed Firewall in. Can be looked
                up using vcd_vdc_group resource or data source.
        importStatements: []
    vcd_nsxt_dynamic_security_group:
        subCategory: ""
        description: Provides a resource to manage NSX-T Dynamic Security Groups. Dynamic Security Groups group Virtual Machines based on specific criteria (VM Names or Security tags) to which Distributed Firewall Rules apply.
        name: vcd_nsxt_dynamic_security_group
        title: vcd_nsxt_dynamic_security_group
        examples:
            - name: group1
              manifest: |-
                {
                  "criteria": [
                    {
                      "rule": [
                        {
                          "operator": "EQUALS",
                          "type": "VM_TAG",
                          "value": "tag-equals"
                        },
                        {
                          "operator": "CONTAINS",
                          "type": "VM_TAG",
                          "value": "tag-contains"
                        },
                        {
                          "operator": "STARTS_WITH",
                          "type": "VM_TAG",
                          "value": "tag-starts-with"
                        },
                        {
                          "operator": "ENDS_WITH",
                          "type": "VM_TAG",
                          "value": "tag-ends-with"
                        }
                      ]
                    },
                    {
                      "rule": [
                        {
                          "operator": "CONTAINS",
                          "type": "VM_NAME",
                          "value": "name-contains-4"
                        },
                        {
                          "operator": "STARTS_WITH",
                          "type": "VM_NAME",
                          "value": "starts_with2"
                        },
                        {
                          "operator": "CONTAINS",
                          "type": "VM_NAME",
                          "value": "name-contains-22"
                        },
                        {
                          "operator": "STARTS_WITH",
                          "type": "VM_NAME",
                          "value": "starts_with22"
                        }
                      ]
                    },
                    {
                      "rule": [
                        {
                          "operator": "CONTAINS",
                          "type": "VM_NAME",
                          "value": "name-contains3"
                        },
                        {
                          "operator": "STARTS_WITH",
                          "type": "VM_NAME",
                          "value": "starts_with3"
                        },
                        {
                          "operator": "CONTAINS",
                          "type": "VM_NAME",
                          "value": "name-contains33"
                        },
                        {
                          "operator": "STARTS_WITH",
                          "type": "VM_NAME",
                          "value": "starts_with33"
                        }
                      ]
                    }
                  ],
                  "name": "dynamic-security-group-example",
                  "org": "cloud",
                  "vdc_group_id": "${data.vcd_vdc_group.group1.id}"
                }
              references:
                vdc_group_id: data.vcd_vdc_group.group1.id
            - name: group1
              manifest: |-
                {
                  "name": "empty-dynamic-security-group",
                  "org": "cloud",
                  "vdc_group_id": "${data.vcd_vdc_group.group1.id}"
                }
              references:
                vdc_group_id: data.vcd_vdc_group.group1.id
        argumentDocs:
            criteria: |-
                (Optional) Up to 3 criteria for matching VMs. List of criteria is matched with boolean
                OR operation and matching any of defined criteria will include objects. Each criteria can
                contains up to 4 rule definitions.
            description: '- (Optional) An optional description of the Dynamic Security Group'
            member_vms: A set of member VMs (if exist). see Member VMs below for details.
            name: '- (Required) A unique name for Dynamic Security Group'
            operator: |-
                - (Required) Supported operators depend on type. VM_TAG supports 4 operator types
                with self explanatory names:
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            rule: |-
                (Optional) Up to 4 rules for matching VMs. List of rules are matched with boolean AND
                operation and all defines rules must match to include object. See Rule for rule
                definition structure.
            type: '- (Required) VM_NAME or VM_TAG'
            value: '- (Required) String to evaluate by given type and operator'
            vapp_id: '- Parent vApp ID for member VM (empty for standalone VMs)'
            vapp_name: '- Parent vApp Name for member VM (empty for standalone VMs)'
            vdc_group_id: '- (Required) VDC Group ID for Dynamic Security Group creation.'
            vm_id: '- Member VM ID'
            vm_name: '- Member VM name'
        importStatements: []
    vcd_nsxt_edgegateway:
        subCategory: ""
        description: Provides a VMware Cloud Director NSX-T edge gateway. This can be used to create, update, and delete NSX-T edge gateways connected to external networks.
        name: vcd_nsxt_edgegateway
        title: vcd_nsxt_edgegateway
        examples:
            - name: nsxt-edge
              manifest: |-
                {
                  "description": "Description",
                  "external_network_id": "${data.vcd_external_network_v2.nsxt-ext-net.id}",
                  "name": "nsxt-edge",
                  "org": "my-org",
                  "owner_id": "${data.vcd_org_vdc.vdc1.id}",
                  "subnet": [
                    {
                      "allocated_ips": [
                        {
                          "end_address": "10.150.160.138",
                          "start_address": "10.150.160.137"
                        }
                      ],
                      "gateway": "10.150.191.253",
                      "prefix_length": "19",
                      "primary_ip": "10.150.160.137"
                    }
                  ]
                }
              references:
                external_network_id: data.vcd_external_network_v2.nsxt-ext-net.id
                owner_id: data.vcd_org_vdc.vdc1.id
            - name: with-external-networks
              manifest: |-
                {
                  "external_network": [
                    {
                      "allocated_ip_count": 4,
                      "external_network_id": "${data.vcd_external_network_v2.segment-backed.id}",
                      "gateway": "${tolist(data.vcd_external_network_v2.segment-backed.ip_scope)[0].gateway}",
                      "prefix_length": "${tolist(data.vcd_external_network_v2.segment-backed.ip_scope)[0].prefix_length}"
                    },
                    {
                      "allocated_ip_count": 4,
                      "external_network_id": "${data.vcd_external_network_v2.segment-backed2.id}",
                      "gateway": "${tolist(data.vcd_external_network_v2.segment-backed2.ip_scope)[0].gateway}",
                      "prefix_length": "${tolist(data.vcd_external_network_v2.segment-backed2.ip_scope)[0].prefix_length}",
                      "primary_ip": "15.14.14.12"
                    }
                  ],
                  "external_network_id": "${data.vcd_external_network_v2.existing-extnet.id}",
                  "name": "edge-with-segment-uplinks",
                  "org": "my-org",
                  "owner_id": "${data.vcd_org_vdc.vdc1.id}",
                  "subnet": [
                    {
                      "allocated_ips": [
                        {
                          "end_address": "${tolist(tolist(data.vcd_external_network_v2.existing-extnet.ip_scope)[0].static_ip_pool)[0].end_address}",
                          "start_address": "${tolist(tolist(data.vcd_external_network_v2.existing-extnet.ip_scope)[0].static_ip_pool)[0].end_address}"
                        }
                      ],
                      "gateway": "${tolist(data.vcd_external_network_v2.existing-extnet.ip_scope)[0].gateway}",
                      "prefix_length": "${tolist(data.vcd_external_network_v2.existing-extnet.ip_scope)[0].prefix_length}",
                      "primary_ip": "${tolist(tolist(data.vcd_external_network_v2.existing-extnet.ip_scope)[0].static_ip_pool)[0].end_address}"
                    }
                  ]
                }
              references:
                external_network.external_network_id: data.vcd_external_network_v2.segment-backed2.id
                external_network_id: data.vcd_external_network_v2.existing-extnet.id
                owner_id: data.vcd_org_vdc.vdc1.id
            - name: nsxt-edge
              manifest: |-
                {
                  "external_network_id": "${data.vcd_external_network_v2.ip-space-provider-gw.id}",
                  "name": "ip-space-backed-edge",
                  "org": "my-org",
                  "owner_id": "${data.vcd_org_vdc.vdc1.id}"
                }
              references:
                external_network_id: data.vcd_external_network_v2.ip-space-provider-gw.id
                owner_id: data.vcd_org_vdc.vdc1.id
            - name: nsxt-edge
              manifest: |-
                {
                  "dedicate_external_network": true,
                  "description": "Description",
                  "edge_cluster_id": "${data.vcd_nsxt_edge_cluster.secondary.id}",
                  "external_network_id": "${data.vcd_external_network_v2.nsxt-ext-net.id}",
                  "name": "nsxt-edge",
                  "org": "my-org",
                  "owner_id": "${data.vcd_org_vdc.vdc1.id}",
                  "subnet": [
                    {
                      "allocated_ips": [
                        {
                          "end_address": "10.150.160.137",
                          "start_address": "10.150.160.137"
                        }
                      ],
                      "gateway": "10.150.191.253",
                      "prefix_length": "19",
                      "primary_ip": "10.150.160.137"
                    },
                    {
                      "allocated_ips": [
                        {
                          "end_address": "77.77.77.12",
                          "start_address": "77.77.77.10"
                        }
                      ],
                      "gateway": "77.77.77.1",
                      "prefix_length": "26"
                    },
                    {
                      "allocated_ips": [
                        {
                          "end_address": "88.88.88.92",
                          "start_address": "88.88.88.91"
                        },
                        {
                          "end_address": "88.88.88.95",
                          "start_address": "88.88.88.94"
                        },
                        {
                          "end_address": "88.88.88.98",
                          "start_address": "88.88.88.97"
                        }
                      ],
                      "gateway": "88.88.88.1",
                      "prefix_length": "24"
                    }
                  ]
                }
              references:
                edge_cluster_id: data.vcd_nsxt_edge_cluster.secondary.id
                external_network_id: data.vcd_external_network_v2.nsxt-ext-net.id
                owner_id: data.vcd_org_vdc.vdc1.id
            - name: nsxt-edge
              manifest: |-
                {
                  "dedicate_external_network": true,
                  "description": "Description",
                  "edge_cluster_id": "${data.vcd_nsxt_edge_cluster.secondary.id}",
                  "external_network_id": "${data.vcd_external_network_v2.nsxt-ext-net.id}",
                  "name": "nsxt-edge",
                  "org": "my-org",
                  "owner_id": "${data.vcd_vdc_group.group1.id}",
                  "starting_vdc_id": "${data.vcd_org_vdc.vdc-1.id}",
                  "subnet": [
                    {
                      "allocated_ips": [
                        {
                          "end_address": "10.150.160.137",
                          "start_address": "10.150.160.137"
                        }
                      ],
                      "gateway": "10.150.191.253",
                      "prefix_length": "19",
                      "primary_ip": "10.150.160.137"
                    },
                    {
                      "allocated_ips": [
                        {
                          "end_address": "77.77.77.12",
                          "start_address": "77.77.77.10"
                        }
                      ],
                      "gateway": "77.77.77.1",
                      "prefix_length": "26"
                    }
                  ]
                }
              references:
                edge_cluster_id: data.vcd_nsxt_edge_cluster.secondary.id
                external_network_id: data.vcd_external_network_v2.nsxt-ext-net.id
                owner_id: data.vcd_vdc_group.group1.id
                starting_vdc_id: data.vcd_org_vdc.vdc-1.id
            - name: nsxt-edge
              manifest: |-
                {
                  "external_network_id": "${data.vcd_external_network_v2.ext-net-nsxt.id}",
                  "name": "nsxt-edge",
                  "org": "my-org",
                  "owner_id": "${data.vcd_org_vdc.vdc1.id}",
                  "subnet_with_total_ip_count": [
                    {
                      "gateway": "77.77.77.1",
                      "prefix_length": "24",
                      "primary_ip": "77.77.77.254"
                    },
                    {
                      "gateway": "88.77.77.1",
                      "prefix_length": "24"
                    }
                  ],
                  "total_allocated_ip_count": 100
                }
              references:
                external_network_id: data.vcd_external_network_v2.ext-net-nsxt.id
                owner_id: data.vcd_org_vdc.vdc1.id
            - name: nsxt-edge
              manifest: |-
                {
                  "external_network_id": "${data.vcd_external_network_v2.ext-net-nsxt.id}",
                  "name": "nsxt-edge",
                  "org": "my-org",
                  "owner_id": "${data.vcd_org_vdc.vdc1.id}",
                  "subnet_with_ip_count": [
                    {
                      "allocated_ip_count": 9,
                      "gateway": "77.77.77.1",
                      "prefix_length": "24",
                      "primary_ip": "77.77.77.10"
                    },
                    {
                      "allocated_ip_count": 15,
                      "gateway": "88.77.77.1",
                      "prefix_length": "24"
                    }
                  ]
                }
              references:
                external_network_id: data.vcd_external_network_v2.ext-net-nsxt.id
                owner_id: data.vcd_org_vdc.vdc1.id
            - name: nsxt-edge
              manifest: |-
                {
                  "description": "Description",
                  "external_network_id": "${data.vcd_external_network_v2.nsxt-ext-net.id}",
                  "name": "nsxt-edge",
                  "org": "my-org",
                  "owner_id": "${data.vcd_org_vdc.vdc-1.id}",
                  "subnet": [
                    {
                      "allocated_ips": [
                        {
                          "end_address": "10.10.10.30",
                          "start_address": "10.10.10.10"
                        }
                      ],
                      "gateway": "10.10.10.1",
                      "prefix_length": "24",
                      "primary_ip": "10.10.10.10"
                    }
                  ]
                }
              references:
                external_network_id: data.vcd_external_network_v2.nsxt-ext-net.id
                owner_id: data.vcd_org_vdc.vdc-1.id
        argumentDocs:
            Provider.import_separator: or variable VCD_IMPORT_SEPARATOR
            dedicate_external_network: '- (Optional) Dedicating the external network will enable Route Advertisement for this Edge Gateway. Default false.'
            deployment_mode: |-
                - (Optional, v3.14+, VCD 10.6+) ACTIVE_STANDBY (default) or
                DISTRIBUTED_ONLY (VCD 10.6+). Distributed-only does not provide services that run on service
                router such as firewalling, NAT, VPN, DNS forwarding or static routes, instead, the distributed
                nature guarantees high north-south data throughput.
            description: '- (Optional) A unique name for the edge gateway.'
            edge_cluster_id: '- (Optional) Specific Edge Cluster ID if required'
            external_network: |-
                - (Optional, VCD 10.4.1+, v3.11+) attaches NSX-T Segment backed External
                Networks with a given configuration block. It does not
                support IP Spaces.
            external_network.allocated_ip_count: (Required) - Number of allocated IPs
            external_network.external_network_id: '- (Required) - ID of NSX-T Segment backed external network'
            external_network.gateway: '- (Required) - Gateway for a subnet in external network'
            external_network.prefix_length: '- (Required) Prefix length of a subnet in external network (e.g. 24)'
            external_network.primary_ip: |-
                (Optional) - Exactly one Primary IP is required for an Edge Gateway. It should fall
                in provided gateway and prefix_length
            external_network_allocated_ip_count: |-
                - Total allocated IP count in attached NSX-T Segment backed
                external networks
            external_network_id: |-
                - (Required) An external network ID. Note: Data source vcd_external_network_v2
                can be used to lookup ID by name.
            ip_count_read_limit: |-
                - (Optional, v3.13+) Sets a limit of IPs to count for
                used_ip_count and unused_ip_count attributes to avoid exhausting compute resource while
                counting IPs in large IPv6 subnets. It does not affect operation of Edge Gateway configuration,
                only IP count reporting. Defaults to 1000000, update is a no-op, but will affect newly read
                data. While it is unlikely that a single Edge Gateway can effectively manage more IPs, one can
                specify 0 for unlimited value.
            name: '- (Required) A unique name for the edge gateway.'
            non_distributed_routing_enabled: |-
                - (Optional, v3.14+) Non-Distributed routing will allow
                tenants the option of connecting Org Vdc networks to the Service
                Router. This would
                force all VM traffic through the service router for that network. Default false.
            org: '- (Optional) The name of organization to which the VDC belongs. Optional if defined at provider level.'
            owner_id: |-
                - (Optional, v3.6+,VCD 10.2+) The ID of VDC or VDC Group. Note: Data sources
                vcd_vdc_group or
                vcd_org_vdc can be used to lookup IDs by
                name.
            primary_ip: '- Primary IP address exposed for an easy access without nesting.'
            starting_vdc_id: |-
                - (Optional, v3.6+,VCD 10.2+)  If owner_id is a VDC Group, by default Edge
                Gateway will be created in random member VDC and moved to destination VDC Group. This field allows
                to specify initial VDC for Edge Gateway (this can define Egress location of traffic in the VDC
                Group) Note: It can only be used when owner_id is a VDC Group.
            subnet: |-
                - (Optional) One or more subnets defined for Edge Gateway. One of
                subnet, subnet_with_total_ip_count or subnet_with_ip_count is required unless parent
                network is backed by IP Spaces. Read more in IP allocation modes section.
            subnet.allocated_ips: |-
                (Required) - One or more blocks of ip ranges
                in the subnet to be allocated
            subnet.end_address: '- (Required) - End IP address of a range'
            subnet.gateway: '- (Required) - Gateway for a subnet in external network'
            subnet.prefix_length: |-
                - (Required) Prefix length of a subnet in external network (e.g. 24 for netmask
                of 255.255.255.0)
            subnet.primary_ip: |-
                - (Optional) - Primary IP address for edge gateway. Note: primary_ip must fall
                into allocated_ips block range as otherwise plan will not be clean with a new range defined for
                that particular block. There can only be one primary_ip defined for edge gateway.
            subnet.start_address: '- (Required) - Start IP address of a range'
            subnet_with_ip_count: |-
                - (v3.9+) One or more
                subnets defined for Edge Gateway. One of subnet,
                subnet_with_total_ip_count or subnet_with_ip_count is required unless parent network is
                backed by IP Spaces. Read more in IP allocation modes section.
            subnet_with_total_ip_count: |-
                - (Optional, v3.9+) One or more
                subnets defined for Edge Gateway. One of subnet,
                subnet_with_total_ip_count or subnet_with_ip_count is required unless parent network is
                backed by IP Spaces. Read more in IP allocation modes section.
            subnet_with_total_ip_count.gateway: '- (Required) - Gateway for a subnet in external network'
            subnet_with_total_ip_count.prefix_length: '- (Required) Prefix length of a subnet in external network (e.g. 24 for netmask of 255.255.255.0)'
            subnet_with_total_ip_count.primary_ip: |-
                (Required) - Exactly one Primary IP is required for an Edge Gateway. It should be
                defined in any of the subnet_with_total_ip_count blocks
            the subnet_with_ip_count.allocated_ip_count: (Required) - Number of allocated IPs from that particular subnet
            the subnet_with_ip_count.gateway: '- (Required) - Gateway for a subnet in external network'
            the subnet_with_ip_count.prefix_length: '- (Required) Prefix length of a subnet in external network (e.g. 24 for netmask of 255.255.255.0)'
            the subnet_with_ip_count.primary_ip: |-
                (Required) - Exactly one Primary IP is required for an Edge Gateway. It should be
                defined in any of the subnet_with_ip_count blocks
            total_allocated_ip_count: |-
                - (Optional, v3.9+) Required with subnet_with_total_ip_count. It is
                read-only attribute with other other allocation models subnet and subnet_with_ip_count.
                Note. It sets or reports IP count only for NSX-T Tier 0 backed external network Uplink.
            unused_ip_count: |-
                - Unused IP count in this Edge Gateway (for all uplinks). Note: it is not
                exposed when using IP Spaces.
            use_ip_spaces: '- Boolean value that hints if the NSX-T Edge Gateway uses IP Spaces'
            used_ip_count: |-
                - Used IP count in this Edge Gateway (for all uplinks). Note: it is not
                exposed when using IP Spaces.
            vdc: |-
                - (Optional) Deprecated in favor of owner_id. The name of VDC that owns the edge
                gateway. Can be inherited from provider configuration if not defined here.
        importStatements: []
    vcd_nsxt_edgegateway_bgp_configuration:
        subCategory: ""
        description: Provides a resource to manage BGP configuration on NSX-T Edge Gateway that has a dedicated Tier-0 Gateway or VRF.
        name: vcd_nsxt_edgegateway_bgp_configuration
        title: vcd_nsxt_edgegateway_bgp_configuration
        examples:
            - name: testing
              manifest: |-
                {
                  "ecmp_enabled": true,
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.testing.id}",
                  "enabled": false,
                  "graceful_restart_mode": "HELPER_ONLY",
                  "graceful_restart_timer": 190,
                  "local_as_number": "65430",
                  "org": "my-org",
                  "stale_route_timer": 600
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.testing.id
            - name: testing
              manifest: |-
                {
                  "ecmp_enabled": true,
                  "edge_gateway_id": "${vcd_nsxt_edgegateway.vrf-backed.id}",
                  "enabled": true,
                  "org": "my-org"
                }
              references:
                edge_gateway_id: vcd_nsxt_edgegateway.vrf-backed.id
        argumentDocs:
            DISABLE: '- Both graceful restart and helper modes are disabled'
            GRACEFUL_AND_HELPER: '- The ability of a BGP speaker to advertise its restart to its peers'
            HELPER_ONLY: |-
                - The ability for a BGP speaker to indicate its ability to preserve forwarding
                state during BGP restart
            ecmp_enabled: '- (Optional) - A flag indicating whether ECMP is enabled or not'
            edge_gateway_id: |-
                - (Required) The ID of the Edge Gateway (NSX-T only). Can be looked up using
                vcd_nsxt_edgegateway datasource
            enabled: '- (Required) Defines if BGP service is enabled or not'
            graceful_restart_mode: |-
                - (Optional) - Describes Graceful Restart configuration Modes for BGP
                configuration on an Edge Gateway. Read only for VRF backed Edge Gateways. Possible options are:
            graceful_restart_timer: |-
                - (Optional) Maximum time taken (in seconds) for a BGP session to be
                established after a restart. If the session is not re-established within this timer, the receiving
                speaker will delete all the stale routes from that peer. Read only for VRF backed Edge Gateways.
            local_as_number: |-
                - (Optional) BGP autonomous systems (AS) number to advertise to BGP peers. BGP
                AS number can be specified in either ASPLAIN or ASDOT formats, like ASPLAIN format : '65546',
                ASDOT format : '1.10'. Read only for VRF backed Edge Gateways
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations
            stale_route_timer: |-
                - (Optional) - Maximum time (in seconds) before stale routes are removed when
                BGP restarts. Read only for VRF backed Edge Gateways
        importStatements: []
    vcd_nsxt_edgegateway_bgp_ip_prefix_list:
        subCategory: ""
        description: Provides a resource to manage NSX-T Edge Gateway BGP IP Prefix Lists. IP prefix lists can contain single or multiple IP addresses and can be used to assign BGP neighbors with access permissions for route advertisement.
        name: vcd_nsxt_edgegateway_bgp_ip_prefix_list
        title: vcd_nsxt_edgegateway_bgp_ip_prefix_list
        examples:
            - name: testing
              manifest: |-
                {
                  "description": "This definition is meant only to demostrate capabilities",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.testing.id}",
                  "ip_prefix": [
                    {
                      "action": "PERMIT",
                      "network": "10.10.10.0/24"
                    },
                    {
                      "action": "DENY",
                      "network": "20.10.10.0/24"
                    },
                    {
                      "action": "DENY",
                      "network": "2001:db8::/48"
                    },
                    {
                      "action": "DENY",
                      "greater_than_or_equal_to": "25",
                      "less_than_or_equal_to": "27",
                      "network": "30.10.10.0/24"
                    },
                    {
                      "action": "PERMIT",
                      "greater_than_or_equal_to": "16",
                      "less_than_or_equal_to": "24",
                      "network": "40.0.0.0/8"
                    }
                  ],
                  "name": "sample-ip-prefix-list",
                  "org": "cloud"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.testing.id
        argumentDocs:
            action: '- (Required) Can be PERMIT or DENY'
            description: '- (Optional) Description of IP Prefix List'
            edge_gateway_id: |-
                - (Required) The ID of the Edge Gateway (NSX-T only). Can be looked up using
                vcd_nsxt_edgegateway datasource
            greater_than_or_equal_to: |-
                - (Optional) Greater than or equal to (ge) subnet mask to match. For
                example, 192.168.100.3/27 ge 26 le 32 modifiers match subnet masks greater than or equal to
                26-bits and less than or equal to 32-bits in length.
            ip_prefix: |-
                - (Required) At least one ip_prefix definition. See IP Prefix for
                definition structure.
            less_than_or_equal_to: |-
                - (Optional) Less than or equal to (le) subnet mask to match. For example,
                192.168.100.3/27 ge 26 le 32 modifiers match subnet masks greater than or equal to 26-bits and
                less than or equal to 32-bits in length.
            name: '- (Required) The Name of IP Prefix List'
            network: |-
                - (Required) Network information should be in CIDR notation. (e.g. IPv4
                192.168.100.0/24, IPv6 2001:db8::/48)
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations
        importStatements: []
    vcd_nsxt_edgegateway_bgp_neighbor:
        subCategory: ""
        description: Provides a resource to manage NSX-T Edge Gateway BGP Neighbors and their configuration.
        name: vcd_nsxt_edgegateway_bgp_neighbor
        title: vcd_nsxt_edgegateway_bgp_neighbor
        examples:
            - name: neighbor-one
              manifest: |-
                {
                  "allow_as_in": false,
                  "bfd_dead_multiple": 5,
                  "bfd_enabled": true,
                  "bfd_interval": 800,
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.testing.id}",
                  "graceful_restart_mode": "GRACEFUL_AND_HELPER",
                  "hold_down_timer": 400,
                  "in_filter_ip_prefix_list_id": "${data.vcd_nsxt_edgegateway_bgp_ip_prefix_list.in-1.id}",
                  "ip_address": "1.1.1.1",
                  "keep_alive_timer": 78,
                  "org": "datacloud",
                  "out_filter_ip_prefix_list_id": "${data.vcd_nsxt_edgegateway_bgp_ip_prefix_list.out-1.id}",
                  "remote_as_number": "62513",
                  "route_filtering": "IPV4"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.testing.id
                in_filter_ip_prefix_list_id: data.vcd_nsxt_edgegateway_bgp_ip_prefix_list.in-1.id
                out_filter_ip_prefix_list_id: data.vcd_nsxt_edgegateway_bgp_ip_prefix_list.out-1.id
        argumentDocs:
            DISABLE: '- Overrides the global edge gateway settings and disables graceful restart mode for this neighbor.'
            GRACEFUL_AND_HELPER: '- Overrides the global edge gateway settings and configures graceful restart mode as Graceful restart and Helper for this neighbor.'
            HELPER_ONLY: '- Overrides the global edge gateway settings and configures graceful restart mode as Helper only for this neighbor.'
            allow_as_in: '- (Optional) BGP Allow-as-in feature is used to allow the BGP speaker to accept the BGP updates even if its own BGP AS number is in the AS-Path attribute.'
            bfd_dead_multiple: '- (Optional) Number of times a heartbeat packet is missed before BFD declares that the neighbor is down'
            bfd_enabled: '- (Optional) Should Bidirectional Forwarding Detection (BFD) be enabled'
            bfd_interval: '- (Optional) Time interval (in milliseconds) between heartbeat packets'
            edge_gateway_id: |-
                - (Required) The ID of the edge gateway (NSX-T only). Can be looked up using
                vcd_nsxt_edgegateway datasource
            graceful_restart_mode: '- (Optional) BGP Neighbor Graceful Restart Mode. One of:'
            hold_down_timer: '- (Optional) Time interval (in seconds) before declaring a BGP peer dead'
            in_filter_ip_prefix_list_id: '- (Optional) The ID of the IP Prefix List to be used for filtering incoming BGP routes'
            ip_address: '- (Required) BGP Neighbor IP Address (IPv4 or IPv6)'
            keep_alive_timer: '- (Optional) Time interval (in seconds) between sending keep-alive messages to a BGP peer'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations
            out_filter_ip_prefix_list_id: '- (Optional) The ID of the IP Prefix List to be used for filtering outgoing BGP routes'
            password: '- (Optional) BGP Neighbor Password'
            remote_as_number: '- (Required) BGP Neighbor Remote Autonomous System (AS) Number'
            route_filtering: '- (Optional) Route filtering by IP Address family. One of DISABLED, IPV4, IPV6'
        importStatements: []
    vcd_nsxt_edgegateway_dhcp_forwarding:
        subCategory: ""
        description: Provides a resource to manage NSX-T Edge Gateway DHCP forwarding configuration.
        name: vcd_nsxt_edgegateway_dhcp_forwarding
        title: vcd_nsxt_edgegateway_dhcp_forwarding
        examples:
            - name: testing-in-vdc
              manifest: |-
                {
                  "dhcp_servers": [
                    "192.168.0.13",
                    "fe80::aaaa"
                  ],
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.testing-in-vdc.id}",
                  "enabled": true,
                  "org": "datacloud"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.testing-in-vdc.id
            - name: imported
              manifest: |-
                {
                  "dhcp_servers": [
                    "192.168.0.2"
                  ],
                  "edge_gateway_id": "${vcd_nsxt_edgegateway.nsxt-edge.id}",
                  "enabled": true,
                  "org": "my-org"
                }
              references:
                edge_gateway_id: vcd_nsxt_edgegateway.nsxt-edge.id
        argumentDocs:
            dhcp_servers: '- (Required) IP addresses of DHCP servers. Maximum 8 can be specified.'
            edge_gateway_id: '- (Required) NSX-T Edge Gateway ID.'
            enabled: '- (Required) DHCP Forwarding status.'
            org: |-
                - (Optional) Org in which the NSX-T Edge Gateway is located, required
                if not set in the provider section.
        importStatements: []
    vcd_nsxt_edgegateway_dhcpv6:
        subCategory: ""
        description: Provides a resource to manage DHCPv6 configuration for NSX-T Edge Gateways.
        name: vcd_nsxt_edgegateway_dhcpv6
        title: vcd_nsxt_edgegateway_dhcpv6
        examples:
            - name: dhcpv6-mode
              manifest: |-
                {
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.testing-in-vdc.id}",
                  "mode": "DHCPv6",
                  "org": "cloud"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.testing-in-vdc.id
            - name: slaac-mode
              manifest: |-
                {
                  "dns_servers": [
                    "2001:4860:4860::8888",
                    "2001:4860:4860::8844"
                  ],
                  "domain_names": [
                    "non-existing.org.tld",
                    "fake.org.tld"
                  ],
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.testing-in-vdc.id}",
                  "mode": "SLAAC",
                  "org": "datacloud"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.testing-in-vdc.id
            - name: slaac-mode
              manifest: |-
                {
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.testing-in-vdc.id}",
                  "mode": "DISABLED",
                  "org": "datacloud"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.testing-in-vdc.id
        argumentDocs:
            dns_servers: '- (Optional) Set of IPv6 DNS servers (only applicable for DHCPv6 mode)'
            domain_names: '- (Optional) Set of domain names (only applicable for DHCPv6 mode)'
            edge_gateway_id: '- (Required) NSX-T Edge Gateway ID'
            mode: |-
                - (Required) One of SLAAC (Stateless Address Autoconfiguration), DHCPv6 (Dynamic Host
                Configuration Protocol) or DISABLED (to disable the service). Note: destroying the resource
                will also disable DHCPv6.
            org: '- (Required) Org in which the NSX-T Edge Gateway is located'
        importStatements: []
    vcd_nsxt_edgegateway_dns:
        subCategory: ""
        description: Provides a resource to manage NSX-T Edge Gateway DNS configuration.
        name: vcd_nsxt_edgegateway_dns
        title: vcd_nsxt_edgegateway_dns
        examples:
            - name: testing-in-vdc
              manifest: |-
                {
                  "conditional_forwarder_zone": [
                    {
                      "domain_names": [
                        "example.org",
                        "nonexistent.org"
                      ],
                      "name": "conditional_testing",
                      "upstream_servers": [
                        "3.3.3.3",
                        "4.4.4.4"
                      ]
                    }
                  ],
                  "default_forwarder_zone": [
                    {
                      "name": "testing",
                      "upstream_servers": [
                        "1.1.1.1",
                        "2.2.2.2"
                      ]
                    }
                  ],
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.testing-in-vdc.id}",
                  "enabled": true,
                  "org": "datacloud"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.testing-in-vdc.id
        argumentDocs:
            conditional_forwarder_zone: |-
                - (Optional) A set (up to 5) of conditional forwarder zones that allows to define
                specific forwarding routes based on the domain. See conditional_forwarder_zone
            default_forwarder_zone: |-
                - (Required) The default forwarder zone to use if
                there’s no matching domain in the conditional forwarder zones. See default_forwarder_zone
            domain_names: '- (Required) Set of domain names on which conditional forwarding is based.'
            edge_gateway_id: '- (Required) NSX-T Edge Gateway ID.'
            enabled: '- (Optional) Status of the DNS forwarding service. Defaults to true.'
            listener_ip: |-
                - (Optional) The IP on which the DNS forwarder listens. If the Edge Gateway
                has a dedicated external network, this can be changed.
            name: '- (Required) Name of the forwarder zone.'
            org: |-
                - (Optional) Org in which the NSX-T Edge Gateway is located, required
                if not set in the provider section.
            snat_rule_enabled: |-
                - Is true if there exists a SNAT rule for the DNS forwarder.
                If the Edge Gateway is connected to a dedicated provider gateway and listener_ip
                is modified manually, this field will be set to false, otherwise true.
            snat_rule_ip_address: |-
                - (Optional, VCD 10.5.0+) This argument only applies if the Edge Gateway
                is connected to a Provider Gateway using IP Spaces. If specified, VCD will
                conveniently manage the SNAT rule with the specified IP address for the DNS forwarder.
                The specified IP can be allocated using vcd_ip_space_ip_allocation
                If not specified, the IP address will be computed and chosen by VCD.
            upstream_servers: |-
                - (Required) A set (up to 3) of IP addresses that the unmatched DNS
                requests should be forwarded to.
        importStatements: []
    vcd_nsxt_edgegateway_l2_vpn_tunnel:
        subCategory: ""
        description: Provides a resource to manage NSX-T Edge Gateway L2 VPN Tunnel sessions and their configurations.
        name: vcd_nsxt_edgegateway_l2_vpn_tunnel
        title: vcd_nsxt_edgegateway_l2_vpn_tunnel
        examples:
            - name: server-session
              manifest: |-
                {
                  "connector_initiation_mode": "ON_DEMAND",
                  "description": "example description",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.server-testing.id}",
                  "enabled": true,
                  "local_endpoint_ip": "10.10.50.2",
                  "name": "server-session",
                  "org": "datacloud",
                  "pre_shared_key": "secret_passphrase",
                  "remote_endpoint_ip": "1.2.2.3",
                  "session_mode": "SERVER",
                  "stretched_network": [
                    {
                      "network_id": "${data.vcd_network_routed_v2.test_network_server.id}"
                    }
                  ],
                  "tunnel_interface": "192.168.0.1/24"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.server-testing.id
                stretched_network.network_id: data.vcd_network_routed_v2.test_network_server.id
            - name: client-session
              manifest: |-
                {
                  "description": "example description",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.client-testing.id}",
                  "enabled": true,
                  "local_endpoint_ip": "101.22.30.3",
                  "name": "client-session",
                  "org": "datacloud",
                  "peer_code": "${vcd_nsxt_edgegateway_l2_vpn_tunnel.server-session.peer_code}",
                  "remote_endpoint_ip": "1.2.2.3",
                  "session_mode": "CLIENT",
                  "stretched_network": [
                    {
                      "network_id": "${data.vcd_network_routed_v2.test_network_client.id}",
                      "tunnel_id": 1
                    },
                    {
                      "network_id": "${data.vcd_network_routed_v2.test_network_client_other.id}",
                      "tunnel_id": 2
                    }
                  ]
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.client-testing.id
                peer_code: vcd_nsxt_edgegateway_l2_vpn_tunnel.server-session.peer_code
                stretched_network.network_id: data.vcd_network_routed_v2.test_network_client_other.id
            - name: imported
              manifest: |-
                {
                  "name": "my-tunnel",
                  "org": "my-org"
                }
        argumentDocs:
            INITIATOR: |-
                - Local endpoint initiates tunnel setup and will also respond to
                incoming tunnel setup requests from the peer gateway.
            ON_DEMAND: |-
                - In this mode local endpoint will initiate tunnel creation once
                first packet matching the policy rule is received, and will also respond to
                incoming initiation requests.
            RESPOND_ONLY: |-
                - Local endpoint shall only respond to incoming tunnel setup
                requests, it shall not initiate the tunnel setup.
            connector_initiation_mode: |-
                - (Optional) Mode in which the connection is formed.
                Required for SERVER mode sessions. One of:
            description: '- (Optional) The description of the tunnel.'
            edge_gateway_id: |-
                - (Required) The ID of the Edge Gateway (NSX-T only).
                Can be looked up using vcd_nsxt_edgegateway data source
            enabled: |-
                - (Optional) State of the SERVER mode session, always set to true for CLIENT
                mode sessions. Default is true.
            local_endpoint_ip: |-
                - (Required) The IP address corresponding to the Edge
                Gateway the tunnel is being configured on. The IP must be sub-allocated
                on the Edge Gateway.
            name: '- (Required) The name of the tunnel.'
            network_id: |-
                - (Required) Network ID of a routed network on the Edge Gateway.
                Can be looked up using vcd_network_routed_v2
                datasource.
            org: |-
                - (Optional) The name of organization to use, optional if defined at
                provider level. Useful when connected as sysadmin working across different organisations
            peer_code: |-
                - (Optional) Encoded string that contains the whole configuration
                of a SERVER mode session including the pre-shared key so it is user's
                responsibility to secure it. Computed for SERVER mode sessions, required for
                CLIENT mode sessions. See example
                for a solution implemented fully in Terraform.
            pre_shared_key: |-
                - (Optional) The key that is used for authenticating the
                connection. Required for SERVER mode sessions.
            remote_endpoint_ip: |-
                - (Required) The IP address of the remote endpoint, which
                corresponds to the device on the remote site terminating the VPN tunnel.
            session_mode: '- (Required) Mode of the tunnel session (SERVER or CLIENT).'
            stretched_network: |-
                - (Optional) One or more stretched networks for the tunnel.
                See stretched_network for more detail.
            tunnel_id: |-
                - (Optional) Tunnel ID of the network on the tunnel. Required for
                CLIENT mode sessions, computed for SERVER mode sessions.
            tunnel_interface: |-
                - (Optional) The network CIDR block over which the session
                interfaces. Relevant only for SERVER mode sessions. If not provided, Cloud
                Director will attempt to automatically allocate a tunnel interface.
        importStatements: []
    vcd_nsxt_edgegateway_rate_limiting:
        subCategory: ""
        description: Provides a resource to manage NSX-T Edge Gateway Rate Limiting (QoS) configuration.
        name: vcd_nsxt_edgegateway_rate_limiting
        title: vcd_nsxt_edgegateway_rate_limiting
        examples:
            - name: testing-in-vdc
              manifest: |-
                {
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.testing-in-vdc.id}",
                  "egress_profile_id": "${data.vcd_nsxt_edgegateway_qos_profile.qos-1.id}",
                  "ingress_profile_id": "${data.vcd_nsxt_edgegateway_qos_profile.qos-1.id}",
                  "org": "datacloud"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.testing-in-vdc.id
                egress_profile_id: data.vcd_nsxt_edgegateway_qos_profile.qos-1.id
                ingress_profile_id: data.vcd_nsxt_edgegateway_qos_profile.qos-1.id
        argumentDocs:
            edge_gateway_id: '- (Required) NSX-T Edge Gateway ID'
            egress_profile_id: |-
                - (Optional) A QoS profile to apply for egress traffic. Note leaving empty
                means unlimited.
            ingress_profile_id: |-
                - (Optional) A QoS profile to apply for ingress traffic. Note leaving empty
                means unlimited.
            org: '- (Required) Org in which the NSX-T Edge Gateway is located'
        importStatements: []
    vcd_nsxt_edgegateway_static_route:
        subCategory: ""
        description: Provides a resource to manage NSX-T Edge Gateway Static Routes.
        name: vcd_nsxt_edgegateway_static_route
        title: vcd_nsxt_edgegateway_static_route
        examples:
            - name: sr
              manifest: |-
                {
                  "description": "description for the route",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "name": "some-static-route",
                  "network_cidr": "192.168.1.0/24",
                  "next_hop": [
                    {
                      "admin_distance": 4,
                      "ip_address": "1.1.1.1",
                      "scope": [
                        {
                          "id": "${data.vcd_network_routed_v2.net.id}",
                          "type": "NETWORK"
                        }
                      ]
                    },
                    {
                      "admin_distance": 3,
                      "ip_address": "1.1.1.254",
                      "scope": [
                        {
                          "id": "${data.vcd_network_routed_v2.net.id}",
                          "type": "NETWORK"
                        }
                      ]
                    }
                  ]
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
                next_hop.scope.id: data.vcd_network_routed_v2.net.id
        argumentDocs:
            admin_distance: |-
                - (Required) Admin distance is used to choose which route to use when there are
                multiple routes for a specific network. The lower the admin distance, the higher the preference
                for the route. Starts with 1.
            description: '- (Optional) Description for NSX-T Edge Gateway Static Route'
            edge_gateway_id: '- (Required) NSX-T Edge Gateway ID'
            id: '- (Required) ID of Org VDC network or segment backed external network'
            ip_address: '- (Required) IP address for next hop gateway IP Address for the Static Route'
            name: '- (Required) Name for NSX-T Edge Gateway Static Route'
            network_cidr: |-
                - (Required) Specifies network prefix in CIDR format. Both IPv4 and IPv6 formats
                are supported.
            next_hop: |-
                - (Required) A set of next hops to use within the static route. At least one is
                required. See Next Hop for definition structure.
            scope: |-
                - (Optional) Scope holds a reference to an entity where the next hop of a Static Route is
                reachable. In general, the reference should be an Org VDC network or segment backed external
                network, but scope could also reference a SYSTEM_OWNED entity if the next hop is configured outside
                of VCD. See Next Hop Scope for definition structure.
            type: |-
                - (Required) Type of backing entity. In general this will be NETWORK but can become
                SYSTEM_OWNED if the Static Route is modified outside of VCD
        importStatements: []
    vcd_nsxt_firewall:
        subCategory: ""
        description: Provides a resource to manage NSX-T Firewall. Firewalls allow user to control the incoming and outgoing network traffic to and from an NSX-T Data Center Edge Gateway.
        name: vcd_nsxt_firewall
        title: vcd_nsxt_firewall
        examples:
            - name: testing
              manifest: |-
                {
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.testing.id}",
                  "org": "my-org",
                  "rule": [
                    {
                      "action": "ALLOW",
                      "direction": "IN_OUT",
                      "ip_protocol": "IPV4",
                      "name": "allow all IPv4 traffic"
                    }
                  ]
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.testing.id
            - name: testing
              manifest: |-
                {
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.testing.id}",
                  "org": "my-org",
                  "rule": [
                    {
                      "action": "ALLOW",
                      "direction": "IN",
                      "ip_protocol": "IPV4",
                      "name": "first rule",
                      "source_ids": [
                        "${vcd_nsxt_security_group.frontend.id}"
                      ]
                    },
                    {
                      "action": "DROP",
                      "destination_ids": [
                        "${vcd_nsxt_security_group.group2.id}"
                      ],
                      "direction": "OUT",
                      "ip_protocol": "IPV6",
                      "logging": true,
                      "name": "drop IPv6 with destination to security group 2"
                    },
                    {
                      "action": "ALLOW",
                      "app_port_profile_ids": [
                        "${data.vcd_nsxt_app_port_profile.ssh.id}",
                        "${vcd_nsxt_app_port_profile.custom-app.id}"
                      ],
                      "destination_ids": "${vcd_nsxt_security_group.group.*.id}",
                      "direction": "IN_OUT",
                      "ip_protocol": "IPV4_IPV6",
                      "name": "test_rule-3",
                      "source_ids": [
                        "${vcd_nsxt_security_group.group.1.id}"
                      ]
                    }
                  ]
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.testing.id
        argumentDocs:
            action: '- (Required) Defines if it should ALLOW, DROP or REJECT traffic'
            app_port_profile_ids: '- (Optional) A set of Application Port Profiles. Leaving it empty matches Any (all)'
            destination_ids: |-
                - (Optional) A set of source object Firewall Groups (IP Sets or Security groups).
                Leaving it empty matches Any (all)
            direction: '- (Required) One of IN, OUT, or IN_OUT'
            edge_gateway_id: |-
                - (Required) The ID of the Edge Gateway (NSX-T only). Can be looked up using
                vcd_nsxt_edgegateway datasource
            enabled: '- (Optional) Defines if the rule is enabled (default true)'
            ip_protocol: '- (Required) One of IPV4,  IPV6, or IPV4_IPV6'
            logging: '- (Optional) Defines if logging for this rule is enabled (default false)'
            name: '- (Required) Explanatory name for firewall rule (uniqueness not enforced)'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            rule: '- (Required) One or more blocks with Firewall Rule definitions'
            source_ids: |-
                - (Optional) A set of source object Firewall Groups (IP Sets or Security groups).
                Leaving it empty matches Any (all)
        importStatements: []
    vcd_nsxt_global_default_segment_profile_template:
        subCategory: ""
        description: Provides a resource to manage Global Default NSX-T Segment Profile Templates.
        name: vcd_nsxt_global_default_segment_profile_template
        title: vcd_nsxt_global_default_segment_profile_template
        examples:
            - name: singleton
              manifest: |-
                {
                  "vapp_networks_default_segment_profile_template_id": "${vcd_nsxt_segment_profile_template.empty.id}",
                  "vdc_networks_default_segment_profile_template_id": "${vcd_nsxt_segment_profile_template.complete.id}"
                }
              references:
                vapp_networks_default_segment_profile_template_id: vcd_nsxt_segment_profile_template.empty.id
                vdc_networks_default_segment_profile_template_id: vcd_nsxt_segment_profile_template.complete.id
        argumentDocs:
            vapp_networks_default_segment_profile_template_id: |-
                - (Optional) Global Default Segment Profile
                Template ID for all vApp Networks
            vdc_networks_default_segment_profile_template_id: |-
                - (Optional) Global Default Segment Profile
                Template ID for all VDC Networks
        importStatements: []
    vcd_nsxt_ip_set:
        subCategory: ""
        description: Provides a resource to manage NSX-T IP Set. IP Sets are groups of objects to which the firewall rules apply. Combining multiple objects into IP Sets helps reduce the total number of firewall rules to be created.
        name: vcd_nsxt_ip_set
        title: vcd_nsxt_ip_set
        examples:
            - name: set1
              manifest: |-
                {
                  "description": "IP Set containing IPv4 and IPv6 ranges",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.main.id}",
                  "ip_addresses": [
                    "12.12.12.1",
                    "10.10.10.0/24",
                    "11.11.11.1-11.11.11.2",
                    "2001:db8::/48",
                    "2001:db6:0:0:0:0:0:0-2001:db6:0:ffff:ffff:ffff:ffff:ffff"
                  ],
                  "name": "first-ip-set",
                  "org": "my-org"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.main.id
        argumentDocs:
            description: '- (Optional) An optional description of the IP Set'
            edge_gateway_id: |-
                - (Required) The ID of the Edge Gateway (NSX-T only). Can be looked up using
                vcd_nsxt_edgegateway data source.
            ip_addresses: '- (Optional) A set of IP addresses, subnets or ranges (IPv4 or IPv6)'
            name: '- (Required) A unique name for IP Set'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            vdc: |-
                - (Deprecated; Optional) The name of VDC to use, optional if defined at provider level. Deprecated
                in favor of edge_gateway_id field.
        importStatements: []
    vcd_nsxt_ipsec_vpn_tunnel:
        subCategory: ""
        description: Provides a resource to manage NSX-T IPsec VPN Tunnel. You can configure site-to-site connectivity between an NSX-T Data Center Edge Gateway and remote sites. The remote sites must use NSX-T Data Center, have third-party hardware routers, or VPN gateways that support IPSec.
        name: vcd_nsxt_ipsec_vpn_tunnel
        title: vcd_nsxt_ipsec_vpn_tunnel
        examples:
            - name: tunnel1
              manifest: |-
                {
                  "description": "testing tunnel",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "local_ip_address": "${tolist(data.vcd_nsxt_edgegateway.existing_gw.subnet)[0].primary_ip}",
                  "local_networks": [
                    "10.10.10.0/24",
                    "30.30.30.0/28",
                    "40.40.40.1/32"
                  ],
                  "name": "First",
                  "org": "my-org",
                  "pre_shared_key": "my-presharaed-key",
                  "remote_ip_address": "1.2.3.4",
                  "remote_networks": [
                    "192.168.1.0/24",
                    "192.168.10.0/24",
                    "192.168.20.0/28"
                  ]
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
            - name: tunnel1
              manifest: |-
                {
                  "description": "IPsec VPN Tunnel with customized security profile",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "local_ip_address": "${tolist(data.vcd_nsxt_edgegateway.existing_gw.subnet)[0].primary_ip}",
                  "local_networks": [
                    "10.10.10.0/24",
                    "30.30.30.0/28",
                    "40.40.40.1/32"
                  ],
                  "name": "customized-sec-profile",
                  "org": "my-org",
                  "pre_shared_key": "test-psk",
                  "remote_ip_address": "1.2.3.4",
                  "remote_networks": [
                    "192.168.1.0/24",
                    "192.168.10.0/24",
                    "192.168.20.0/28"
                  ],
                  "security_profile_customization": [
                    {
                      "dpd_probe_internal": "30",
                      "ike_dh_groups": [
                        "GROUP14"
                      ],
                      "ike_digest_algorithms": [
                        "SHA2_256"
                      ],
                      "ike_encryption_algorithms": [
                        "AES_128"
                      ],
                      "ike_sa_lifetime": 86400,
                      "ike_version": "IKE_V2",
                      "tunnel_df_policy": "COPY",
                      "tunnel_dh_groups": [
                        "GROUP14"
                      ],
                      "tunnel_digest_algorithms": [
                        "SHA2_256"
                      ],
                      "tunnel_encryption_algorithms": [
                        "AES_256"
                      ],
                      "tunnel_pfs_enabled": true,
                      "tunnel_sa_lifetime": 3600
                    }
                  ]
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
            - name: tunnel1
              manifest: |-
                {
                  "authentication_mode": "CERTIFICATE",
                  "ca_certificate_id": "${data.vcd_library_certificate.ca-cert.id}",
                  "certificate_id": "${data.vcd_library_certificate.cert.id}",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "local_ip_address": "${tolist(data.vcd_nsxt_edgegateway.existing_gw.subnet)[0].primary_ip}",
                  "local_networks": [
                    "10.10.10.0/24",
                    "30.30.30.0/28",
                    "40.40.40.1/32"
                  ],
                  "name": "cert-tunnel",
                  "org": "my-org",
                  "remote_id": "cert-san",
                  "remote_ip_address": "1.2.3.4",
                  "remote_networks": [
                    "192.168.1.0/24",
                    "192.168.10.0/24",
                    "192.168.20.0/28"
                  ]
                }
              references:
                ca_certificate_id: data.vcd_library_certificate.ca-cert.id
                certificate_id: data.vcd_library_certificate.cert.id
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
        argumentDocs:
            authentication_mode: |-
                - (Optional, v3.9+) PSK (pre-shared key) or CERTIFICATE (default -
                PSK)
            ca_certificate_id: |-
                - (Optional, v3.9+) CA Certificate ID (can be handled by
                vcd_library_certificate resource or datasource) Note authentication_mode must be set to
                CERTIFICATE
            certificate_id: |-
                - (Optional, v3.9+) Certificate ID (can be handled by vcd_library_certificate
                resource or datasource). Note authentication_mode must be set to CERTIFICATE
            description: '- (Optional) An optional description of the NSX-T IPsec VPN Tunnel'
            dpd_probe_internal: |-
                - (Required) Value in seconds of dead probe detection interval. Minimum is 3 seconds and the
                maximum is 60 seconds
            edge_gateway_id: |-
                - (Required) The ID of the Edge Gateway (NSX-T only). Can be looked up using
                vcd_nsxt_edgegateway data source
            enabled: '- (Optional) Enables or disables IPsec VPN Tunnel (default true)'
            ike_dh_groups: |-
                - (Required) Diffie-Hellman groups to be used if Perfect Forward Secrecy is enabled. One of
                GROUP2, GROUP5, GROUP14, GROUP15, GROUP16, GROUP19, GROUP20, GROUP21
            ike_digest_algorithms: |-
                - (Required) Secure hashing algorithms to use during the IKE negotiation. One of SHA1,
                SHA2_256, SHA2_384, SHA2_512
            ike_encryption_algorithms: |-
                - (Required) Encryption algorithms One of AES_128, AES_256, AES_GCM_128, AES_GCM_192,
                AES_GCM_256
            ike_fail_reason: '- Provides more details of failure if the IKE service is not UP'
            ike_sa_lifetime: |-
                - (Required) Security association lifetime in seconds. It is number of seconds before the IPsec
                tunnel needs to reestablish
            ike_service_status: '- Status for the actual IKE Session for the given tunnel'
            ike_version: '- (Required) One of IKE_V1, IKE_V2, IKE_FLEX'
            local_ip_address: '- (Required) IPv4 Address for the endpoint. This has to be a suballocated IP on the Edge Gateway.'
            local_networks: '- (Required) A set of local networks in CIDR format. At least one value required'
            logging: '- (Optional) Sets whether logging for the tunnel is enabled or not. (default - false)'
            name: '- (Required) A name for NSX-T IPsec VPN Tunnel'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            pre_shared_key: |-
                - (Required) Pre-shared key for negotiation. Note the pre-shared key must be
                the same on the other end of the IPSec VPN tunnel and authentication_mode must be PSK
            remote_id: |-
                - (Optional, v3.9+) Remote ID uniquely identifies the peer site. If the remote ID is
                not set, it will default to the remote IP address
            remote_ip_address: '- (Required) Public IPv4 Address of the remote device terminating the VPN connection'
            remote_networks: '- (Optional) Set of remote networks in CIDR format. Leaving it empty is interpreted as 0.0.0.0/0'
            security_profile: '- DEFAULT for system provided configuration or CUSTOM if security_profile_customization is set'
            security_profile_customization: |-
                - (Optional) a block allowing to
                customize default security profile parameters
            status: '- Overall IPsec VPN Tunnel Status'
            tunnel_df_policy: '- (Required) Policy for handling defragmentation bit. One of COPY, CLEAR'
            tunnel_dh_groups: |-
                - (Required) Diffie-Hellman groups to be used is PFS is enabled.
                One of GROUP2, GROUP5, GROUP14, GROUP15, GROUP16, GROUP19, GROUP20, GROUP21
            tunnel_digest_algorithms: |-
                - (Required) Digest algorithms to be used for message digest.
                One of SHA1, SHA2_256, SHA2_384, SHA2_512
            tunnel_encryption_algorithms: |-
                - (Required) Encryption algorithms to use in IPSec tunnel establishment.
                One of AES_128, AES_256, AES_GCM_128, AES_GCM_192, AES_GCM_256, NO_ENCRYPTION_AUTH_AES_GMAC_128,
                NO_ENCRYPTION_AUTH_AES_GMAC_192, NO_ENCRYPTION_AUTH_AES_GMAC_256, NO_ENCRYPTION
            tunnel_pfs_enabled: '- (Required) PFS (Perfect Forward Secrecy) enabled or disabled.'
            tunnel_sa_lifetime: '- (Required) Security Association life time in seconds'
        importStatements: []
    vcd_nsxt_nat_rule:
        subCategory: ""
        description: Provides a resource to manage NSX-T NAT rules. To change the source IP address from a private to a public IP address, you create a source NAT (SNAT) rule. To change the destination IP address from a public to a private IP address, you create a destination NAT (DNAT) rule.
        name: vcd_nsxt_nat_rule
        title: vcd_nsxt_nat_rule
        examples:
            - name: snat
              manifest: |-
                {
                  "description": "description",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "external_address": "${tolist(data.vcd_nsxt_edgegateway.existing.subnet)[0].primary_ip}",
                  "internal_address": "11.11.11.0/24",
                  "logging": true,
                  "name": "SNAT rule",
                  "org": "dainius",
                  "rule_type": "SNAT",
                  "snat_destination_address": "8.8.8.8"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
            - name: no-snat
              manifest: |-
                {
                  "description": "description",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "internal_address": "11.11.11.0/24",
                  "name": "test-no-snat-rule",
                  "org": "dainius",
                  "rule_type": "NO_SNAT"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
            - name: dnat
              manifest: |-
                {
                  "description": "description",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "external_address": "${tolist(data.vcd_nsxt_edgegateway.existing.subnet)[0].primary_ip}",
                  "internal_address": "11.11.11.2",
                  "logging": true,
                  "name": "test-dnat-rule",
                  "org": "my-org",
                  "rule_type": "DNAT"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
            - name: no-dnat
              manifest: |-
                {
                  "dnat_external_port": 7777,
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "external_address": "${tolist(data.vcd_nsxt_edgegateway.existing.subnet)[0].primary_ip}",
                  "name": "test-no-dnat-rule",
                  "org": "my-org",
                  "rule_type": "NO_DNAT",
                  "vdc": "nsxt-vdc"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
            - name: reflexive
              manifest: |-
                {
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "external_address": "${tolist(data.vcd_nsxt_edgegateway.existing.subnet)[0].primary_ip}",
                  "internal_address": "11.11.11.2",
                  "name": "test-reflexive",
                  "org": "my-org",
                  "rule_type": "REFLEXIVE"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
        argumentDocs:
            BYPASS: '- skip applying firewall rules to NAT rule'
            DNAT: rule translates the external IP to an internal IP and is used for inbound traffic
            MATCH_EXTERNAL_ADDRESS: '- applies firewall rules to the external address of a NAT rule'
            MATCH_INTERNAL_ADDRESS: '- applies firewall rules to the internal address of a NAT rule'
            NO_DNAT: prevents external IP translation
            NO_SNAT: prevents internal IP translation
            REFLEXIVE: |-
                (VCD 10.3+)  is also known as Stateless NAT. This translates an internal IP to an external IP and vice
                versa. The number of internal addresses should be exactly the same as that of external addresses.
            SNAT: translates an internal IP to an external IP and is used for outbound traffic
            app_port_profile_id: |-
                (Optional) - Application Port Profile to which to apply the rule. The
                Application Port Profile includes a port, and a protocol that the incoming traffic uses on the edge
                gateway to connect to the internal network.  Can be looked up using vcd_nsxt_app_port_profile
                data source or created using vcd_nsxt_app_port_profile resource
            description: '- (Optional) An optional description of the NAT rule'
            dnat_external_port: |-
                (Optional) - For DNAT only. This represents the external port number or port range when doing
                DNAT port forwarding from external to internal. The default dnatExternalPort is “ANY” meaning traffic on any port
                for the given IPs selected will be translated.
            edge_gateway_id: |-
                - (Required) The ID of the Edge Gateway (NSX-T only). Can be looked up using
                vcd_nsxt_edgegateway data source
            enabled: (Optional) - Enables or disables NAT rule (default true)
            external_address: |-
                (Optional) The external address for the NAT Rule. This must be supplied as a single IP or Network
                CIDR. For a DNAT rule, this is the external facing IP Address for incoming traffic. For an SNAT rule, this is the
                external facing IP Address for outgoing traffic. These IPs are typically allocated/suballocated IP Addresses on the
                Edge Gateway. For a REFLEXIVE rule, these are the external facing IPs.
            firewall_match: |-
                (Optional, VCD 10.2.2+) - You can set a firewall match rule to determine how
                firewall is applied during NAT. One of MATCH_INTERNAL_ADDRESS, MATCH_EXTERNAL_ADDRESS,
                BYPASS
            internal_address: |-
                (Optional) The internal address for the NAT Rule. This must be supplied as a single IP or
                Network CIDR. For a DNAT rule, this is the internal IP address for incoming traffic. For an SNAT rule, this is the
                internal IP Address for outgoing traffic. For a REFLEXIVE rule, these are the internal IPs.
                These IPs are typically the Private IPs that are allocated to workloads.
            logging: |-
                (Optional) - Enable to have the address translation performed by this rule logged
                (default false). Note User might lack rights (Organization Administrator role by default
                is missing Gateway -> Configure System Logging right) to enable logging, but API does not
                return error and it is not possible to validate it. terraform plan might show difference on
                every update.
            name: '- (Required) A name for NAT rule'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            priority: |-
                (Optional, VCD 10.2.2+) - if an address has multiple NAT rules, you can assign these
                rules different priorities to determine the order in which they are applied. A lower value means a
                higher priority for this rule.
            rule_type: '- (Required) One of DNAT, NO_DNAT, SNAT, NO_SNAT, REFLEXIVE'
            snat_destination_address: |-
                (Optional) For SNAT only. The destination addresses to match in the SNAT Rule. This
                must be supplied as a single IP or Network CIDR. Providing no value for this field results in match with ANY
                destination network.
        importStatements: []
    vcd_nsxt_network_dhcp:
        subCategory: ""
        description: Provides a resource to manage DHCP pools for NSX-T Org VDC networks.
        name: vcd_nsxt_network_dhcp
        title: vcd_nsxt_network_dhcp
        examples:
            - name: pools
              manifest: |-
                {
                  "org_network_id": "${vcd_network_routed_v2.parent-network.id}",
                  "pool": [
                    {
                      "end_address": "7.1.1.110",
                      "start_address": "7.1.1.100"
                    },
                    {
                      "end_address": "7.1.1.112",
                      "start_address": "7.1.1.111"
                    }
                  ]
                }
              references:
                org_network_id: vcd_network_routed_v2.parent-network.id
              dependencies:
                vcd_network_routed_v2.parent-network: |-
                    {
                      "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                      "gateway": "7.1.1.1",
                      "name": "nsxt-routed-dhcp",
                      "prefix_length": 24,
                      "static_ip_pool": [
                        {
                          "end_address": "7.1.1.20",
                          "start_address": "7.1.1.10"
                        }
                      ]
                    }
            - name: pools
              manifest: |-
                {
                  "listener_ip_address": "7.1.1.254",
                  "mode": "NETWORK",
                  "org": "cloud",
                  "org_network_id": "${vcd_network_isolated_v2.net1.id}",
                  "pool": [
                    {
                      "end_address": "7.1.1.110",
                      "start_address": "7.1.1.100"
                    }
                  ],
                  "vdc": "${vcd_org_vdc.with-edge-cluster.name}"
                }
              references:
                org_network_id: vcd_network_isolated_v2.net1.id
                vdc: vcd_org_vdc.with-edge-cluster.name
              dependencies:
                vcd_network_isolated_v2.net1: |-
                    {
                      "gateway": "7.1.1.1",
                      "name": "private-network",
                      "org": "cloud",
                      "owner_id": "${vcd_org_vdc.with-edge-cluster.id}",
                      "prefix_length": 24,
                      "static_ip_pool": [
                        {
                          "end_address": "7.1.1.20",
                          "start_address": "7.1.1.10"
                        }
                      ]
                    }
            - name: pools
              manifest: |-
                {
                  "mode": "RELAY",
                  "org": "cloud",
                  "org_network_id": "${vcd_network_routed_v2.net1.id}",
                  "vdc": "nsxt-vdc-cloud"
                }
              references:
                org_network_id: vcd_network_routed_v2.net1.id
              dependencies:
                vcd_network_routed_v2.net1: |-
                    {
                      "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                      "gateway": "7.1.1.1",
                      "name": "nsxt-routed-dhcp",
                      "org": "cloud",
                      "prefix_length": 24,
                      "static_ip_pool": [
                        {
                          "end_address": "7.1.1.20",
                          "start_address": "7.1.1.10"
                        }
                      ],
                      "vdc": "nsxt-vdc-cloud"
                    }
                vcd_nsxt_edgegateway_dhcp_forwarding.dhcp-forwarding: |-
                    {
                      "dhcp_servers": [
                        "65.43.21.0",
                        "fe80::abcd"
                      ],
                      "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                      "enabled": true
                    }
        argumentDocs:
            EDGE: can be used with Routed Org VDC networks.
            NETWORK: |-
                can be used for Isolated and Routed Org VDC networks. It requires
                listener_ip_address to be set and Edge Cluster must be assigned to VDC.
            RELAY: |-
                can be used with Routed Org VDC networks, but requires DHCP forwarding configuration in
                NSX-T Edge Gateway.
            dns_servers: |-
                - (Optional; v3.7+; VCD 10.3.1+) - The DNS server IPs to be assigned by this
                DHCP service. Maximum two values.
            end_address: '- (Required) End address of DHCP pool range'
            lease_time: |-
                - (Optional; v3.8+; VCD 10.3.1+) - Lease time in seconds. Minimum value is 60s
                and maximum is 4294967295s (~ 49 days).
            listener_ip_address: |-
                - (Optional; v3.8+) IP address of DHCP server in network. Must match
                subnet. Only used when mode=NETWORK.
            mode: '- (Optional; v3.8+) One of EDGE, NETWORK or RELAY. Default is EDGE'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            org_network_id: '- (Required) ID of parent Org VDC Routed network.'
            pool: |-
                - (Optional) One or more blocks to define DHCP pool ranges. Must not be set when
                mode=RELAY. See Pools and example for usage details.
            start_address: '- (Required) Start address of DHCP pool range'
        importStatements: []
    vcd_nsxt_network_dhcp_binding:
        subCategory: ""
        description: Provides a resource to manage NSX-T Org VDC network DHCP bindings.
        name: vcd_nsxt_network_dhcp_binding
        title: vcd_nsxt_network_dhcp_binding
        examples:
            - name: binding2
              manifest: |-
                {
                  "binding_type": "IPV4",
                  "description": "DHCP binding description",
                  "dhcp_v4_config": [
                    {
                      "gateway_ip_address": "7.1.1.233",
                      "hostname": "non-existent"
                    }
                  ],
                  "dns_servers": [
                    "7.1.1.242",
                    "7.1.1.243"
                  ],
                  "ip_address": "7.1.1.190",
                  "lease_time": 3600,
                  "mac_address": "00:11:22:33:44:66",
                  "name": "DHCP Binding",
                  "org": "cloud",
                  "org_network_id": "${vcd_nsxt_network_dhcp.pools.id}"
                }
              references:
                org_network_id: vcd_nsxt_network_dhcp.pools.id
              dependencies:
                vcd_nsxt_network_dhcp.pools: |-
                    {
                      "listener_ip_address": "7.1.1.254",
                      "mode": "NETWORK",
                      "org": "cloud",
                      "org_network_id": "${vcd_network_isolated_v2.net1.id}",
                      "pool": [
                        {
                          "end_address": "7.1.1.110",
                          "start_address": "7.1.1.100"
                        }
                      ]
                    }
            - name: ipv6-binding1
              manifest: |-
                {
                  "binding_type": "IPV6",
                  "dhcp_v6_config": [
                    {
                      "domain_names": [
                        "non-existing.org.tld",
                        "fake.org.tld"
                      ],
                      "sntp_servers": [
                        "4b0d:74eb:ee01:0ff4:ab1b:f7cc:4d74:d2a3",
                        "cc80:5498:18da:0883:d78a:4e4b:754d:df47"
                      ]
                    }
                  ],
                  "ip_address": "2002:0:0:1234:abcd:ffff:c0a6:127",
                  "lease_time": 3600,
                  "mac_address": "00:11:22:33:44:66",
                  "name": "IPv6 DHCP Binding-1",
                  "org": "cloud",
                  "org_network_id": "${vcd_nsxt_network_dhcp.routed-ipv6-dual-stack.id}"
                }
              references:
                org_network_id: vcd_nsxt_network_dhcp.routed-ipv6-dual-stack.id
              dependencies:
                vcd_network_routed_v2.ipv6-dualstack: |-
                    {
                      "dual_stack_enabled": true,
                      "edge_gateway_id": "${vcd_nsxt_edgegateway.nsxt-edge.id}",
                      "gateway": "192.168.1.1",
                      "name": "Dual stack routed network",
                      "org": "cloud",
                      "prefix_length": 24,
                      "secondary_gateway": "2002:0:0:1234:abcd:ffff:c0a6:121",
                      "secondary_prefix_length": 124,
                      "secondary_static_ip_pool": [
                        {
                          "end_address": "2002:0:0:1234:abcd:ffff:c0a6:124",
                          "start_address": "2002:0:0:1234:abcd:ffff:c0a6:122"
                        }
                      ],
                      "static_ip_pool": [
                        {
                          "end_address": "192.168.1.20",
                          "start_address": "192.168.1.10"
                        }
                      ]
                    }
                vcd_nsxt_edgegateway_dhcpv6.test: |-
                    {
                      "edge_gateway_id": "${vcd_nsxt_edgegateway.nsxt-edge.id}",
                      "enabled": true,
                      "mode": "DHCPv6",
                      "org": "cloud"
                    }
                vcd_nsxt_network_dhcp.routed-ipv6-dual-stack: |-
                    {
                      "depends_on": [
                        "${vcd_nsxt_edgegateway_dhcpv6.test}"
                      ],
                      "listener_ip_address": "2002:0:0:1234:abcd:ffff:c0a6:129",
                      "mode": "NETWORK",
                      "org": "cloud",
                      "org_network_id": "${vcd_network_routed_v2.ipv6-dualstack.id}",
                      "pool": [
                        {
                          "end_address": "2002:0:0:1234:abcd:ffff:c0a6:126",
                          "start_address": "2002:0:0:1234:abcd:ffff:c0a6:125"
                        }
                      ]
                    }
        argumentDocs:
            binding_type: '- (Required) One of IPV4 or IPV6'
            dhcp_v4_config: '- (Optional) Additional configuration for IPv4 specific options. See IPv4 block'
            dhcp_v6_config: '- (Optional, v3.10+) Additional configuration for IPv6 specific options. See IPv6 block'
            dns_servers: '- (Optional) A list of DNS servers. Maximum 2 can be specified'
            domain_names: '- (Optional) A set of domain names'
            gateway_ip_address: '- (Optional) Gateway IP address to use for the client'
            hostname: '- (Optional) Hostname to be set for client'
            ip_address: '- (Required) IP address used for binding'
            lease_time: '- (Required) Lease time in seconds. Minimum 3600 seconds'
            mac_address: '- (Required) MAC address used for binding'
            org: '- (Optional) The name of organization. Optional if defined at provider level'
            org_network_id: |-
                - (Required) The ID of an Org VDC network. Note  (.id field) of
                vcd_network_isolated_v2, vcd_network_routed_v2 or vcd_nsxt_network_dhcp can be referenced
                here. It is more convenient to use reference to vcd_nsxt_network_dhcp ID because it makes sure
                that DHCP is enabled before configuring pools
            sntp_servers: '- (Optional) A set of SNTP servers'
        importStatements: []
    vcd_nsxt_network_imported:
        subCategory: ""
        description: Provides a VMware Cloud Director Org VDC NSX-T Imported Network type. This can be used to create, modify, and delete NSX-T VDC networks of Imported type (backed by NSX-T).
        name: vcd_nsxt_network_imported
        title: vcd_nsxt_network_imported
        examples:
            - name: nsxt-backed
              manifest: |-
                {
                  "description": "My NSX-T VDC Imported network type",
                  "gateway": "1.1.1.1",
                  "name": "nsxt-imported",
                  "nsxt_logical_switch_name": "nsxt_segment_name",
                  "org": "my-org",
                  "owner_id": "${data.vcd_org_vdc.main.id}",
                  "prefix_length": 24,
                  "static_ip_pool": [
                    {
                      "end_address": "1.1.1.20",
                      "start_address": "1.1.1.10"
                    },
                    {
                      "end_address": "1.1.1.103",
                      "start_address": "1.1.1.100"
                    }
                  ]
                }
              references:
                owner_id: data.vcd_org_vdc.main.id
            - name: ipv6-dualstack
              manifest: |-
                {
                  "dual_stack_enabled": true,
                  "gateway": "192.168.1.1",
                  "name": "dual-stack-imported",
                  "nsxt_logical_switch_name": "segment-cloud",
                  "prefix_length": 24,
                  "secondary_gateway": "2002:0:0:1234:abcd:ffff:c0a6:121",
                  "secondary_prefix_length": 124,
                  "secondary_static_ip_pool": [
                    {
                      "end_address": "2002:0:0:1234:abcd:ffff:c0a6:124",
                      "start_address": "2002:0:0:1234:abcd:ffff:c0a6:122"
                    }
                  ],
                  "static_ip_pool": [
                    {
                      "end_address": "192.168.1.20",
                      "start_address": "192.168.1.10"
                    }
                  ],
                  "vdc": "${vcd_org_vdc.with-edge-cluster.name}"
                }
              references:
                vdc: vcd_org_vdc.with-edge-cluster.name
            - name: nsxt-backed
              manifest: |-
                {
                  "dvpg_name": "vc-dvpg",
                  "gateway": "1.1.1.1",
                  "name": "nsxt-imported",
                  "org": "my-org",
                  "owner_id": "${data.vcd_org_vdc.main.id}",
                  "prefix_length": 24,
                  "static_ip_pool": [
                    {
                      "end_address": "1.1.1.20",
                      "start_address": "1.1.1.10"
                    },
                    {
                      "end_address": "1.1.1.103",
                      "start_address": "1.1.1.100"
                    }
                  ]
                }
              references:
                owner_id: data.vcd_org_vdc.main.id
            - name: tf-mynet
              manifest: |-
                {
                  "name": "my-net",
                  "org": "my-org",
                  "vdc": "my-vdc"
                }
        argumentDocs:
            description: '- (Optional) An optional description of the network'
            dns_suffix: '- (Optional) A FQDN for the virtual machines on this network'
            dns1: '- (Optional) First DNS server to use.'
            dns2: '- (Optional) Second DNS server to use.'
            dual_stack_enabled: |-
                - (Optional; v3.10+) Enables Dual-Stack mode so that one can configure one
                IPv4 and one IPv6 networks. Note In such case IPv4 addresses must be used in gateway,
                prefix_length and static_ip_pool while IPv6 addresses in secondary_gateway,
                secondary_prefix_length and secondary_static_ip_pool fields.
            dvpg_id: '- ID of Distributed Virtual Port Group used by this network'
            dvpg_name: |-
                - (Optional) Unique name of an existing Distributed Virtual Port Group (DVPG).
                Note it will never be refreshed because API does not allow reading this name after it is
                consumed. Instead ID will be stored in dvpg_id attribute.
            end_address: '- (Required) The final address in the IP Range'
            gateway: '- (Required) The gateway for this network (e.g. 192.168.1.1, 2002:0:0:1234:abcd:ffff:c0a7:121)'
            name: '- (Required) A unique name for the network'
            nsxt_logical_switch_id: '- ID of NSX-T logical switch used by this network'
            nsxt_logical_switch_name: |-
                - (Optional) Unique name of an existing NSX-T segment.
                Note it will never be refreshed because API does not allow reading this name after it is
                consumed. Instead ID will be stored in nsxt_logical_switch_id attribute.
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful when
                connected as sysadmin working across different organisations
            owner_id: |-
                - (Optional) VDC or VDC Group ID. Always takes precedence over vdc fields (in resource
                and inherited from provider configuration)
            prefix_length: '- (Required) The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).'
            secondary_gateway: '- (Optional; v3.10+) IPv6 gateway when Dual-Stack mode is enabled'
            secondary_prefix_length: |-
                - (Optional; v3.10+) IPv6 prefix length when Dual-Stack mode is
                enabled
            secondary_static_ip_pool: |-
                - (Optional; v3.10+) One or more IPv6 static
                pools when Dual-Stack mode is enabled
            start_address: '- (Required) The first address in the IP Range'
            static_ip_pool: |-
                - (Optional) A range of IPs permitted to be used as static IPs for
                virtual machines; see IP Pools below for details.
            vdc: |-
                - (Deprecated; Optional) The name of VDC to use. Deprecated  in favor of new field
                owner_id which supports VDC and VDC Group IDs.
        importStatements: []
    vcd_nsxt_route_advertisement:
        subCategory: ""
        description: Provides a VMware Cloud Director resource for setting route advertisement in an NSX-T Edge Gateway.
        name: vcd_nsxt_route_advertisement
        title: vcd_nsxt_route_advertisement
        examples:
            - name: my_route_advertisement
              manifest: |-
                {
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.my_edge_gateway.id}",
                  "enabled": true,
                  "subnets": [
                    "192.168.1.0/24",
                    "192.168.2.0/24"
                  ]
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.my_edge_gateway.id
        argumentDocs:
            edge_gateway_id: '- (Required) NSX-T Edge Gateway ID in which route advertisement is located.'
            enabled: '- (Optional) Define if route advertisement is active. Default true.'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organizations.
            subnets: '- (Optional) Set of subnets that will be advertised to Tier-0 gateway. Leaving it empty means none.'
        importStatements: []
    vcd_nsxt_security_group:
        subCategory: ""
        description: Provides a resource to manage NSX-T Security Group. Security Groups are groups of data center group networks to which distributed firewall rules apply. Grouping networks helps you to reduce the total number of distributed firewall rules to be created.
        name: vcd_nsxt_security_group
        title: vcd_nsxt_security_group
        examples:
            - name: frontend-servers
              manifest: |-
                {
                  "description": "Security Group for a network connecting the frontend servers",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.main.id}",
                  "member_org_network_ids": [
                    "${vcd_network_routed_v2.frontend.id}"
                  ],
                  "name": "frontend-servers",
                  "org": "my-org"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.main.id
            - name: group1
              manifest: |-
                {
                  "description": "Members to be added later",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "name": "precreated security group",
                  "org": "my-org"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
        argumentDocs:
            description: '- (Optional) An optional description of the Security Group'
            edge_gateway_id: |-
                - (Required) The ID of the Edge Gateway (NSX-T only). Can be looked up using
                vcd_nsxt_edgegateway data source
            member_org_network_ids: '- (Optional) A set of Org Network IDs'
            member_vms: A set of member VMs (if exist). see Member VMs below for details.
            name: '- (Required) A unique name for Security Group'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            vapp_id: '- Parent vApp ID for member VM (empty for standalone VMs)'
            vapp_name: '- Parent vApp Name for member VM (empty for standalone VMs)'
            vdc: |-
                - (Deprecated; Optional) The name of VDC to use, optional if defined at provider level. Deprecated
                in favor of edge_gateway_id field.
            vm_id: '- Member VM ID'
            vm_name: '- Member VM name'
        importStatements: []
    vcd_nsxt_segment_profile_template:
        subCategory: ""
        description: Provides a resource to manage NSX-T Segment Profile Templates.
        name: vcd_nsxt_segment_profile_template
        title: vcd_nsxt_segment_profile_template
        examples:
            - name: complete
              manifest: |-
                {
                  "description": "my description",
                  "ip_discovery_profile_id": "${data.vcd_nsxt_segment_ip_discovery_profile.first.id}",
                  "mac_discovery_profile_id": "${data.vcd_nsxt_segment_mac_discovery_profile.first.id}",
                  "name": "my-first-segment-profile-template",
                  "nsxt_manager_id": "${data.vcd_nsxt_manager.nsxt.id}",
                  "qos_profile_id": "${data.vcd_nsxt_segment_qos_profile.first.id}",
                  "segment_security_profile_id": "${data.vcd_nsxt_segment_security_profile.first.id}",
                  "spoof_guard_profile_id": "${data.vcd_nsxt_segment_spoof_guard_profile.first.id}"
                }
              references:
                ip_discovery_profile_id: data.vcd_nsxt_segment_ip_discovery_profile.first.id
                mac_discovery_profile_id: data.vcd_nsxt_segment_mac_discovery_profile.first.id
                nsxt_manager_id: data.vcd_nsxt_manager.nsxt.id
                qos_profile_id: data.vcd_nsxt_segment_qos_profile.first.id
                segment_security_profile_id: data.vcd_nsxt_segment_security_profile.first.id
                spoof_guard_profile_id: data.vcd_nsxt_segment_spoof_guard_profile.first.id
        argumentDocs:
            description: '- (Optional) Description of Segment Profile Template'
            ip_discovery_profile_id: |-
                - (Optional) IP Discovery Profile ID. can be referenced using
                vcd_nsxt_segment_ip_discovery_profile
            mac_discovery_profile_id: |-
                - (Optional) IP Discovery Profile ID. can be referenced using
                vcd_nsxt_segment_mac_discovery_profile
            name: '- (Required) Name for Segment Profile Template'
            nsxt_manager_id: |-
                - (Required) NSX-T Manager ID (can be referenced using
                vcd_nsxt_manager datasource)
            qos_profile_id: |-
                - (Optional) IP Discovery Profile ID. can be referenced using
                vcd_nsxt_segment_qos_profile
            segment_security_profile_id: |-
                - (Optional) IP Discovery Profile ID. can be referenced using
                vcd_nsxt_segment_security_profile
            spoof_guard_profile_id: |-
                - (Optional) IP Discovery Profile ID. can be referenced using
                vcd_nsxt_segment_spoof_guard_profile
        importStatements: []
    vcd_nsxv_dhcp_relay:
        subCategory: ""
        description: Provides an NSX edge gateway DHCP relay configuration resource.
        name: vcd_nsxv_dhcp_relay
        title: vcd_nsxv_dhcp_relay
        examples:
            - name: relay_config
              manifest: |-
                {
                  "edge_gateway": "my-edge-gw",
                  "ip_addresses": [
                    "1.1.1.1"
                  ],
                  "org": "my-org",
                  "relay_agent": [
                    {
                      "network_name": "${vcd_network_routed.test-routed[0].name}"
                    }
                  ],
                  "vdc": "my-org-vdc"
                }
              references:
                relay_agent.network_name: vcd_network_routed.test-routed[0].name
            - name: relay_config
              manifest: |-
                {
                  "domain_names": [
                    "servergroups.domainname.com",
                    "other.domain.com"
                  ],
                  "edge_gateway": "my-edge-gw",
                  "ip_addresses": [
                    "1.1.1.1",
                    "2.2.2.2"
                  ],
                  "ip_sets": [
                    "${vcd_nsxv_ip_set.myset1.name}",
                    "${vcd_nsxv_ip_set.myset2.name}"
                  ],
                  "org": "my-org",
                  "relay_agent": [
                    {
                      "network_name": "my-routed-network-1"
                    },
                    {
                      "gateway_ip_address": "10.201.1.1",
                      "network_name": "${vcd_network_routed.db-network.name}"
                    }
                  ],
                  "vdc": "my-org-vdc"
                }
              references:
                relay_agent.network_name: vcd_network_routed.db-network.name
              dependencies:
                vcd_nsxv_ip_set.myset1: |-
                    {
                      "ip_addresses": [
                        "10.10.10.1/24"
                      ],
                      "name": "ipset-one",
                      "org": "my-org",
                      "vdc": "my-org-vdc"
                    }
                vcd_nsxv_ip_set.myset2: |-
                    {
                      "ip_addresses": [
                        "20.20.20.1/24"
                      ],
                      "name": "ipset-two",
                      "org": "my-org",
                      "vdc": "my-org-vdc"
                    }
        argumentDocs:
            domain_names: '- (Optional) A set of domain names.'
            edge_gateway: '- (Required) The name of the edge gateway on which DHCP relay is to be configured.'
            gateway_ip_address: |-
                - (Optional) IP address on edge gateway to be used for relaying messages.
                Primary address of edge gateway interface will be picked if not specified.
            ip_addresses: '- (Optional) A set of IP addresses.'
            ip_sets: '- (Optional) A set of IP set names.'
            network_name: '- (Required) An existing Org network name from which DHCP messages are to be relayed.'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            relay_agent: |-
                - (Required) One or more blocks to define Org network and optional IP address of
                edge gateway interfaces from which DHCP messages are to be relayed to the external DHCP relay
                server(s). See Relay Agent and example for usage details.
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level.'
        importStatements: []
    vcd_nsxv_distributed_firewall:
        subCategory: ""
        description: The NSX-V Distributed Firewall allows user to segment organization virtual data center entities, such as virtual machines, edges, networks, based on several attributes
        name: vcd_nsxv_distributed_firewall
        title: vcd_nsxv_distributed_firewall
        examples:
            - name: dfw1
              manifest: |-
                {
                  "rule": [
                    {
                      "action": "allow",
                      "application": [
                        {
                          "destination_port": "20251",
                          "protocol": "TCP",
                          "source_port": "20250"
                        },
                        {
                          "name": "${data.vcd_nsxv_application.application1.name}",
                          "type": "Application",
                          "value": "${data.vcd_nsxv_application.application1.id}"
                        },
                        {
                          "name": "${data.vcd_nsxv_application_group.application_group1.name}",
                          "type": "ApplicationGroup",
                          "value": "${data.vcd_nsxv_application_group.application_group1.id}"
                        }
                      ],
                      "applied_to": [
                        {
                          "name": "${data.vcd_edgegateway.edge.name}",
                          "type": "Edge",
                          "value": "${data.vcd_edgegateway.edge.id}"
                        }
                      ],
                      "direction": "inout",
                      "name": "third",
                      "source": [
                        {
                          "name": "${data.vcd_nsxv_ip_set.test-ipset.name}",
                          "type": "IPSet",
                          "value": "${data.vcd_nsxv_ip_set.test-ipset.id}"
                        }
                      ]
                    },
                    {
                      "action": "allow",
                      "applied_to": [
                        {
                          "name": "${data.vcd_org_vdc.my-vdc.name}",
                          "type": "VDC",
                          "value": "${data.vcd_org_vdc.my-vdc.id}"
                        }
                      ],
                      "destination": [
                        {
                          "name": "${data.vcd_network_routed.net-r.name}",
                          "type": "Network",
                          "value": "${data.vcd_network_routed.net-r.id}"
                        },
                        {
                          "name": "${data.vcd_network_isolated.net-i.name}",
                          "type": "Network",
                          "value": "${data.vcd_network_isolated.net-i.id}"
                        }
                      ],
                      "direction": "inout",
                      "name": "second",
                      "source": [
                        {
                          "name": "10.10.1.0-10.10.1.100",
                          "type": "Ipv4Address",
                          "value": "10.10.1.0-10.10.1.100"
                        },
                        {
                          "name": "${data.vcd_vapp_vm.vm1.name}",
                          "type": "VirtualMachine",
                          "value": "${data.vcd_vapp_vm.vm1.id}"
                        }
                      ]
                    },
                    {
                      "action": "deny",
                      "applied_to": [
                        {
                          "name": "${data.vcd_org_vdc.my-vdc.name}",
                          "type": "VDC",
                          "value": "${data.vcd_org_vdc.my-vdc.id}"
                        }
                      ],
                      "direction": "inout",
                      "name": "first"
                    }
                  ],
                  "vdc_id": "${data.vcd_org_vdc.my-vdc.id}"
                }
              references:
                rule.application.name: data.vcd_nsxv_application_group.application_group1.name
                rule.application.value: data.vcd_nsxv_application_group.application_group1.id
                rule.applied_to.name: data.vcd_org_vdc.my-vdc.name
                rule.applied_to.value: data.vcd_org_vdc.my-vdc.id
                rule.destination.name: data.vcd_network_isolated.net-i.name
                rule.destination.value: data.vcd_network_isolated.net-i.id
                rule.source.name: data.vcd_vapp_vm.vm1.name
                rule.source.value: data.vcd_vapp_vm.vm1.id
                vdc_id: data.vcd_org_vdc.my-vdc.id
        argumentDocs:
            10.10.10.1/24: )
            10.10.10.2-10.10.10.20: )
            192.168.1.1: )
            192.168.1.2,192.168.1.15: )
            destination_port: (Optional) - The destination port used by the application, if any
            enabled: '- Shows whether the NSX-V Distributed Firewall is enabled.'
            name: |-
                - (Required) is the name of the object. When using a literal object (such as an IP or IP range), the name must
                contain the same text as the
            ports: (Optional) - The ports used by the application. Could be a single port, a comma delimited list, or a range
            protocol: ', ports, source_port, destination_port'
            rule: |-
                - (Optional) One or more blocks with Firewall Rule definitions. Order
                defines firewall rule precedence. If no rules are defined, all will be removed from the firewall
            rule.action: '- (Required) Defines if it should allow or deny traffic'
            rule.application: '- (Optional) An optional set of applications to use for this rule. See below for Application objects'
            rule.applied_to: '- (Required) A set of objects to which the rule applies. See below for Source or destination objects'
            rule.destination: '- (Optional) A set of destination objects. See below for source or destination objects. Leaving it empty matches any (all)'
            rule.direction: '- (Required) One of in, out, or inout'
            rule.enabled: '- (Optional) Defines if the rule is enabled (default true)'
            rule.exclude_destination: '- (Optional) - reverses value of destination for the rule to match everything except specified objects'
            rule.exclude_source: '- (Optional) - reverses value of source for the rule to match everything except specified objects'
            rule.logging: '- (Optional) Defines if logging for this rule is enabled (default false)'
            rule.name: '- (Optional) Explanatory name for firewall rule (uniqueness not enforced)'
            rule.source: |-
                - (Optional) A set of source objects. See below for source or destination objects
                Leaving it empty matches any (all)
            source_port: (Optional) - The source port used by the application, if any
            type: |-
                - (Required) is the type of the object. One of Network, Edge, VirtualMachine, IPSet, VDC, Ipv4Address.
                Note that the case of the type identifiers are relevant. Using IpSet instead of IPSet results in an error.
                Also note that Ipv4Address allows any of:
            value: |-
                - (Required) - When using a named object (such a VM or a network), this field will have the object ID. For a literal
                object, such as an IP or IP range, this will be the text of the IP reference.
            vdc_id: '- (Required) The ID of VDC to manage the Distributed Firewall in. Can be looked up using a vcd_org_vdc data source'
        importStatements: []
    vcd_nsxv_dnat:
        subCategory: ""
        description: Provides a VMware Cloud Director DNAT resource for advanced edge gateways (NSX-V). This can be used to create, modify, and delete destination NATs to map an external IP/port to an internal IP/port.
        name: vcd_nsxv_dnat
        title: vcd_nsxv_dnat
        examples:
            - name: web
              manifest: |-
                {
                  "edge_gateway": "Edge Gateway Name",
                  "network_name": "my-external-network",
                  "network_type": "ext",
                  "org": "my-org",
                  "original_address": "1.1.1.1",
                  "translated_address": "10.10.10.15",
                  "vdc": "my-vdc"
                }
            - name: forIcmp
              manifest: |-
                {
                  "edge_gateway": "Edge Gateway Name",
                  "icmp_type": "router-advertisement",
                  "network_name": "my-external-network",
                  "network_type": "ext",
                  "org": "my-org",
                  "original_address": "78.101.10.20-78.101.10.30",
                  "protocol": "icmp",
                  "translated_address": "10.10.0.5",
                  "vdc": "my-vdc"
                }
            - name: dnat-tcp
              manifest: |-
                {
                  "description": "My DNAT rule",
                  "edge_gateway": "Edge Gateway Name",
                  "enabled": false,
                  "logging_enabled": true,
                  "network_name": "my-external-network",
                  "network_type": "ext",
                  "org": "my-org",
                  "original_address": "78.101.10.20",
                  "original_port": 443,
                  "protocol": "tcp",
                  "translated_address": "10.10.0.5",
                  "translated_port": 8443,
                  "vdc": "my-vdc"
                }
        argumentDocs:
            description: '- (Optional) Free text description.'
            edge_gateway: '- (Required) The name of the edge gateway on which to apply the DNAT rule.'
            enabled: '- (Optional) Defines if the rule is enabaled. Default true.'
            icmp_type: |-
                - (Optional) Only when protocol is set to icmp. One of any,
                address-mask-request, address-mask-reply, destination-unreachable, echo-request,
                echo-reply, parameter-problem, redirect, router-advertisement, router-solicitation,
                source-quench, time-exceeded, timestamp-request, timestamp-reply. Default any
            logging_enabled: '- (Optional) Defines if the logging for this rule is enabaled. Default false.'
            network_name: '- (Required) The name of the network on which to apply the DNAT rule.'
            network_type: |-
                - (Required) Type of the network on which to apply the DNAT rule. Possible values
                org or ext.
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            original_address: |-
                - (Required) IP address, range or subnet. This address must be the public IP
                address of the edge gateway for which you are configuring the DNAT rule. In the packet being
                inspected, this IP address or range would be those that appear as the destination IP address of the
                packet. These packet destination addresses are the ones translated by this DNAT rule.
            original_port: |-
                - (Optional) Select the port or port range that the incoming traffic uses on the
                edge gateway to connect to the internal network on which the virtual machines are connected. This
                selection is not available when the Protocol is set to icmp or any. Default any.
            protocol: |-
                - (Optional) Select the protocol to which the rule applies. One of tcp, udp,
                icmp, any. Default any
                protocols, select Any.
            rule_tag: |-
                - (Optional) This can be used to specify user-controlled rule tag. If not specified,
                it will report rule ID after creation. Must be between 65537-131072.
            rule_type: '- Possible values - user, internal_high.'
            translated_address: |-
                - (Required) IP address, range or subnet. IP addresses to which destination
                addresses on inbound packets will be translated. These addresses are the IP addresses of the one or
                more virtual machines for which you are configuring DNAT so that they can receive traffic from the
                external network.
            translated_port: |-
                - (Optional) Select the port or port range that inbound traffic is connecting
                to on the virtual machines on the internal network. These ports are the ones into which the DNAT
                rule is translating for the packets inbound to the virtual machines.
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level.'
        importStatements: []
    vcd_nsxv_firewall_rule:
        subCategory: ""
        description: Provides a VMware Cloud Director firewall rule resource for advanced edge gateways (NSX-V). This can be used to create, modify, and delete firewall rules.
        name: vcd_nsxv_firewall_rule
        title: vcd_nsxv_firewall_rule
        examples:
            - name: my-rule-1
              manifest: |-
                {
                  "destination": [
                    {
                      "ip_addresses": [
                        "${data.vcd_edgegateway.mygw.default_external_network_ip}"
                      ]
                    }
                  ],
                  "edge_gateway": "my-edge-gateway",
                  "org": "my-org",
                  "service": [
                    {
                      "protocol": "any"
                    }
                  ],
                  "source": [
                    {
                      "ip_sets": [
                        "${vcd_ipset.test-ipset2.name}"
                      ]
                    }
                  ],
                  "vdc": "my-vdc"
                }
            - name: my-rule-1
              manifest: |-
                {
                  "destination": [
                    {
                      "ip_addresses": [
                        "192.168.1.110"
                      ]
                    }
                  ],
                  "edge_gateway": "my-edge-gateway",
                  "org": "my-org",
                  "service": [
                    {
                      "protocol": "icmp"
                    },
                    {
                      "port": "443",
                      "protocol": "tcp"
                    }
                  ],
                  "source": [
                    {
                      "gateway_interfaces": [
                        "internal"
                      ],
                      "ip_addresses": [
                        "any"
                      ]
                    }
                  ],
                  "vdc": "my-vdc"
                }
            - name: my-rule-1
              manifest: |-
                {
                  "destination": [
                    {
                      "ip_addresses": [
                        "any"
                      ]
                    }
                  ],
                  "edge_gateway": "my-edge-gateway",
                  "org": "my-org",
                  "service": [
                    {
                      "protocol": "icmp"
                    }
                  ],
                  "source": [
                    {
                      "exclude": true,
                      "gateway_interfaces": [
                        "internal"
                      ]
                    }
                  ],
                  "vdc": "my-vdc"
                }
            - name: my-rule-1
              manifest: |-
                {
                  "action": "deny",
                  "destination": [
                    {
                      "ip_addresses": [
                        "any"
                      ]
                    }
                  ],
                  "edge_gateway": "my-edge-gateway",
                  "logging_enabled": true,
                  "org": "my-org",
                  "service": [
                    {
                      "protocol": "icmp"
                    }
                  ],
                  "source": [
                    {
                      "ip_addresses": [
                        "30.10.10.0/24",
                        "31.10.10.0/24"
                      ],
                      "org_networks": [
                        "org-net-1",
                        "org-net-2"
                      ]
                    }
                  ],
                  "vdc": "my-vdc"
                }
            - name: my-rule-2
              manifest: |-
                {
                  "above_rule_id": "${vcd_nsxv_firewall_rule.my-rule-1.id}",
                  "destination": [
                    {
                      "ip_addresses": [
                        "any"
                      ]
                    }
                  ],
                  "edge_gateway": "my-edge-gateway",
                  "name": "my-friendly-name",
                  "org": "my-org",
                  "service": [
                    {
                      "protocol": "icmp"
                    }
                  ],
                  "source": [
                    {
                      "ip_addresses": [
                        "30.10.10.0/24",
                        "31.10.10.0/24"
                      ],
                      "org_networks": [
                        "org-net-1",
                        "org-net-2"
                      ]
                    }
                  ],
                  "vdc": "my-vdc"
                }
              references:
                above_rule_id: vcd_nsxv_firewall_rule.my-rule-1.id
        argumentDocs:
            above_rule_id: |-
                - (Optional) This can be used to alter default rule placement order. By default
                every rule is appended to the end of firewall rule list. When a value of another rule is set - this
                rule will be placed above the specified rule.
            action: '- (Optional) Defines if the rule is set to accept or deny traffic. Default accept'
            destination: |-
                - (Required) Exactly one block to define source criteria for firewall. See
                Endpoint and example for usage details.
            edge_gateway: '- (Required) The name of the edge gateway on which to apply the firewall rule.'
            enabled: '- (Optional) Defines if the rule is enabaled. Default true.'
            exclude: |-
                - (Optional) When the toggle exclusion is selected, the rule is applied to
                traffic on all sources except for the locations you excluded. When the toggle exclusion is not
                selected, the rule applies to traffic you specified. Default false. This
                example uses it.
            gateway_interfaces: '- (Optional) A set of with either three keywords vse (UI names it as any), internal, external or an org network name. It automatically looks up vNic in the backend.'
            ip_addresses: |-
                - (Optional) A set of IP addresses, CIDRs or ranges. A keyword any is also
                accepted as a parameter.
            ip_sets: '- (Optional) A set of existing IP set names (either created manually or configured using vcd_nsxv_ip_set resource)'
            logging_enabled: '- (Optional) Defines if the logging for this rule is enabaled. Default false.'
            name: '- (Optional) Free text name. Can be duplicate.'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            org_networks: '- (Optional) A set of org network names.'
            port: '- (Optional) Port number or range separated by - for port number. Default ''any''.'
            protocol: '- (Required) One of any, tcp, udp, icmp to apply.'
            rule_tag: |-
                - (Optional) This can be used to specify user-controlled rule tag. If not specified,
                it will report rule ID after creation. Must be between 65537-131072.
            rule_type: '- Possible values - user, internal_high.'
            service: |-
                - (Required) One or more blocks to define protocol and port details. Use multiple blocks
                if you want to define multiple port/protocol combinations for the same rule. See
                Service and example for usage details.
            source: |-
                - (Required) Exactly one block to define source criteria for firewall. See
                Endpoint and example for usage details.
            source_port: '- (Optional) Port number or range separated by - for port number. Default ''any''.'
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level.'
            vm_ids: '- (Optional) A set of .id fields of vcd_vapp_vm resources.'
        importStatements:
            - |-
              $ terraform import vcd_nsxv_firewall_rule.import list@my-org-name.my-org-vdc-name.my-edge-gw-name
              vcd_nsxv_firewall_rule.import: Importing from ID "list@my-org-name.my-org-vdc-name.my-edge-gw-name"...
              Retrieving all firewall rules
              UI No   ID      Name                                    Action  Type
              -----   --      ----                                    ------  ----
              1       132589  firewall                                accept  internal_high
              2       132730  My deny rule                            deny    user
              3       132729  My accept rule                          accept  user
              4       132588  default rule for ingress traffic        deny    default_policy

              Error: Resource was not imported! Please use the above ID to format the command as:
              terraform import vcd_nsxv_firewall_rule.resource-name org-name.vdc-name.edge-gw-name.firewall-rule-id
            - |-
              $ terraform import vcd_nsxv_firewall_rule.import my-org-name.my-org-vdc-name.my-edge-gw-name.132730
              vcd_nsxv_firewall_rule.import: Importing from ID "my-org-name.my-org-vdc-name.my-edge-gw-name.132730"...
              vcd_nsxv_firewall_rule.import: Import prepared!
                Prepared vcd_nsxv_firewall_rule for import
              vcd_nsxv_firewall_rule.import: Refreshing state... [id=132730]

              Import successful!

              The resources that were imported are shown above. These resources are now in
              your Terraform state and will henceforth be managed by Terraform.
    vcd_nsxv_ip_set:
        subCategory: ""
        description: Provides an IP set resource.
        name: vcd_nsxv_ip_set
        title: vcd_nsxv_ip_set
        examples:
            - name: test-ipset
              manifest: |-
                {
                  "description": "test-ip-set-changed-description",
                  "ip_addresses": [
                    "1.1.1.1/24",
                    "10.10.10.100-10.10.10.110"
                  ],
                  "is_inheritance_allowed": false,
                  "name": "ipset-one",
                  "org": "my-org",
                  "vdc": "my-org-vdc"
                }
            - name: test-ipset
              manifest: |-
                {
                  "ip_addresses": [
                    "192.168.1.1"
                  ],
                  "name": "ipset-two"
                }
            - name: test-ipset
              manifest: |-
                {
                  "description": "test-ip-set-changed-description",
                  "ip_addresses": [
                    "1.1.1.1/24",
                    "10.10.10.100-10.10.10.110"
                  ],
                  "is_inheritance_allowed": true,
                  "name": "ipset-one",
                  "org": "my-org",
                  "vdc": "my-org-vdc"
                }
              dependencies:
                vcd_nsxv_firewall_rule.ipsets: |-
                    {
                      "action": "accept",
                      "destination": [
                        {
                          "ip_sets": [
                            "${vcd_nsxv_ip_set.test-ipset2.name}"
                          ]
                        }
                      ],
                      "edge_gateway": "my-edge-gw",
                      "name": "rule-with-ipsets",
                      "org": "my-org",
                      "service": [
                        {
                          "protocol": "any"
                        }
                      ],
                      "source": [
                        {
                          "ip_sets": [
                            "${vcd_nsxv_ip_set.test-ipset.name}"
                          ]
                        }
                      ],
                      "vdc": "my-org-vdc"
                    }
            - name: test-ipset2
              manifest: |-
                {
                  "ip_addresses": [
                    "192.168.1.1"
                  ],
                  "name": "ipset-two"
                }
              dependencies:
                vcd_nsxv_firewall_rule.ipsets: |-
                    {
                      "action": "accept",
                      "destination": [
                        {
                          "ip_sets": [
                            "${vcd_nsxv_ip_set.test-ipset2.name}"
                          ]
                        }
                      ],
                      "edge_gateway": "my-edge-gw",
                      "name": "rule-with-ipsets",
                      "org": "my-org",
                      "service": [
                        {
                          "protocol": "any"
                        }
                      ],
                      "source": [
                        {
                          "ip_sets": [
                            "${vcd_nsxv_ip_set.test-ipset.name}"
                          ]
                        }
                      ],
                      "vdc": "my-org-vdc"
                    }
        argumentDocs:
            description: '- (Optional) An optional description for IP set.'
            id: '- ID of IP set'
            ip_addresses: '- (Required) A set of IP addresses, CIDRs and ranges as strings.'
            is_inheritance_allowed: (Optional) Toggle to enable inheritance to allow visibility at underlying scopes. Default true
            name: '- (Required) Unique IP set name.'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level'
        importStatements: []
    vcd_nsxv_snat:
        subCategory: ""
        description: Provides a VMware Cloud Director SNAT resource for advanced edge gateways (NSX-V). This can be used to create, modify, and delete source NATs to allow vApps to send external traffic.
        name: vcd_nsxv_snat
        title: vcd_nsxv_snat
        examples:
            - name: web
              manifest: |-
                {
                  "edge_gateway": "Edge Gateway Name",
                  "network_name": "my-org-network",
                  "network_type": "org",
                  "org": "my-org",
                  "original_address": "10.10.10.15/24",
                  "translated_address": "78.101.10.20",
                  "vdc": "my-vdc"
                }
        argumentDocs:
            description: '- (Optional) Free text description.'
            edge_gateway: '- (Required) The name of the edge gateway on which to apply the SNAT rule.'
            enabled: '- (Optional) Defines if the rule is enabaled. Default true.'
            logging_enabled: '- (Optional) Defines if the logging for this rule is enabaled. Default false.'
            network_name: '- (Required) The name of the network on which to apply the SNAT rule.'
            network_type: |-
                - (Required) Type of the network on which to apply the DNAT rule. Possible values
                org or ext.
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            original_address: |-
                - (Required) IP address, range or subnet. These addresses are the IP addresses
                of one or more virtual machines for which you are configuring the SNAT rule so that they can send
                traffic to the external network.
            rule_tag: |-
                - (Optional) This can be used to specify user-controlled rule tag. If not specified,
                it will report rule ID after creation. Must be between 65537-131072.
            rule_type: '- Possible values - user, internal_high.'
            translated_address: |-
                - (Required) IP address, range or subnet. This address is always the public
                IP address of the gateway for which you are configuring the SNAT rule. Specifies the IP address to
                which source addresses (the virtual machines) on outbound packets are translated to when they send
                traffic to the external network.
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level.'
        importStatements: []
    vcd_org:
        subCategory: ""
        description: Provides a VMware Cloud Director Organization resource. This can be used to create  delete, and update an organization.
        name: vcd_org
        title: vcd_org
        examples:
            - name: my-org
              manifest: |-
                {
                  "account_lockout": [
                    {
                      "enabled": true,
                      "invalid_logins_before_lockout": 10,
                      "lockout_interval_minutes": 60
                    }
                  ],
                  "delete_force": true,
                  "delete_recursive": true,
                  "description": "The pride of my work",
                  "full_name": "My organization",
                  "is_enabled": true,
                  "name": "my-org",
                  "vapp_lease": [
                    {
                      "delete_on_storage_lease_expiration": false,
                      "maximum_runtime_lease_in_sec": 3600,
                      "maximum_storage_lease_in_sec": 0,
                      "power_off_on_runtime_lease_expiration": true
                    }
                  ],
                  "vapp_template_lease": [
                    {
                      "delete_on_storage_lease_expiration": true,
                      "maximum_storage_lease_in_sec": 604800
                    }
                  ]
                }
            - name: example
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "is_system": true,
                      "key": "foo",
                      "type": "MetadataStringValue",
                      "user_access": "PRIVATE",
                      "value": "bar"
                    },
                    {
                      "is_system": false,
                      "key": "myBool",
                      "type": "MetadataBooleanValue",
                      "user_access": "READWRITE",
                      "value": "true"
                    }
                  ]
                }
            - name: my-orgadmin
              manifest: |-
                {
                  "delete_force": true,
                  "delete_recursive": true,
                  "full_name": "guessing",
                  "name": "my-org"
                }
        argumentDocs:
            account_lockout: '- (v3.14+) Defines account lockout properties in this organization:'
            can_publish_catalogs: '- (Optional) True if this organization is allowed to share catalogs. Default is true.'
            can_publish_external_catalogs: '- (Optional; v3.6+) True if this organization is allowed to publish external catalogs. Default is false.'
            can_subscribe_external_catalogs: '- (Optional; v3.6+) True if this organization is allowed to subscribe to external catalogs. Default is false.'
            delay_after_power_on_seconds: '- (Optional) Specifies this organization''s default for virtual machine boot delay after power on. Default is 0.'
            delete_force: '- (Optional, but recommended) Pass delete_force=true and delete_recursive=true to remove an organization or VDC and any objects it contains, regardless of their state. Default is false'
            delete_on_storage_lease_expiration: |-
                - (Required) If true, storage for a vApp is deleted when the vApp's lease expires. If false, the storage is flagged for deletion, but not deleted.
                Note: Default when the whole vapp_lease block is omitted is false
            delete_recursive: '- (Optional, but recommended) Pass delete_recursive=true as query parameter to remove an organization or VDC and any objects it contains that are in a state that normally allows removal. Default is false'
            deployed_vm_quota: '- (Optional) Maximum number of virtual machines that can be deployed simultaneously by a member of this organization. Default is unlimited (0)'
            description: '- (Optional) Org description. Default is empty.'
            enabled: '- Whether account lockout is enabled or not'
            full_name: '- (Required) Org full name'
            invalid_logins_before_lockout: '- Number of login attempts that will trigger an account lockout for the given user'
            is_enabled: '- (Optional) True if this organization is enabled (allows login and all other operations). Default is true.'
            is_system: '- (Required) Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            key: '- (Required) Key of this metadata entry.'
            list_of_catalogs: '- (v3.11+) List of catalogs (sorted alphabetically), owned or shared, available to this organization.'
            list_of_vdcs: '- (v3.11+) List of VDCs (sorted alphabetically), owned or shared, available to this organization.'
            lockout_interval_minutes: '- Once a user is locked out, they will not be able to log back in for this time period'
            maximum_runtime_lease_in_sec: |-
                - (Required) How long vApps can run before they are automatically stopped (in seconds). 0 means never expires. Values accepted from 3600+
                Note: Default when the whole vapp_lease block is omitted is 604800 (7 days) but may vary depending on vCD version
            maximum_storage_lease_in_sec: |-
                - (Required) How long stopped vApps are available before being automatically cleaned up (in seconds). 0 means never expires. Regular values accepted from 3600+
                Note: Default when the whole vapp_lease block is omitted is 2592000 (30 days) but may vary depending on vCD version
            metadata: '- (Deprecated; v3.6+) Use metadata_entry instead. Key value map of metadata to assign to this organization.'
            metadata_entry: '- (Optional; v3.8+) A set of metadata entries to assign. See Metadata section for details.'
            name: '- (Required) Org name'
            number_of_catalogs: '- (v3.11+) Number of catalogs owned or shared, available to this organization.'
            number_of_vdcs: '- (v3.11+) Number of VDCs owned or shared, available to this organization.'
            power_off_on_runtime_lease_expiration: |-
                - (Required) When true, vApps are powered off when the runtime lease expires. When false, vApps are suspended when the runtime lease expires.
                Note: Default when the whole vapp_lease block is omitted is false
            stored_vm_quota: '- (Optional) Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of this organization. Default is unlimited (0)'
            type: '- (Required) Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.'
            user_access: '- (Required) User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            value: '- (Required) Value of this metadata entry.'
            vapp_lease: '- (Optional; v2.7+) Defines lease parameters for vApps created in this organization. See vApp Lease below for details.'
            vapp_template_lease: '- (Optional; v2.7+) Defines lease parameters for vApp templates created in this organization. See vApp Template Lease below for details.'
        importStatements: []
    vcd_org_group:
        subCategory: ""
        description: Provides a VMware Cloud Director Organization group. This can be used to create, update, and delete organization groups defined in SAML or LDAP.
        name: vcd_org_group
        title: vcd_org_group
        examples:
            - name: org1
              manifest: |-
                {
                  "name": "Org1-AdminGroup",
                  "org": "org1",
                  "provider_type": "SAML",
                  "role": "Organization Administrator"
                }
            - name: org1
              manifest: |-
                {
                  "name": "Org1-AdminGroup",
                  "org": "org1",
                  "provider_type": "OAUTH",
                  "role": "Organization Administrator"
                }
            - name: org1
              manifest: |-
                {
                  "name": "ldap-group",
                  "org": "org1",
                  "provider_type": "INTEGRATED",
                  "role": "Organization Administrator"
                }
            - name: my-admin-group
              manifest: |-
                {
                  "name": "my-admin-group",
                  "org": "my-org",
                  "provider_type": "SAML",
                  "role": "Organization Administrator"
                }
        argumentDocs:
            description: '- (Optional) The description of Organization group'
            id: '- The ID of the Organization group'
            name: '- (Required) A unique name for the group.'
            org: '- (Optional) The name of organization to which the VDC belongs. Optional if defined at provider level.'
            provider_type: |-
                - (Required) Identity provider type for this this group. One of SAML, OAUTH or
                INTEGRATED. Note LDAP must be configured to create INTEGRATED groups and names must
                match LDAP group names. If LDAP is not configured - it will return 403 errors.
            role: |-
                - (Required) The role of the group. Role names can be retrieved from the organization. Both built-in roles and
                custom built can be used. The roles normally available are:
            user_names: |-
                - (Read only) The set of user names that belong to this group. It's only populated if the users
                are created after the group (with depends_on the given group).
        importStatements: []
    vcd_org_ldap:
        subCategory: ""
        description: Provides a VMware Cloud Director Organization LDAP resource. This can be used to create, delete, and update LDAP configuration for an organization .
        name: vcd_org_ldap
        title: vcd_org_ldap
        examples:
            - name: my-org-ldap
              manifest: |-
                {
                  "custom_settings": [
                    {
                      "authentication_method": "SIMPLE",
                      "base_distinguished_name": "dc=planetexpress,dc=com",
                      "connector_type": "OPEN_LDAP",
                      "group_attributes": [
                        {
                          "group_membership_identifier": "dn",
                          "membership": "member",
                          "name": "cn",
                          "object_class": "group",
                          "unique_identifier": "cn"
                        }
                      ],
                      "is_ssl": false,
                      "password": "GoodNewsEveryone",
                      "port": 389,
                      "server": "192.168.1.172",
                      "user_attributes": [
                        {
                          "display_name": "cn",
                          "email": "mail",
                          "given_name": "givenName",
                          "group_membership_identifier": "dn",
                          "object_class": "inetOrgPerson",
                          "surname": "sn",
                          "telephone": "telephoneNumber",
                          "unique_identifier": "uid",
                          "username": "uid"
                        }
                      ],
                      "username": "cn=admin,dc=planetexpress,dc=com"
                    }
                  ],
                  "ldap_mode": "CUSTOM",
                  "org_id": "${data.vcd_org.my-org.id}"
                }
              references:
                org_id: data.vcd_org.my-org.id
            - name: my-org-ldap
              manifest: |-
                {
                  "lifecycle": [
                    {
                      "ignore_changes": [
                        "${custom_settings[0].password}"
                      ]
                    }
                  ]
                }
            - name: my-org-ldap
              manifest: |-
                {
                  "custom_user_ou": "ou=Foo,dc=domain,dc=local base DN",
                  "ldap_mode": "SYSTEM",
                  "org_id": "${data.vcd_org.my-org.id}"
                }
              references:
                org_id: data.vcd_org.my-org.id
            - name: my-org-ldap
              manifest: |-
                {
                  "org_id": "${data.vcd_org.my-org.id}"
                }
              references:
                org_id: data.vcd_org.my-org.id
        argumentDocs:
            authentication_method: '- (Required) Authentication method: one of SIMPLE, MD5DIGEST, NTLM'
            base_distinguished_name: '- (Required) LDAP search base'
            connector_type: '- (Required) Type of connector: one of OPEN_LDAP, ACTIVE_DIRECTORY'
            custom_settings: '- (Optional) LDAP server configuration. Becomes mandatory if ldap_mode is set to CUSTOM. See Custom Settings below for details'
            custom_user_ou: '- (Optional; v3.11+) If ldap_mode is SYSTEM, specifies an LDAP attribute=value pair to use for OU (organizational unit)'
            display_name: '- (Required) LDAP attribute to use for the user''s full name. For example, displayName'
            email: '- (Required) LDAP attribute to use for the user''s email address. For example, mail'
            given_name: '- (Required) LDAP attribute to use for the user''s given name. For example, givenName'
            group_attributes: '- (Required) Group settings when ldap_mode is CUSTOM See Group Attributes below for details'
            group_back_link_identifier: '- (Optional) LDAP attribute that returns the identifiers of all the groups of which the user is a member'
            group_membership_identifier: '- (Required) LDAP attribute that identifies a user as a member of a group. For example, dn'
            is_ssl: '- (Optional) True if the LDAP service requires an SSL connection'
            ldap_mode: '- (Required) One of NONE, CUSTOM, SYSTEM. Note that using NONE has the effect of removing the LDAP settings'
            membership: '- (Required) LDAP attribute to use when getting the members of a group. For example, member'
            name: '- (Required) LDAP attribute to use for the group name. For example, cn'
            object_class: '- (Required)  LDAP objectClass of which imported users are members. For example, user or person'
            org_id: '- (Required) Org ID: there is only one LDAP configuration available for an organization. Thus, the resource can be identified by the Org.'
            password: |-
                - (Optional) Password for the user identified by UserName. This value is never returned by GET.
                It is inspected on create and modify. On modify, the absence of this element indicates that the password should not be changed
            port: '- (Required) Port number of the LDAP server (usually 389 for LDAP, 636 for LDAPS)'
            server: '- (Required) The IP address or host name of the server providing the LDAP service'
            surname: '- (Required) LDAP attribute to use for the user''s surname. For example, sn'
            telephone: '- (Required) LDAP attribute to use for the user''s telephone number. For example, telephoneNumber'
            unique_identifier: '- (Required) LDAP attribute to use as the unique identifier for a user. For example, objectGuid'
            user_attributes: '- (Required) User settings when ldap_mode is CUSTOM See User Attributes below for details'
            username: |-
                - (Optional) Username to use when logging in to LDAP, specified using LDAP attribute=value pairs
                (for example: cn="ldap-admin", c="example", dc="com")
        importStatements: []
    vcd_org_oidc:
        subCategory: ""
        description: Provides a resource to configure or remove OpenID Connect (OIDC) for an Organization in VMware Cloud Director.
        name: vcd_org_oidc
        title: vcd_org_oidc
        examples:
            - name: oidc
              manifest: |-
                {
                  "client_id": "clientId",
                  "client_secret": "clientSecret",
                  "enabled": true,
                  "max_clock_skew_seconds": 60,
                  "org_id": "${data.vcd_org.my_org.id}",
                  "prefer_id_token": false,
                  "wellknown_endpoint": "https://my-idp.company.com/oidc/.well-known/openid-configuration"
                }
              references:
                org_id: data.vcd_org.my_org.id
            - name: oidc
              manifest: |-
                {
                  "access_token_endpoint": "https://my-other-idp.company.com/oidc/token",
                  "client_id": "clientId",
                  "client_secret": "clientSecret",
                  "enabled": true,
                  "max_clock_skew_seconds": 60,
                  "org_id": "${data.vcd_org.my_org.id}",
                  "prefer_id_token": false,
                  "userinfo_endpoint": "https://my-other-idp.company.com/oidc/userinfo",
                  "wellknown_endpoint": "https://my-idp.company.com/oidc/.well-known/openid-configuration"
                }
              references:
                org_id: data.vcd_org.my_org.id
            - name: oidc
              manifest: |-
                {
                  "access_token_endpoint": "https://my-idp.company.com/oidc/token",
                  "client_id": "clientId",
                  "client_secret": "clientSecret",
                  "enabled": true,
                  "max_clock_skew_seconds": 60,
                  "org_id": "${data.vcd_org.my_org.id}",
                  "prefer_id_token": false,
                  "userinfo_endpoint": "https://my-other-idp.company.com/oidc/userinfo",
                  "wellknown_endpoint": "https://my-idp.company.com/oidc/.well-known/openid-configuration"
                }
              references:
                org_id: data.vcd_org.my_org.id
            - name: oidc
              manifest: |-
                {
                  "access_token_endpoint": "https://my-idp.company.com/oidc/token",
                  "claims_mapping": [
                    {
                      "email": "email",
                      "first_name": "given_name",
                      "full_name": "name",
                      "last_name": "family_name",
                      "subject": "sub"
                    }
                  ],
                  "client_id": "clientId",
                  "client_secret": "clientSecret",
                  "enabled": true,
                  "issuer_id": "https://my-idp.company.com/oidc",
                  "key": [
                    {
                      "algorithm": "RSA",
                      "certificate": "${file(\"certificate.pem\")}",
                      "expiration_date": "2077-05-13",
                      "id": "rsa1"
                    }
                  ],
                  "max_clock_skew_seconds": 60,
                  "org_id": "${data.vcd_org.my_org.id}",
                  "prefer_id_token": false,
                  "scopes": [
                    "openid",
                    "profile",
                    "email",
                    "address",
                    "phone",
                    "offline_access"
                  ],
                  "user_authorization_endpoint": "https://my-idp.company.com/oidc/authorize",
                  "userinfo_endpoint": "https://my-idp.company.com/oidc/userinfo"
                }
              references:
                org_id: data.vcd_org.my_org.id
            - name: my_org_oidc
              manifest: |-
                {
                  "org_id": "${data.vcd_org.my_org.id}"
                }
              references:
                org_id: data.vcd_org.my_org.id
        argumentDocs:
            access_token_endpoint: |-
                - (Optional) The endpoint to use for access tokens.
                If wellknown_endpoint is not set, then this argument is required. Otherwise, it is optional.
                This allows users to override the configuration given by wellknown_endpoint
            algorithm: '- Algorithm used by the key. Can be RSA or EC'
            certificate: '- The contents of a PEM file to create/update the key'
            claims_mapping: |-
                - (Optional) A single configuration block that specifies the claim mappings to use with the OIDC provider.
                If wellknown_endpoint is not set, then this argument is required. Otherwise, it is optional. This allows users
                to override the claims given by wellknown_endpoint. The supported claims are:
            client_id: '- (Required) Client ID to use with the OIDC provider'
            client_secret: '- (Required) Client Secret to use with the OIDC provider'
            email: '- Required if wellknown_endpoint doesn''t give info about it'
            enabled: '- (Required) Either true or false, specifies whether the OIDC authentication is enabled for the given organization'
            expiration_date: '- Expiration date for the key. The accepted format is YYYY-MM-DD, like 2077-12-31'
            first_name: '- Required if wellknown_endpoint doesn''t give info about it'
            full_name: '- Required if wellknown_endpoint doesn''t give info about it'
            groups: '- Optional'
            id: '- Identifier of the key'
            issuer_id: |-
                - (Optional) The issuer ID for the OIDC provider.
                If wellknown_endpoint is not set, then this argument is required. Otherwise, it is optional.
                This allows users to override the configuration given by wellknown_endpoint
            key: |-
                - (Optional) One or more configuration blocks that specify the keys to use with the OIDC provider.
                If wellknown_endpoint is not set, then this argument is required. Otherwise, it is optional. This allows users
                to override the keys given by wellknown_endpoint. Each key requires the following:
            key_expire_duration_hours: |-
                - (Optional) Required if key_refresh_endpoint is set and key_refresh_strategy=EXPIRE_AFTER. Defines the expiration period of the key
                You can get more details of the EXPIRE_AFTER strategy here.
                Maximum value is 24
            key_refresh_endpoint: |-
                - (Optional) Endpoint used to refresh the keys. If set, key_refresh_period_hours and key_refresh_strategy will be required.
                If wellknown_endpoint is set, then this argument will override the obtained endpoint
            key_refresh_period_hours: '- (Optional) Required if key_refresh_endpoint is set. Defines the frequency of key refresh. Maximum value is 720 (30 days)'
            key_refresh_strategy: |-
                - (Optional) Required if key_refresh_endpoint is set. Defines the strategy of key refresh. One of ADD, REPLACE, EXPIRE_AFTER.
                The different strategies are explained here
            last_name: '- Required if wellknown_endpoint doesn''t give info about it'
            max_clock_skew_seconds: |-
                - (Optional) The maximum clock skew is the maximum allowable time difference between the client and server.
                This time compensates for any small-time differences in the timestamps when verifying tokens. The default value is 60 seconds
            org_id: |-
                - (Required) ID of the Organization that will have the OpenID Connect settings configured. There must be only one
                resource vcd_org_oidc per org_id, as there is only one OpenID configuration per Organization
            prefer_id_token: |-
                - (Optional; VCD 10.4.1+) If you want to combine claims from userinfo_endpoint and the ID Token, set this to true.
                The identity providers do not provide all the required claims set in userinfo_endpoint. By setting this argument to true,
                VMware Cloud Director can fetch and consume claims from both sources
            redirect_uri: |-
                - The client configuration redirect URI used to create a client application registration with an identity provider
                that complies with the OpenID Connect standard
            roles: '- Optional'
            scopes: |-
                - (Optional) A set of scopes to use with the OIDC provider. They are used to authorize access to user details,
                by defining the permissions that the access tokens have to access user information.
                If wellknown_endpoint is not set, then this argument is required. Otherwise, it is optional. This allows users
                to override the scopes given by wellknown_endpoint. Setting scopes = [] will make Terraform to set the scopes provided originally
                by the wellknown_endpoint
            subject: '- Required if wellknown_endpoint doesn''t give info about it'
            ui_button_label: '- (Optional; VCD 10.5.1+) Customizes the label of the UI button of the login screen'
            user_authorization_endpoint: |-
                - (Optional) The endpoint to use for authorization.
                If wellknown_endpoint is not set, then this argument is required. Otherwise, it is optional.
                This allows users to override the configuration given by wellknown_endpoint
            userinfo_endpoint: |-
                - (Optional) The endpoint to use for User Info.
                If wellknown_endpoint is not set, then this argument is required. Otherwise, it is optional.
                This allows users to override the configuration given by wellknown_endpoint
            wellknown_endpoint: |-
                - (Optional) This endpoint retrieves the OIDC provider configuration and automatically sets
                the following arguments, without setting them explicitly: issuer_id, user_authorization_endpoint, access_token_endpoint,
                userinfo_endpoint, the claims_mapping block, the key blocks, and scopes. These mentioned attributes will be computed, and
                can be overridden by setting them explicitly in HCL code
        importStatements: []
    vcd_org_saml:
        subCategory: ""
        description: Provides a VMware Cloud Director Organization SAML resource. This can be used to create, delete, and update SAML configuration for an organization.
        name: vcd_org_saml
        title: vcd_org_saml
        examples:
            - name: my-org-saml
              manifest: |-
                {
                  "email": "email",
                  "enabled": true,
                  "entity_id": "my-entity",
                  "firstname": "fname",
                  "fullname": "fullname",
                  "group": "group",
                  "identity_provider_metadata_file": "idp-metadata.xml",
                  "org_id": "${data.vcd_org.my-org.id}",
                  "role": "role",
                  "surname": "lname",
                  "username": "uname"
                }
              references:
                org_id: data.vcd_org.my-org.id
            - name: my-org-saml
              manifest: |-
                {
                  "email": "email",
                  "enabled": true,
                  "entity_id": "my-entity",
                  "firstname": "fname",
                  "fullname": "fullname",
                  "group": "group",
                  "identity_provider_metadata_text": "${data.http.example.response_body}",
                  "org_id": "${data.vcd_org.my-org.id}",
                  "role": "role",
                  "surname": "lname",
                  "username": "uname"
                }
              references:
                identity_provider_metadata_text: data.http.example.response_body
                org_id: data.vcd_org.my-org.id
            - name: my-org-saml
              manifest: |-
                {
                  "enabled": true,
                  "identity_provider_metadata_file": "somefile.xml",
                  "org_id": "${data.vcd_org.my-org.id}"
                }
              references:
                org_id: data.vcd_org.my-org.id
        argumentDocs:
            email: '- (Optional) The name of the SAML attribute that returns the email address of the user'
            enabled: '- (Required) If true, the organization will use SAML for authentication'
            entity_id: '- (Optional) Your service provider entity ID. Once you set this field, it cannot be changed back to empty'
            first_name: '- (Optional) The name of the SAML attribute that returns the first name of the user'
            full_name: '- (Optional) The name of the SAML attribute that returns the full name of the user'
            group: '- (Optional) The name of the SAML attribute that returns the identifiers of all the groups of which the user is a member'
            identity_provider_metadata_file: '- (Optional) Name of a file containing the metadata text from a SAML Identity Provider. Required if identity_provider_metadata_text is not defined'
            identity_provider_metadata_text: '- (Optional) Text of the metadata text from a SAML Identity Provider. Required if identity_provider_metadata_file is not defined'
            org_id: '- (Required) Since there is only one SAML configuration available for an organization, the resource can be identified by the Org itself'
            role: '- (Optional) The name of the SAML attribute that returns the identifiers of all roles of the user'
            surname: '- (Optional) The name of the SAML attribute that returns the surname of the user'
            user_name: '- (Optional) The name of the SAML attribute that returns the username of the user'
        importStatements: []
    vcd_org_user:
        subCategory: ""
        description: Provides a VMware Cloud Director Organization user. This can be used to create, update, and delete users.
        name: vcd_org_user
        title: vcd_org_user
        examples:
            - name: my-org-admin
              manifest: |-
                {
                  "description": "a new org admin",
                  "name": "my-org-admin",
                  "org": "my-org",
                  "password": "change-me",
                  "role": "Organization Administrator"
                }
            - name: test_user_vapp_author
              manifest: |-
                {
                  "deployed_vm_quota": 20,
                  "description": "Org user test_user_vapp_author",
                  "email_address": "test_user_vapp_author@test.company.org",
                  "enabled": true,
                  "full_name": "test user vapp author",
                  "instant_messaging": "@test_user_vapp_author",
                  "name": "test_user_vapp_author",
                  "org": "datacloud",
                  "password_file": "pwd201907101300.txt",
                  "provider_type": "INTEGRATED",
                  "role": "vApp Author",
                  "stored_vm_quota": 20,
                  "take_ownership": true
                }
            - name: my-sys-admin
              manifest: |-
                {
                  "description": "a new sys admin",
                  "name": "my-sys-admin",
                  "org": "System",
                  "password": "change-me-soon",
                  "role": "System Administrator"
                }
            - name: test_sys_user
              manifest: |-
                {
                  "name": "custom-sys-user",
                  "org": "System",
                  "password": "mypass",
                  "role": "${vcd_role.new-sys-role.name}",
                  "take_ownership": true
                }
              references:
                role: vcd_role.new-sys-role.name
              dependencies:
                vcd_role.new-sys-role: |-
                    {
                      "description": "new role from CLI",
                      "name": "new-role",
                      "org": "System",
                      "rights": [
                        "Catalog: Add vApp from My Cloud",
                        "Catalog: Edit Properties",
                        "Catalog: View Private and Shared Catalogs",
                        "Organization vDC Compute Policy: View",
                        "vApp Template / Media: Edit",
                        "vApp Template / Media: View"
                      ]
                    }
            - name: my-org-admin
              manifest: |-
                {
                  "name": "my-org-admin",
                  "org": "my-org",
                  "role": "Organization Administrator"
                }
        argumentDocs:
            deployed_vm_quota: |-
                - (Optional) Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.
                The default is 0.
            description: '- (Optional) An optional description of the user.'
            email_address: '- (Optional) The Org User email address. Needs to be a properly formatted email address.'
            enabled: '- (Optional) True if the user is enabled and can log in. The default is true.'
            full_name: '- (Optional) The full name of the user.'
            group_names: |-
                - (Read only) The set of group names to which this user belongs. It's only populated if the users
                are created after the group (with this user having a depends_on of the given group).
            id: '- The ID of the Organization user'
            instant_messaging: '- (Optional) The Org User instant messaging.'
            is_external: |-
                - (Optional) If the user account is going to be imported from an external resource, like an LDAP.
                In this case, password nor password_file are not required. Defaults to false.
            is_group_role: '- (Optional) True if this user has a group role. The default is false.'
            is_locked: |-
                - (Optional) If the user account has been locked due to too many invalid login attempts, the value will
                change to true (only the system can lock the user). To unlock the user re-set this flag to false.
            name: '- (Required) A unique name for the user.'
            org: |-
                - (Optional) The name of organization to which the user belongs. Optional if defined at provider level. If we
                want to create a user at provider level, use "System" as org name.
            password: |-
                - (Optional, but required if password_file was not given and is_external is false) The user password. This value is never returned
                on read. It is inspected on create and modify. To modify, fill with a different value. Note that if you remove the
                password on update, Terraform will indicate that a change was occurring, but the empty password will be ignored by vCD.
            password_file: |-
                - (Optional, but required if password was not given and is_external is false). A text file containing the password. Recommended
                usage: after changing the password, run an apply again with the password blank.
                Using this property instead of password has the advantage that the sensitive data is not saved into Terraform state
                file. The disadvantage is that a password change requires also changing the file name.
            provider_type: |-
                - (Optional) Identity provider type for this user. One of: INTEGRATED, SAML, OAUTH. The default
                is INTEGRATED.
            role: |-
                - (Required) The role of the user. Role names can be retrieved from the organization. Both built-in roles and
                custom built can be used. The roles normally available are:
            stored_vm_quota: |-
                - (Optional) Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.
                The default is 0.
            take_ownership: '- (Optional) Take ownership of user''s objects on deletion.'
            telephone: '- (Optional) The Org User telephone number.'
        importStatements: []
    vcd_org_vdc:
        subCategory: ""
        description: Provides a VMware Cloud Director Organization VDC resource. This can be used to create and delete an Organization VDC.
        name: vcd_org_vdc
        title: vcd_org_vdc
        examples:
            - name: my-vdc
              manifest: |-
                {
                  "allocation_model": "ReservationPool",
                  "compute_capacity": [
                    {
                      "cpu": [
                        {
                          "allocated": 2048
                        }
                      ],
                      "memory": [
                        {
                          "allocated": 2048
                        }
                      ]
                    }
                  ],
                  "delete_force": true,
                  "delete_recursive": true,
                  "description": "The pride of my work",
                  "enable_fast_provisioning": true,
                  "enable_thin_provisioning": true,
                  "enabled": true,
                  "metadata_entry": [
                    {
                      "key": "role",
                      "value": "customerName"
                    },
                    {
                      "key": "env",
                      "value": "staging"
                    },
                    {
                      "key": "version",
                      "value": "v1"
                    }
                  ],
                  "name": "my-vdc",
                  "network_pool_name": "vDC1-VXLAN-NP",
                  "org": "my-org",
                  "provider_vdc_name": "vDC1",
                  "storage_profile": [
                    {
                      "default": true,
                      "limit": 10240,
                      "name": "storage-name"
                    }
                  ]
                }
            - name: nsxt-vdc
              manifest: |-
                {
                  "allocation_model": "ReservationPool",
                  "compute_capacity": [
                    {
                      "cpu": [
                        {
                          "allocated": "1024",
                          "limit": "1024"
                        }
                      ],
                      "memory": [
                        {
                          "allocated": "1024",
                          "limit": "1024"
                        }
                      ]
                    }
                  ],
                  "delete_force": true,
                  "delete_recursive": true,
                  "edge_cluster_id": "${data.vcd_nsxt_edge_cluster.ec.id}",
                  "enable_fast_provisioning": true,
                  "enable_thin_provisioning": true,
                  "enabled": true,
                  "name": "NSXT-VDC",
                  "network_pool_name": "NSX-T Overlay 1",
                  "org": "main-org",
                  "provider_vdc_name": "nsxTPvdc1",
                  "storage_profile": [
                    {
                      "default": true,
                      "enabled": true,
                      "limit": 10240,
                      "name": "*"
                    }
                  ]
                }
              references:
                edge_cluster_id: data.vcd_nsxt_edge_cluster.ec.id
            - name: my-vdc
              manifest: |-
                {
                  "default_compute_policy_id": "${vcd_vm_sizing_policy.size_1.id}",
                  "description": "The pride of my work",
                  "name": "my-vdc",
                  "org": "my-org",
                  "vm_sizing_policy_ids": [
                    "${vcd_vm_sizing_policy.size_1.id}",
                    "${vcd_vm_sizing_policy.size_2.id}"
                  ]
                }
              references:
                default_compute_policy_id: vcd_vm_sizing_policy.size_1.id
              dependencies:
                vcd_vm_sizing_policy.size_1: |-
                    {
                      "cpu": [
                        {
                          "cores_per_socket": "3",
                          "count": "9",
                          "limit_in_mhz": "2400",
                          "reservation_guarantee": "0.55",
                          "shares": "886",
                          "speed_in_mhz": "2500"
                        }
                      ],
                      "name": "size-one"
                    }
                vcd_vm_sizing_policy.size_2: |-
                    {
                      "cpu": [
                        {
                          "cores_per_socket": "3",
                          "count": "9",
                          "limit_in_mhz": "2400",
                          "reservation_guarantee": "0.55",
                          "shares": "886",
                          "speed_in_mhz": "2500"
                        }
                      ],
                      "memory": [
                        {
                          "limit_in_mb": "2800",
                          "reservation_guarantee": "0.3",
                          "shares": "1580",
                          "size_in_mb": "3200"
                        }
                      ],
                      "name": "size-two"
                    }
            - name: my-vdc
              manifest: |-
                {
                  "default_compute_policy_id": "${data.vcd_vm_placement_policy.existing-policy.id}",
                  "description": "The pride of my work",
                  "name": "my-vdc",
                  "org": "my-org",
                  "vm_placement_policy_ids": [
                    "${data.vcd_vm_placement_policy.existing-policy.id}",
                    "${vcd_vm_placement_policy.new-placement-policy.id}"
                  ]
                }
              references:
                default_compute_policy_id: data.vcd_vm_placement_policy.existing-policy.id
              dependencies:
                vcd_vm_placement_policy.new-placement-policy: |-
                    {
                      "name": "place-in-vmware-licensed",
                      "provider_vdc_id": "${data.vcd_provider_vdc.pvdc.id}",
                      "vm_group_ids": [
                        "${data.vcd_vm_group.vmgroup.id}"
                      ]
                    }
            - name: example
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "is_system": true,
                      "key": "foo",
                      "type": "MetadataStringValue",
                      "user_access": "PRIVATE",
                      "value": "bar"
                    },
                    {
                      "is_system": false,
                      "key": "myBool",
                      "type": "MetadataBooleanValue",
                      "user_access": "READWRITE",
                      "value": "true"
                    }
                  ]
                }
        argumentDocs:
            allocated: '- (Optional) Capacity that is committed to be available. Value in MB or MHz. Used with AllocationPool ("Allocation pool"), ReservationPool ("Reservation pool"), Flex.'
            allocation_model: '- (Required) The allocation model used by this VDC; must be one of'
            allow_over_commit: '- (Optional) Set to false to disallow creation of the VDC if the allocation_model is AllocationPool or ReservationPool and the ComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.'
            compute_capacity: '- (Required) The compute capacity allocated to this VDC.  See Compute Capacity below for details.'
            cpu_guaranteed: '- (Optional, System Admin) Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then 75% of allocated resources are guaranteed. Required when allocation_model is AllocationVApp, AllocationPool or Flex. If left empty, VCD sets a value.'
            cpu_speed: '- (Optional, System Admin) Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will consume twice as much of this value. Ignored for ReservationPool. Required when allocation_model is AllocationVApp, AllocationPool or Flex, and may not be less than 256 MHz. Defaults to 1000 MHz if value isn''t provided.'
            default: '- (Required) True if this is default storage profile for this VDC. The default storage profile is used when an object that can specify a storage profile is created with no storage profile specified.'
            default_compute_policy_id: '- (Optional, v3.8+, VCD 10.2+) ID of the default Compute Policy for this VDC. It can be a VM Sizing Policy, a VM Placement Policy or a vGPU Policy.'
            default_vm_sizing_policy_id: '- (Deprecated; Optional, v3.0+, VCD 10.2+) ID of the default Compute Policy for this VDC. It can be a VM Sizing Policy, a VM Placement Policy or a vGPU Policy. Deprecated in favor of default_compute_policy_id.'
            delete_force: '- (Optional, but recommended) When destroying use delete_force=true to remove a VDC and any objects it contains, regardless of their state. Default is false'
            delete_recursive: '- (Optional, but recommended) When destroying use delete_recursive=true to remove the VDC and any objects it contains that are in a state that normally allows removal. Default is false'
            description: '- (Optional) VDC friendly description'
            edge_cluster_id: |-
                - (Deprecated; Optional, v3.8+, VCD 10.3+) An ID of NSX-T Edge Cluster which
                should provide vApp Networking Services or DHCP for isolated networks. Can be looked up using
                vcd_nsxt_edge_cluster data source. This field is deprecated in favor of
                vcd_org_vdc_nsxt_network_profile.
            elasticity: '- (Optional, v2.7+, VCD 9.7+) Indicates if the Flex VDC should be elastic. Required with the Flex allocation model.'
            enable_fast_provisioning: '- (Optional, System Admin) Request fast provisioning. Request will be honored only if the underlying datastore supports it. Fast provisioning can reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast provisioning, all provisioning operations will result in full clones.'
            enable_nsxv_distributed_firewall: '- (Optional, v3.9+, VCD 10.3+) Enables or disables the NSX-V distributed firewall.'
            enable_thin_provisioning: '- (Optional, System Admin) Boolean to request thin provisioning. Request will be honored only if the underlying data store supports it. Thin provisioning saves storage space by committing it on demand. This allows over-allocation of storage.'
            enable_vm_discovery: '- (Optional) If true, discovery of vCenter VMs is enabled for resource pools backing this VDC. If false, discovery is disabled. If left unspecified, the actual behaviour depends on enablement at the organization level and at the system level.'
            enabled: '- (Optional) True if this VDC is enabled for use by the organization VDCs. Default is true.'
            include_vm_memory_overhead: '- (Optional, v2.7+, VCD 9.7+) Indicates if the Flex VDC should include memory overhead into its accounting for admission control. Required with the Flex allocation model. memory_guaranteed must also be specified together with this parameter.'
            is_system: '- (Required) Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            key: '- (Required) Key of this metadata entry.'
            limit: '- (Required) Maximum number of MB allocated for this storage profile. A value of 0 specifies unlimited MB.'
            memory_guaranteed: '- (Optional, System Admin) Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then 75% of allocated resources are guaranteed. Required when allocation_model is AllocationVApp, AllocationPool or Flex. When Allocation model is AllocationPool minimum value is 0.2. If left empty, VCD sets a value.'
            metadata: '- (Deprecated; v2.4+) Use metadata_entry instead. Key value map of metadata to assign to this VDC'
            metadata_entry: '- (Optional; v3.8+) A set of metadata entries to assign. See Metadata section for details.'
            name: '- (Required) VDC name'
            network_pool_name: '- (Optional, System Admin) Reference to a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.'
            network_quota: '- (Optional) Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be deployed.'
            nic_quota: '- (Optional) Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.'
            org: '- (Optional) Organization to create the VDC in, optional if defined at provider level'
            provider_vdc_name: '- (Required, System Admin) Name of the Provider VDC from which this organization VDC is provisioned.'
            storage_profile: '- (Required, System Admin) Storage profiles supported by this VDC.  See Storage Profile below for details.'
            storage_used_in_mb: '- (Computed, v3.1+) Storage used, in Megabytes.'
            type: '- (Required) Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.'
            user_access: '- (Required) User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            value: '- (Required) Value of this metadata entry.'
            vm_placement_policy_ids: '- (Optional, v3.8+, VCD 10.2+) Set of IDs of VM Placement policies that are assigned to this VDC. This field requires default_compute_policy_id to be configured together.'
            vm_quota: '- (Optional) The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp templates. Defaults to 0, which specifies an unlimited number.'
            vm_sizing_policy_ids: '- (Optional, v3.0+, VCD 10.2+) Set of IDs of VM Sizing policies that are assigned to this VDC. This field requires default_compute_policy_id to be configured together.'
            vm_vgpu_policy_ids: '- (Optional, v3.11+, VCD 10.4+) Set of IDs of VM vGPU policies that are assigned to this VDC. This field requires default_compute_policy_id to be configured together.'
        importStatements: []
    vcd_org_vdc_access_control:
        subCategory: ""
        description: Provides a VMware Cloud Director Org VDC access control resource. This can be used to share VDC across users or groups.
        name: vcd_org_vdc_access_control
        title: org_vdc_access_control
        examples:
            - name: my_access_control
              manifest: |-
                {
                  "org": "my-org",
                  "shared_with": [
                    {
                      "access_level": "ReadOnly",
                      "user_id": "${data.vcd_org_user.my-user.id}"
                    },
                    {
                      "access_level": "ReadOnly",
                      "user_id": "${data.vcd_org_user.my-user2.id}"
                    }
                  ],
                  "shared_with_everyone": false,
                  "vdc": "my-vdc"
                }
              references:
                shared_with.user_id: data.vcd_org_user.my-user2.id
            - name: my_access_control
              manifest: |-
                {
                  "everyone_access_level": "ReadOnly",
                  "org": "my-org",
                  "shared_with_everyone": true,
                  "vdc": "my-vdc"
                }
            - name: my_access_control
              manifest: |-
                {
                  "everyone_access_level": "ReadOnly",
                  "org": "my-org",
                  "shared_with_everyone": true,
                  "vdc": "my-vdc"
                }
              dependencies:
                vcd_org_vdc.my_vdc: |-
                    {
                      "allocation_model": "Flex",
                      "compute_capacity": [
                        {
                          "cpu": [
                            {
                              "allocated": "1024",
                              "limit": "1024"
                            }
                          ],
                          "memory": [
                            {
                              "allocated": "1024",
                              "limit": "1024"
                            }
                          ]
                        }
                      ],
                      "delete_force": true,
                      "delete_recursive": true,
                      "elasticity": false,
                      "enable_fast_provisioning": true,
                      "enable_thin_provisioning": true,
                      "enabled": true,
                      "include_vm_memory_overhead": false,
                      "name": "my-vdc",
                      "network_pool_name": "my-network-pool",
                      "org": "my-org",
                      "provider_vdc_name": "my-provider-vdc",
                      "storage_profile": [
                        {
                          "default": true,
                          "enabled": true,
                          "limit": 10240,
                          "name": "my-storage-profile"
                        }
                      ]
                    }
        argumentDocs:
            everyone_access_level: '- (Optional) Access level when the VDC is shared with everyone (only ReadOnly is available). Required when shared_with_everyone is set.'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations.'
            shared_with: |-
                - (Optional) one or more blocks defining a subject to which we are sharing.
                See shared_with below for detail. It cannot be used if shared_with_everyone is set.
            shared_with.access_level: '- (Required) The access level for the user or group to which we are sharing. (Only ReadOnly is available)'
            shared_with.group_id: '- (Optional) The ID of a group which we are sharing with. Required if user_id is not set.'
            shared_with.subject_name: '- The name of the subject (group or user) which we are sharing with.'
            shared_with.user_id: '- (Optional) The ID of a user which we are sharing with. Required if group_id is not set.'
            shared_with_everyone: '- (Required) Whether the VDC is shared with everyone.'
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level.'
        importStatements: []
    vcd_org_vdc_nsxt_network_profile:
        subCategory: ""
        description: Provides a resource to manage NSX-T Org VDC Network Profile.
        name: vcd_org_vdc_nsxt_network_profile
        title: vcd_org_vdc_nsxt_network_profile
        examples:
            - name: nsxt
              manifest: |-
                {
                  "edge_cluster_id": "${data.vcd_nsxt_edge_cluster.first.id}",
                  "org": "my-org",
                  "vapp_networks_default_segment_profile_template_id": "${vcd_nsxt_segment_profile_template.complete.id}",
                  "vdc": "my-vdc",
                  "vdc_networks_default_segment_profile_template_id": "${vcd_nsxt_segment_profile_template.complete.id}"
                }
              references:
                edge_cluster_id: data.vcd_nsxt_edge_cluster.first.id
                vapp_networks_default_segment_profile_template_id: vcd_nsxt_segment_profile_template.complete.id
                vdc_networks_default_segment_profile_template_id: vcd_nsxt_segment_profile_template.complete.id
        argumentDocs:
            edge_cluster_id: '- (Optional) - Edge Cluster ID to be used for this VDC'
            vapp_networks_default_segment_profile_template_id: |-
                - (Optional) - Default Segment Profile
                Template ID for all vApp Networks in a VDC
            vdc_networks_default_segment_profile_template_id: |-
                - (Optional) - Default Segment Profile
                Template ID for all VDC Networks in a VDC
        importStatements: []
    vcd_org_vdc_template:
        subCategory: ""
        description: Provides a resource to create Organization VDC Templates in VMware Cloud Director. This can be used to create, delete, and update a Organization VDC Template.
        name: vcd_org_vdc_template
        title: vcd_org_vdc_template
        examples:
            - name: tmpl
              manifest: |-
                {
                  "allocation_model": "AllocationVApp",
                  "compute_configuration": [
                    {
                      "cpu_guaranteed": 20,
                      "cpu_limit": 0,
                      "cpu_speed": 256,
                      "memory_guaranteed": 30,
                      "memory_limit": 1024
                    }
                  ],
                  "description": "Requires System privileges",
                  "name": "myTemplate",
                  "network_pool_id": "${data.vcd_network_pool.np1.id}",
                  "provider_vdc": [
                    {
                      "external_network_id": "${data.vcd_external_network_v2.ext_net.id}",
                      "id": "${data.vcd_provider_vdc.pvdc1.id}"
                    },
                    {
                      "external_network_id": "${data.vcd_external_network_v2.ext_net.id}",
                      "id": "${data.vcd_provider_vdc.pvdc2.id}"
                    }
                  ],
                  "readable_by_org_ids": [
                    "${data.vcd_org.org.id}"
                  ],
                  "storage_profile": [
                    {
                      "default": true,
                      "limit": 1024,
                      "name": "*"
                    }
                  ],
                  "tenant_description": "Any tenant can use this",
                  "tenant_name": "myAwesomeTemplate"
                }
              references:
                network_pool_id: data.vcd_network_pool.np1.id
                provider_vdc.external_network_id: data.vcd_external_network_v2.ext_net.id
                provider_vdc.id: data.vcd_provider_vdc.pvdc2.id
            - name: an_existing_vdc_template
              manifest: '{}'
        argumentDocs:
            allocation_model: |-
                - (Required) Allocation model that the VDCs instantiated from this template will use.
                Must be one of: AllocationVApp, AllocationPool, ReservationPool or  Flex
            compute_configuration: ': The compute configuration for the VDCs instantiated from this template:'
            cpu_allocated: '- (Required for AllocationPool, ReservationPool or Flex) The maximum amount of CPU, in MHz, available to the VMs running within the VDC that is instantiated from this template. Minimum is 256MHz'
            cpu_guaranteed: '- (Required for AllocationVApp, AllocationPool or Flex) The percentage of the CPU guaranteed to be available to VMs running within the VDC instantiated from this template'
            cpu_limit: '- (Required for AllocationVApp, ReservationPool or Flex) The limit amount of CPU, in MHz, of the VDC that is instantiated from this template. Minimum is 256MHz. 0 means unlimited'
            cpu_speed: '- (Required for AllocationVApp, AllocationPool or Flex) Specifies the clock frequency, in MHz, for any virtual CPU that is allocated to a VM. Minimum is 256MHz'
            default: '- (Required) True if this is default storage profile for the VDCs instantiated from this template. Only one block should have this set to true'
            description: '- (Optional) Description of the Organization VDC Template, as seen by System administrators'
            edge_gateway: |-
                - (Optional) VDCs instantiated from this template will create a new Edge Gateway with the provided setup. Required if any provider_vdc block
                has defined a gateway_edge_cluster_id. This unique block has the following properties:
            elasticity: '- (Required for Flex) True if compute capacity can grow or shrink based on demand'
            enable_fast_provisioning: '- (Optional) If true, the VDCs instantiated from this template will have Fast provisioning enabled. Defaults to false'
            enable_thin_provisioning: '- (Optional) If true, the VDCs instantiated from this template will have Thin provisioning enabled. Defaults to false'
            external_network_id: |-
                - (Required) ID of the Provider Gateway to use, can be obtained with
                vcd_external_network_v2 data source
            gateway_edge_cluster_id: |-
                - (Optional) ID of the Edge Cluster that the VDCs instantiated from this template will use with the Edge Gateway.
                Can be obtained with vcd_nsxt_edge_cluster data source.
                If set, a edge_gateway block must be present in the VDC Template configuration (see below).
            id: |-
                - (Required) ID of the Provider VDC, can be obtained with
                vcd_provider_vdc data source
            include_vm_memory_overhead: '- (Required for Flex) True if the instantiated VDC includes memory overhead into its accounting for admission control'
            ip_allocation_count: '- (Optional) Allocated IPs for the Edge Gateway. Defaults to 0'
            limit: '- (Required) Storage limit for the VDCs instantiated from this template, in MB. 0 means unlimited'
            memory_allocated: '- (Required for AllocationPool, ReservationPool or Flex) The maximum amount of Memory, in MB, available to the VMs running within the VDC that is instantiated from this template'
            memory_guaranteed: '- (Required for AllocationVApp, AllocationPool or Flex) The percentage of the Memory guaranteed to be available to VMs running within the VDC instantiated from this template'
            memory_limit: '- (Required for AllocationVApp, ReservationPool or Flex) The limit amount of Memory, in MB, of the VDC that is instantiated from this template. Minimum is 1024MB. 0 means unlimited'
            name: '- (Required) Name to give to the Organization VDC Template, as seen by System administrators'
            network_pool_id: '- (Optional) If set, specifies the Network pool for the instantiated VDCs. Otherwise, it is automatically chosen'
            nic_quota: '- (Optional) Quota for the NICs of the instantiated VDCs. Defaults to 100'
            provider_vdc: '- (Required) A block that defines a candidate location for the instantiated VDCs. There must be at least one, which has the following properties:'
            provisioned_network_quota: '- (Optional) Quota for the provisioned networks of the instantiated VDCs. Defaults to 1000'
            readable_by_org_ids: |-
                - (Optional) A set of Organization IDs that will be able to view and read this VDC template, they can be obtained with
                vcd_org data source
            routed_network_description: '- (Optional) Description of the routed network to create with the Edge Gateway'
            routed_network_gateway_cidr: '- (Required) CIDR of the Edge Gateway for the created routed network'
            routed_network_name: '- (Required) Name of the routed network to create with the Edge Gateway'
            services_edge_cluster_id: |-
                - (Optional) ID of the Edge Cluster that the VDCs instantiated from this template will use for services.
                Can be obtained with vcd_nsxt_edge_cluster data source
            static_ip_pool: |-
                - (Required) One block with a single IP range (this is a constraint due to a bug in VCD 10.5+) that has two properties: start_address, the start address of the IP range;
                end_address, the end address of the IP range
            storage_profile: '- (Required) A block that defines a storage profile that the VDCs instantiated from this template will use. Must be at least one, which has the following properties:'
            tenant_description: '- (Optional) Description of the Organization VDC Template, as seen by the allowed tenants'
            tenant_name: '- (Required) Name to give to the Organization VDC Template, as seen by the allowed tenants'
            vm_quota: '- (Optional) Quota for the VMs of the instantiated VDCs. 0 means unlimited. Defaults to 0'
        importStatements: []
    vcd_org_vdc_template_instance:
        subCategory: ""
        description: Provides a resource to instantiate VDCs from a VDC Template in VMware Cloud Director.
        name: vcd_org_vdc_template_instance
        title: vcd_org_vdc_template_instance
        examples:
            - name: my_instance
              manifest: |-
                {
                  "delete_force": false,
                  "delete_instantiated_vdc_on_removal": false,
                  "delete_recursive": false,
                  "description": "A new VDC",
                  "name": "myInstantiatedVdc",
                  "org_id": "${data.vcd_org.org.id}",
                  "org_vdc_template_id": "${vcd_org_vdc_template.tmpl.id}"
                }
              references:
                org_id: data.vcd_org.org.id
                org_vdc_template_id: vcd_org_vdc_template.tmpl.id
              dependencies:
                vcd_org_vdc_template.tmpl: |-
                    {
                      "allocation_model": "AllocationVApp",
                      "compute_configuration": [
                        {
                          "cpu_guaranteed": 20,
                          "cpu_limit": 0,
                          "cpu_speed": 256,
                          "memory_guaranteed": 30,
                          "memory_limit": 1024
                        }
                      ],
                      "description": "Requires System privileges",
                      "name": "myTemplate",
                      "network_pool_id": "${data.vcd_network_pool.np1.id}",
                      "provider_vdc": [
                        {
                          "external_network_id": "${data.vcd_external_network_v2.ext_net.id}",
                          "id": "${data.vcd_provider_vdc.pvdc1.id}"
                        },
                        {
                          "external_network_id": "${data.vcd_external_network_v2.ext_net.id}",
                          "id": "${data.vcd_provider_vdc.pvdc2.id}"
                        }
                      ],
                      "readable_by_org_ids": [
                        "${data.vcd_org.org.id}"
                      ],
                      "storage_profile": [
                        {
                          "default": true,
                          "limit": 1024,
                          "name": "*"
                        }
                      ],
                      "tenant_description": "Any tenant can use this",
                      "tenant_name": "myAwesomeTemplate"
                    }
        argumentDocs:
            delete_force: '- (Optional) Defaults to false. If this flag is set to true, it forcefully deletes the VDC, only when delete_instantiated_vdc_on_removal=true'
            delete_instantiated_vdc_on_removal: '- (Required) If this flag is set to true, removing this resource will attempt to delete the instantiated VDC'
            delete_recursive: '- (Optional) Defaults to false. If this flag is set to true, it recursively deletes the VDC, only when delete_instantiated_vdc_on_removal=true'
            description: '- (Optional) Description of the instantiated Organization VDC'
            "false": |-
                , removing this resource will leave the instantiated VDC behind. This is useful when the VDC is being managed
                by Terraform after importing it to a vcd_org_vdc (see section below), therefore this resource is not needed anymore.
            name: '- (Required) Name to give to the instantiated Organization VDC'
            org_id: '- (Required) ID of the Organization where the VDC will be instantiated'
            org_vdc_template_id: '- (Required) The ID of the VDC Template to instantiate'
            "true": ', removing this resource will attempt to delete the VDC that it instantiated.'
        importStatements: []
    vcd_provider_vdc:
        subCategory: ""
        description: Provides a Provider VDC resource.
        name: vcd_provider_vdc
        title: vcd_provider_vdc
        examples:
            - name: pvdc1
              manifest: |-
                {
                  "description": "new provider VDC",
                  "highest_supported_hardware_version": "${data.vcd_resource_pool.rp1.hardware_version}",
                  "is_enabled": true,
                  "name": "myPvdc",
                  "network_pool_ids": [
                    "${data.vcd_network_pool.np1.id}"
                  ],
                  "nsxt_manager_id": "${data.vcd_nsxt_manager.mgr1.id}",
                  "resource_pool_ids": [
                    "${data.vcd_resource_pool.rp1.id}"
                  ],
                  "storage_profile_names": [
                    "Development"
                  ],
                  "vcenter_id": "${data.vcd_vcenter.vcenter1.id}"
                }
              references:
                highest_supported_hardware_version: data.vcd_resource_pool.rp1.hardware_version
                nsxt_manager_id: data.vcd_nsxt_manager.mgr1.id
                vcenter_id: data.vcd_vcenter.vcenter1.id
            - name: pvdc1
              manifest: |-
                {
                  "description": "new provider VDC",
                  "highest_supported_hardware_version": "${data.vcd_resource_pool.rp2.hardware_version}",
                  "is_enabled": true,
                  "name": "myPvdc",
                  "network_pool_ids": [
                    "${data.vcd_network_pool.np1.id}"
                  ],
                  "nsxt_manager_id": "${data.vcd_nsxt_manager.mgr1.id}",
                  "resource_pool_ids": [
                    "${data.vcd_resource_pool.rp1.id}",
                    "${data.vcd_resource_pool.rp2.id}"
                  ],
                  "storage_profile_names": [
                    "Development"
                  ],
                  "vcenter_id": "${data.vcd_vcenter.vcenter1.id}"
                }
              references:
                highest_supported_hardware_version: data.vcd_resource_pool.rp2.hardware_version
                nsxt_manager_id: data.vcd_nsxt_manager.mgr1.id
                vcenter_id: data.vcd_vcenter.vcenter1.id
        argumentDocs:
            allocation: '- Allocated CPU/Memory for this Provider VDC.'
            capabilities: '- Set of virtual hardware versions supported by this Provider VDC.'
            compute_capacity: '- An indicator of CPU and memory capacity. See Compute Capacity below for details.'
            compute_provider_scope: '- Represents the compute fault domain for this Provider VDC. This value is a tenant-facing tag that is shown to tenants when viewing fault domains of the child Organization VDCs (for example, a VDC Group).'
            cpu: '- An indicator of CPU. See CPU and memory below.'
            description: '- (Optional) Description of the Provider VDC.'
            external_network_ids: '- Set of IDs of External Networks.'
            highest_supported_hardware_version: '- (Required) The highest virtual hardware version supported by this Provider VDC. This value cannot be changed to a lower version, and can only be updated when adding a new resource pool.'
            host_ids: '- Set containing all the hosts which are connected to VC server.'
            is_elastic: '-  True if compute capacity can grow or shrink based on demand.'
            is_enabled: '- (Optional) True if this Provider VDC is enabled and can provide resources to organization VDCs. A Provider VDC is always enabled on creation.'
            is_ha: '- True if compute capacity is highly available.'
            is_system: '- Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            key: '- Key of this metadata entry.'
            memory: '- An indicator of memory. See CPU and memory below.'
            metadata_entry: '- A set of metadata entries assigned to the Provider VDC. See Metadata section for details.'
            name: '- (Required) Provider VDC name'
            network_pool_ids: '- (Required) Set IDs of the Network Pools used by this Provider VDC.'
            nsxt_manager_id: '- (Optional) ID of the registered NSX-T Manager that backs networking operations for this Provider VDC.'
            overhead: '- CPU/Memory overhead for this Provider VDC.'
            reserved: '- Reserved CPU/Memory for this Provider VDC.'
            resource_pool_ids: '- (Optional) Set of IDs of the Resource Pools backing this provider VDC. (Note: only one resource pool can be set at creation).'
            status: '- Status of the Provider VDC: -1 (creation failed), 0 (not ready), 1 (ready), 2 (unknown) or 3 (unrecognized).'
            storage_containers_ids: '- Set of IDs of the vSphere Datastores backing this Provider VDC.'
            storage_profile_ids: '- Set of IDs to the Storage Profiles available to this Provider VDC.'
            storage_profile_names: '- (Required) Set of Storage Profile names used to create this provider VDC.'
            total: '- Total CPU/Memory for this Provider VDC.'
            type: '- Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.'
            units: '- Units for the CPU/Memory of this Provider VDC.'
            universal_network_pool_id: '- ID of the universal network reference.'
            used: '- Used CPU/Memory in this Provider VDC.'
            user_access: '- User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            value: '- Value of this metadata entry.'
            vcenter_id: '- (Required) ID of the vCenter Server that provides the Resource Pools and Datastores.'
        importStatements: []
    vcd_rde:
        subCategory: ""
        description: Provides the capability of creating, updating, and deleting Runtime Defined Entities in VMware Cloud Director.
        name: vcd_rde
        title: vcd_rde
        examples:
            - name: my_rde
              manifest: |-
                {
                  "input_entity": "${file(\"${path.module}/entities/custom-rde.json\")}",
                  "name": "My custom RDE",
                  "org": "my-org",
                  "rde_type_id": "${data.vcd_rde_type.my-type.id}",
                  "resolve": true
                }
              references:
                rde_type_id: data.vcd_rde_type.my-type.id
            - name: my_rde
              manifest: |-
                {
                  "input_entity": "${templatefile(\"${path.module}/entities/custom-rde.json\", {\n    name          = var.name\n    custom_field  = \"This one is hardcoded\"\n    another_field = var.anoter_field\n    replicas      = 2\n  })}",
                  "name": "My custom RDE",
                  "org": "my-org",
                  "rde_type_id": "${data.vcd_rde_type.my-type.id}",
                  "resolve": true
                }
              references:
                rde_type_id: data.vcd_rde_type.my-type.id
            - name: my-rde
              manifest: |-
                {
                  "entity_url": "https://just.an-example.com/entities/custom-rde.json",
                  "name": "My custom RDE",
                  "org": "my-org",
                  "rde_type_id": "${data.vcd_rde_type.my-type.id}",
                  "resolve": true
                }
              references:
                rde_type_id: data.vcd_rde_type.my-type.id
            - name: my-rde
              manifest: |-
                {
                  "entity_url": "https://just.an-example.com/entities/custom-rde.json",
                  "name": "My custom RDE",
                  "org": "my-org",
                  "rde_type_id": "${data.vcd_rde_type.my_updated_type.id}",
                  "resolve": true
                }
              references:
                rde_type_id: data.vcd_rde_type.my_updated_type.id
            - name: my-rde
              manifest: |-
                {
                  "entity_url": "https://just.an-example.com/entities/custom-rde.json",
                  "metadata_entry": [
                    {
                      "domain": "TENANT",
                      "key": "foo",
                      "readonly": true,
                      "type": "StringEntry",
                      "value": "bar"
                    },
                    {
                      "domain": "PROVIDER",
                      "key": "bar",
                      "persistent": true,
                      "type": "NumberEntry",
                      "value": "42"
                    }
                  ],
                  "name": "My custom RDE",
                  "org": "my-org",
                  "rde_type_id": "${data.vcd_rde_type.my-type.id}",
                  "resolve": true
                }
              references:
                rde_type_id: data.vcd_rde_type.my-type.id
            - name: outer_rde
              manifest: |-
                {
                  "name": "foo",
                  "rde_type_id": "${data.my_rde_type.id}"
                }
              references:
                rde_type_id: data.my_rde_type.id
        argumentDocs:
            computed_entity: '- The real state of this RDE in VCD. See Input entity vs Computed entity below for details.'
            domain: |-
                - (Optional) Only meaningful for providers. Allows them to share entries with their tenants. Currently, accepted values are: TENANT, PROVIDER. Defaults to TENANT.
                Updating this value forces a re-creation of the metadata entry.
            entity_in_sync: |-
                - It's true when computed_entity is equal to either input_entity or the contents of input_entity_url,
                meaning that the computed RDE retrieved from VCD is synchronized with the input RDE.
            external_id: '- (Optional) An external input_entity''s ID that this Runtime Defined Entity may have a relation to.'
            id: '- (Computed) Read-only identifier for this metadata entry.'
            input_entity: '- (Optional) A string that specifies a valid JSON for the RDE. It can be retrieved with functions such as file, templatefile... Either input_entity or input_entity_url is required.'
            input_entity_url: |-
                - (Optional) The URL that points to a valid JSON for the RDE. Either input_entity or input_entity_url is required.
                The referenced JSON will be downloaded on every read operation, and it will break Terraform operations if these contents are no longer present on the remote site.
                If you can't guarantee this, it is safer to use input_entity.
            key: '- (Required) Key of this metadata entry.'
            metadata_entry: '- (Optional; v3.11+) A set of metadata entries to assign. See Metadata section for details.'
            name: '- (Required) The name of the Runtime Defined Entity. It can be non-unique.'
            namespace: '- (Optional) Namespace of the metadata entry. Allows having multiple entries with same key in different namespaces.'
            org: '- (Optional) Name of the Organization that will own the RDE, optional if defined at provider level.'
            org_id: '- The ID of the Organization to which the Runtime Defined Entity belongs.'
            owner_user_id: '- The ID of the Organization user that owns this Runtime Defined Entity.'
            persistent: |-
                - (Optional) true if the metadata is persistent. Persistent entries can be copied over on some entity operation.
                Right now it doesn't have any effect.
            rde_type_id: |-
                - (Required) The ID of the RDE Type to instantiate. It only supports
                updating to a newer/lower version of the same RDE Type.
            readonly: '- (Optional) true if the metadata entry is read only. Defaults to false.  Updating this value forces a re-creation of the metadata entry.'
            resolve: |-
                - (Required) If true, the Runtime Defined Entity will be resolved by this provider. If false, it won't be
                resolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't be
                deleted until the input_entity is resolved by either party, unless resolve_on_removal=true. See RDE resolution for more details.
            resolve_on_removal: '- (Optional) If true, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion. Destroy will fail if it is not resolved. It is false by default.'
            state: |-
                - Specifies whether the entity is correctly resolved or not. When created it will be in PRE_CREATED state.
                If the entity is correctly validated against its RDE Type schema, the state will be RESOLVED,
                otherwise it will be RESOLUTION_ERROR.
            type: |-
                - (Optional) Type of this metadata entry. One of: StringEntry, NumberEntry, BoolEntry. Defaults to StringEntry.
                Updating this value forces a re-creation of the metadata entry.
            value: '- (Required) Value of this metadata entry. It can be updated.'
        importStatements: []
    vcd_rde_interface:
        subCategory: ""
        description: Provides the capability of creating, updating, and deleting Runtime Defined Entity Interfaces in VMware Cloud Director.
        name: vcd_rde_interface
        title: vcd_rde_interface
        examples:
            - name: my_interface1
              manifest: |-
                {
                  "name": "BigCorp Interface",
                  "nss": "tech",
                  "vendor": "bigcorp",
                  "version": "1.2.3"
                }
            - name: my_interface2
              manifest: |-
                {
                  "name": "Another BigCorp Interface",
                  "nss": "tech",
                  "vendor": "bigcorp",
                  "version": "1.2.4"
                }
            - name: outer_interface
              manifest: |-
                {
                  "nss": "tech",
                  "vendor": "bigcorp",
                  "version": "4.5.6"
                }
        argumentDocs:
            name: '- (Required) The name of the RDE Interface.'
            nss: '- (Required) A unique namespace associated with the RDE Interface. Only alphanumeric characters, underscores and hyphens allowed.'
            readonly: '- Specifies if the RDE Interface can be only read.'
            vendor: '- (Required) The vendor of the RDE Interface. Only alphanumeric characters, underscores and hyphens allowed.'
            version: '- (Required) The version of the RDE Interface. Must follow semantic versioning syntax.'
        importStatements: []
    vcd_rde_interface_behavior:
        subCategory: ""
        description: Provides the capability of managing RDE Interface Behaviors in VMware Cloud Director.
        name: vcd_rde_interface_behavior
        title: vcd_rde_interface_behavior
        examples:
            - name: my_behavior
              manifest: |-
                {
                  "description": "Adds a node to the cluster.\nParameters:\n  clusterId: the ID of the cluster\n  node: The node address\n",
                  "execution": {
                    "id": "MyExecution",
                    "type": "Activity"
                  },
                  "name": "MyBehavior",
                  "rde_interface_id": "${vcd_rde_interface.my_interface.id}"
                }
              references:
                rde_interface_id: vcd_rde_interface.my_interface.id
              dependencies:
                vcd_rde_interface.my_interface: |-
                    {
                      "name": "BigCorp Interface",
                      "nss": "tech",
                      "vendor": "bigcorp",
                      "version": "1.2.3"
                    }
            - name: my_behavior2
              manifest: |-
                {
                  "execution": {
                    "id": "MyExecution2",
                    "type": "noop"
                  },
                  "name": "MyBehavior2",
                  "rde_interface_id": "${vcd_rde_interface.my_interface.id}"
                }
              references:
                rde_interface_id: vcd_rde_interface.my_interface.id
              dependencies:
                vcd_rde_interface.my_interface: |-
                    {
                      "name": "BigCorp Interface",
                      "nss": "tech",
                      "vendor": "bigcorp",
                      "version": "1.2.3"
                    }
            - name: my_behavior3
              manifest: |-
                {
                  "execution_json": "${jsonencode({\n    \"type\" : \"WebHook\",\n    \"id\" : \"testWebHook\",\n    \"href\" : \"https://hooks.slack.com:443/services/T07UZFN0N/B01EW5NC42D/rfjhHCGIwzuzQFrpPZiuLkIX\",\n    \"_internal_key\" : \"secretKey\",\n    \"execution_properties\" : {\n      \"template\" : {\n        \"content\" : \"\u003ctemplate_content_string\u003e\"\n      },\n      \"_secure_token\" : \"secureToken\",\n      \"invocation_timeout\" : 7\n    }\n  })}",
                  "name": "MyBehavior3",
                  "rde_interface_id": "${vcd_rde_interface.my_interface.id}"
                }
              references:
                rde_interface_id: vcd_rde_interface.my_interface.id
              dependencies:
                vcd_rde_interface.my_interface: |-
                    {
                      "name": "BigCorp Interface",
                      "nss": "tech",
                      "vendor": "bigcorp",
                      "version": "1.2.3"
                    }
            - name: outer_interface
              manifest: |-
                {
                  "interface_id": "urn:vcloud:interface:vmware:k8s:1.0.0",
                  "name": "createKubeConfig"
                }
        argumentDocs:
            always_update_secure_execution_properties: |-
                - (Optional; v3.14) Useful to update execution properties marked with _secure_ and _internal_
                as these are not retrievable from VCD, so they are not saved in state. Setting this to true will make the provider
                to ask for updates whenever there is a secure property in the execution of the Behavior
            description: '- (Optional) A description specifying the contract of the Behavior'
            execution: |-
                - (Optional) A map that specifies the Behavior execution mechanism, this is just a simplification of execution_json that
                can make the configuration more readable for simpler Behaviors. One of execution_json or execution must be set.
            execution_json: |-
                - (Optional; v3.14) A string representing a valid JSON that specifies the Behavior execution mechanism.
                You can find more information about the different execution types, like WebHook, noop, Activity, MQTT, VRO, AWSLambdaFaaS
                and others in the Extensibility SDK documentation.
                One of execution_json or execution must be set.
            name: '- (Required) Name of the Behavior'
            rde_interface_id: '- (Required) The ID of the RDE Interface that owns the Behavior'
            ref: '- The Behavior invocation reference to be used for polymorphic behavior invocations'
        importStatements: []
    vcd_rde_type:
        subCategory: ""
        description: Provides the capability of creating, updating, and deleting Runtime Defined Entity types in VMware Cloud Director.
        name: vcd_rde_type
        title: vcd_rde_type
        examples:
            - name: my_rde_type
              manifest: |-
                {
                  "interface_ids": [
                    "${data.vcd_rde_interface.my_interface.id}"
                  ],
                  "name": "My VMware RDE Type",
                  "nss": "vcd",
                  "schema": "${file(\"${path.module}/schemas/my-type-schema.json\")}",
                  "vendor": "vmware",
                  "version": "4.5.6"
                }
            - name: my_rde_type
              manifest: |-
                {
                  "interface_ids": [
                    "${data.vcd_rde_interface.my_interface.id}"
                  ],
                  "name": "My VMware RDE Type",
                  "nss": "vcd",
                  "schema_url": "https://just.an-example.com/schemas/my-type-schema.json",
                  "vendor": "vmware",
                  "version": "4.5.6"
                }
            - name: my_rde_type
              manifest: |-
                {
                  "depends_on": [
                    "${vcd_rde_interface_behavior.my_behavior}"
                  ],
                  "interface_ids": [
                    "${data.vcd_rde_interface.my_interface.id}"
                  ],
                  "name": "My VMware RDE Type",
                  "nss": "vcd",
                  "schema_url": "https://just.an-example.com/schemas/my-type-schema.json",
                  "vendor": "vmware",
                  "version": "4.5.6"
                }
              dependencies:
                vcd_rde_interface_behavior.my_behavior: |-
                    {
                      "description": "Adds a node to the cluster.\nParameters:\n  clusterId: the ID of the cluster\n  node: The node address\n",
                      "execution": {
                        "id": "MyExecution",
                        "type": "Activity"
                      },
                      "interface_id": "${vcd_rde_interface.my_interface.id}",
                      "name": "MyBehavior"
                    }
            - name: my_rde_type
              manifest: |-
                {
                  "hook": [
                    {
                      "behavior_id": "${vcd_rde_interface_behavior.my_behavior.id}",
                      "event": "PostCreate"
                    }
                  ],
                  "interface_ids": [
                    "${data.vcd_rde_interface.my_interface.id}"
                  ],
                  "name": "My VMware RDE Type",
                  "nss": "vcd",
                  "schema_url": "https://just.an-example.com/schemas/my-type-schema.json",
                  "vendor": "vmware",
                  "version": "4.5.6"
                }
              references:
                hook.behavior_id: vcd_rde_interface_behavior.my_behavior.id
              dependencies:
                vcd_rde_interface_behavior.my_behavior: |-
                    {
                      "description": "Calls an example Behavior.\nParameters:\n  parameter1: the first param\n  parameter2: the second param\n",
                      "execution": {
                        "id": "MyExecution",
                        "type": "Activity"
                      },
                      "interface_id": "${vcd_rde_interface.my_interface.id}",
                      "name": "MyBehavior"
                    }
            - name: outer_rde_type
              manifest: |-
                {
                  "nss": "tech",
                  "vendor": "bigcorp",
                  "version": "4.5.6"
                }
        argumentDocs:
            behavior_id: ': Existing Behavior that will be automatically invoked when any RDE of this RDE Type triggers the event.'
            description: '- (Optional) The description of the Runtime Defined Entity Type.'
            event: ': Event that will invoke the Behavior, one of PostCreate, PostUpdate, PreDelete, PostDelete.'
            external_id: '- (Optional) An external entity''s ID that this Runtime Defined Entity Type may apply to.'
            hook: |-
                - (Optional; v3.11+) Each block maps a lifecycle event of RDEs
                to existing Behaviors, that will be
                automatically invoked when the corresponding event is triggered. These blocks have the following properties:
            inherited_version: |-
                - (Optional) To be used when creating a new version of a Runtime Defined Entity Type.
                Specifies the version of the type that will be the template for the authorization configuration of the new version.
                The Type ACLs and the access requirements of the Type Behaviors of the new version will be copied from those of the inherited version.
                If not set, then the new type version will not inherit another version and will have the default authorization settings, just like the first version of a new type.
            interface_ids: '- (Optional) The set of Defined Interfaces that this Runtime Defined Entity Type will use.'
            name: '- (Required) The name of the Runtime Defined Entity Type.'
            nss: '- (Required) A unique namespace associated with the Runtime Defined Entity Type. Only alphanumeric characters, underscores and hyphens allowed.'
            readonly: '- True if the Runtime Defined Entity Type cannot be modified.'
            schema: '- (Optional) A string that specifies a valid JSON schema. It can be retrieved with Terraform functions such as file, templatefile, etc. Either schema or schema_url is required.'
            schema_url: |-
                - (Optional) The URL that points to a valid JSON schema. Either schema or schema_url is required.
                If schema_url is used, the downloaded schema will be computed in the schema attribute.
                The referenced JSON schema will be downloaded on every read operation, and it will break Terraform operations if these contents are no longer present on the remote site.
                If you can't guarantee this, it is safer to use schema.
            vendor: '- (Required) The vendor of the Runtime Defined Entity Type. Only alphanumeric characters, underscores and hyphens allowed.'
            version: '- (Required) The version of the Runtime Defined Entity Type. Must follow semantic versioning syntax.'
        importStatements: []
    vcd_rde_type_behavior:
        subCategory: ""
        description: Provides the capability of managing RDE Type Behaviors in VMware Cloud Director.
        name: vcd_rde_type_behavior
        title: vcd_rde_type_behavior
        examples:
            - name: my_rde_type_behavior
              manifest: |-
                {
                  "execution": {
                    "id": "addNodeOverridden",
                    "type": "Activity"
                  },
                  "rde_interface_behavior_id": "${vcd_rde_interface_behavior.my_interface_behavior.id}",
                  "rde_type_id": "${vcd_rde_type.my_rde_type.id}"
                }
              references:
                rde_interface_behavior_id: vcd_rde_interface_behavior.my_interface_behavior.id
                rde_type_id: vcd_rde_type.my_rde_type.id
              dependencies:
                vcd_rde_interface_behavior.my_interface_behavior: |-
                    {
                      "description": "Adds a node to the cluster.\nParameters:\n  clusterId: the ID of the cluster\n  node: The node address\n",
                      "execution": {
                        "id": "addNode",
                        "type": "Activity"
                      },
                      "name": "MyBehavior",
                      "rde_interface_id": "${vcd_rde_interface.my_interface.id}"
                    }
                vcd_rde_type.my_rde_type: |-
                    {
                      "depends_on": [
                        "${vcd_rde_interface_behavior.my_interface_behavior}"
                      ],
                      "interface_ids": [
                        "${data.vcd_rde_interface.my_interface.id}"
                      ],
                      "name": "My VMware RDE Type",
                      "nss": "vcd",
                      "schema": "${file(\"${path.module}/schemas/my-type-schema.json\")}",
                      "vendor": "vmware",
                      "version": "4.5.6"
                    }
            - name: my_rde_type_behavior
              manifest: |-
                {
                  "execution_json": "${jsonencode({\n    \"type\" : \"WebHook\",\n    \"id\" : \"testWebHookOverridden\",\n    \"href\" : \"https://hooks.slack.com:443/services/T07UZFN0N/B01EW5NC42D/rfjhHCGIwzuzQFrpPZiuLkIX\",\n    \"_internal_key\" : \"secretKey2\",\n    \"execution_properties\" : {\n      \"template\" : {\n        \"content\" : \"\u003ctemplate_content_string\u003e\"\n      },\n      \"_secure_token\" : \"secureToken\",\n      \"invocation_timeout\" : 7\n    }\n  })}",
                  "rde_interface_behavior_id": "${vcd_rde_interface_behavior.my_interface_behavior.id}",
                  "rde_type_id": "${vcd_rde_type.my_rde_type.id}"
                }
              references:
                rde_interface_behavior_id: vcd_rde_interface_behavior.my_interface_behavior.id
                rde_type_id: vcd_rde_type.my_rde_type.id
              dependencies:
                vcd_rde_interface_behavior.my_interface_behavior: |-
                    {
                      "description": "Adds a node to the cluster.\nParameters:\n  clusterId: the ID of the cluster\n  node: The node address\n",
                      "execution_json": "${jsonencode({\n    \"type\" : \"WebHook\",\n    \"id\" : \"testWebHook\",\n    \"href\" : \"https://hooks.slack.com:443/services/T07UZFN0N/B01EW5NC42D/rfjhHCGIwzuzQFrpPZiuLkIX\",\n    \"_internal_key\" : \"secretKey\",\n    \"execution_properties\" : {\n      \"template\" : {\n        \"content\" : \"\u003ctemplate_content_string\u003e\"\n      },\n      \"_secure_token\" : \"secureToken\",\n      \"invocation_timeout\" : 7\n    }\n  })}",
                      "name": "MyBehavior",
                      "rde_interface_id": "${vcd_rde_interface.my_interface.id}"
                    }
                vcd_rde_type.my_rde_type: |-
                    {
                      "depends_on": [
                        "${vcd_rde_interface_behavior.my_interface_behavior}"
                      ],
                      "interface_ids": [
                        "${data.vcd_rde_interface.my_interface.id}"
                      ],
                      "name": "My VMware RDE Type",
                      "nss": "vcd",
                      "schema": "${file(\"${path.module}/schemas/my-type-schema.json\")}",
                      "vendor": "vmware",
                      "version": "4.5.6"
                    }
            - name: my_rde_type_behavior
              manifest: |-
                {
                  "rde_interface_behavior_id": "${data.vcd_rde_interface_behavior.my_interface_behavior.id}",
                  "rde_type_id": "${data.vcd_rde_type.my_rde_type.id}"
                }
              references:
                rde_interface_behavior_id: data.vcd_rde_interface_behavior.my_interface_behavior.id
                rde_type_id: data.vcd_rde_type.my_rde_type.id
        argumentDocs:
            always_update_secure_execution_properties: |-
                - (Optional; v3.14) Useful to update execution properties marked with _secure_ and _internal_
                as these are not retrievable from VCD, so they are not saved in state. Setting this to true will make the provider
                to ask for updates whenever there is a secure property in the execution of the Behavior
            description: '- (Optional) The description of the RDE Type Behavior.'
            execution: |-
                - (Optional) A map that specifies the Behavior execution mechanism, this is just a simplification of execution_json that
                can make the configuration more readable for simpler Behaviors. One of execution_json or execution must be set.
            execution_json: |-
                - (Optional; v3.14) A string representing a valid JSON that specifies the Behavior execution mechanism.
                You can find more information about the different execution types, like WebHook, noop, Activity, MQTT, VRO, AWSLambdaFaaS
                and others in the Extensibility SDK documentation.
                One of execution_json or execution must be set.
            name: '- Name of the overridden Behavior'
            rde_interface_behavior_id: '- (Required) The ID of the RDE Interface Behavior to override'
            rde_type_id: '- (Required) The ID of the RDE Type that owns the Behavior'
            ref: '- The Behavior invocation reference to be used for polymorphic behavior invocations'
        importStatements: []
    vcd_rde_type_behavior_acl:
        subCategory: ""
        description: Provides the capability of managing RDE Type Behavior Access Levels in VMware Cloud Director.
        name: vcd_rde_type_behavior_acl
        title: vcd_rde_type_behavior_acl
        examples:
            - name: acl1
              manifest: |-
                {
                  "access_level_ids": [
                    "urn:vcloud:accessLevel:ReadOnly"
                  ],
                  "behavior_id": "${vcd_rde_type_behavior.behavior_override.id}",
                  "rde_type_id": "${vcd_rde_type.type.id}"
                }
              references:
                behavior_id: vcd_rde_type_behavior.behavior_override.id
                rde_type_id: vcd_rde_type.type.id
              dependencies:
                vcd_rde_interface.interface: |-
                    {
                      "name": "MyInterface",
                      "nss": "nss",
                      "vendor": "vendor",
                      "version": "1.0.0"
                    }
                vcd_rde_interface_behavior.behavior1: |-
                    {
                      "description": "My Behavior Contract goes here",
                      "execution": {
                        "id": "MyActivity1",
                        "type": "noop"
                      },
                      "name": "MyInterfaceBehavior1",
                      "rde_interface_id": "${vcd_rde_interface.interface.id}"
                    }
                vcd_rde_interface_behavior.behavior2: |-
                    {
                      "description": "My Behavior Contract goes here",
                      "execution": {
                        "id": "MyActivity2",
                        "type": "noop"
                      },
                      "name": "MyInterfaceBehavior2",
                      "rde_interface_id": "${vcd_rde_interface.interface.id}"
                    }
                vcd_rde_type.type: |-
                    {
                      "depends_on": [
                        "${vcd_rde_interface_behavior.behavior1}",
                        "${vcd_rde_interface_behavior.behavior2}"
                      ],
                      "description": "Type Description",
                      "interface_ids": [
                        "${vcd_rde_interface.interface.id}"
                      ],
                      "name": "MyType",
                      "nss": "nss",
                      "schema": "${file(\"/home/foo/my_rde_type.json\")}",
                      "vendor": "vendor",
                      "version": "1.0.0"
                    }
                vcd_rde_type_behavior.behavior_override: |-
                    {
                      "description": "MyTypeBehaviorOverride",
                      "execution": {
                        "id": "MyActivityOverride",
                        "type": "noop"
                      },
                      "rde_interface_behavior_id": "${vcd_rde_interface_behavior.behavior1.id}",
                      "rde_type_id": "${vcd_rde_type.type.id}"
                    }
            - name: acl2
              manifest: |-
                {
                  "access_level_ids": [
                    "urn:vcloud:accessLevel:FullControl"
                  ],
                  "behavior_id": "${vcd_rde_interface_behavior.behavior2.id}",
                  "rde_type_id": "${vcd_rde_type.type.id}"
                }
              references:
                behavior_id: vcd_rde_interface_behavior.behavior2.id
                rde_type_id: vcd_rde_type.type.id
              dependencies:
                vcd_rde_interface.interface: |-
                    {
                      "name": "MyInterface",
                      "nss": "nss",
                      "vendor": "vendor",
                      "version": "1.0.0"
                    }
                vcd_rde_interface_behavior.behavior1: |-
                    {
                      "description": "My Behavior Contract goes here",
                      "execution": {
                        "id": "MyActivity1",
                        "type": "noop"
                      },
                      "name": "MyInterfaceBehavior1",
                      "rde_interface_id": "${vcd_rde_interface.interface.id}"
                    }
                vcd_rde_interface_behavior.behavior2: |-
                    {
                      "description": "My Behavior Contract goes here",
                      "execution": {
                        "id": "MyActivity2",
                        "type": "noop"
                      },
                      "name": "MyInterfaceBehavior2",
                      "rde_interface_id": "${vcd_rde_interface.interface.id}"
                    }
                vcd_rde_type.type: |-
                    {
                      "depends_on": [
                        "${vcd_rde_interface_behavior.behavior1}",
                        "${vcd_rde_interface_behavior.behavior2}"
                      ],
                      "description": "Type Description",
                      "interface_ids": [
                        "${vcd_rde_interface.interface.id}"
                      ],
                      "name": "MyType",
                      "nss": "nss",
                      "schema": "${file(\"/home/foo/my_rde_type.json\")}",
                      "vendor": "vendor",
                      "version": "1.0.0"
                    }
                vcd_rde_type_behavior.behavior_override: |-
                    {
                      "description": "MyTypeBehaviorOverride",
                      "execution": {
                        "id": "MyActivityOverride",
                        "type": "noop"
                      },
                      "rde_interface_behavior_id": "${vcd_rde_interface_behavior.behavior1.id}",
                      "rde_type_id": "${vcd_rde_type.type.id}"
                    }
            - name: my_acl
              manifest: |-
                {
                  "behavior_id": "${data.vcd_rde_interface_behavior.my_interface_behavior.id}",
                  "rde_type_id": "${data.vcd_rde_type.my_rde_type.id}"
                }
              references:
                behavior_id: data.vcd_rde_interface_behavior.my_interface_behavior.id
                rde_type_id: data.vcd_rde_type.my_rde_type.id
        argumentDocs:
            access_level_ids: |-
                - (Required) Set of Access Level IDs to associate to the Behavior defined in behavior_id argument.
                Take into account that "urn:vcloud:accessLevel:FullControl" implicitly contains "urn:vcloud:accessLevel:ReadOnly".
                To avoid undesired updates during Terraform plans, avoid setting redundant access levels.
            behavior_id: |-
                - (Required) The ID of either a RDE Type Behavior
                or a RDE Interface Behavior
            rde_type_id: '- (Required) The ID of the RDE Type'
        importStatements: []
    vcd_rights_bundle:
        subCategory: ""
        description: Provides a VMware Cloud Director rights bundle. This can be used to create, modify, and delete rights bundles.
        name: vcd_rights_bundle
        title: vcd_rights_bundle
        examples:
            - name: new-rights-bundle
              manifest: |-
                {
                  "description": "new rights bundle from CLI",
                  "name": "new-rights-bundle",
                  "publish_to_all_tenants": false,
                  "rights": [
                    "Catalog: Add vApp from My Cloud",
                    "Catalog: Edit Properties",
                    "Catalog: View Private and Shared Catalogs",
                    "Organization vDC Compute Policy: View",
                    "vApp Template / Media: Edit",
                    "vApp Template / Media: View"
                  ],
                  "tenants": [
                    "org1",
                    "org2"
                  ]
                }
            - name: default-set
              manifest: |-
                {
                  "name": "Default Rights Bundle"
                }
        argumentDocs:
            bundle_key: '- Key used for internationalization'
            description: '- (Required) A description of the rights bundle'
            name: '- (Required) The name of the rights bundle.'
            publish_to_all_tenants: '- (Required) When true, publishes the rights bundle to all tenants'
            read_only: '- Whether this rights bundle is read-only'
            rights: '- (Optional) Set of rights assigned to this role'
            tenants: '- (Optional) Set of tenants to which this rights bundle gets published. Ignored if publish_to_all_tenants is true.'
        importStatements: []
    vcd_role:
        subCategory: ""
        description: Provides a VMware Cloud Director role. This can be used to create, modify, and delete roles.
        name: vcd_role
        title: vcd_role
        examples:
            - name: new-role
              manifest: |-
                {
                  "description": "new role from CLI",
                  "name": "new-role",
                  "org": "my-org",
                  "rights": [
                    "Catalog: Add vApp from My Cloud",
                    "Catalog: Edit Properties",
                    "Catalog: View Private and Shared Catalogs",
                    "Organization vDC Compute Policy: View",
                    "vApp Template / Media: Edit",
                    "vApp Template / Media: View"
                  ]
                }
            - name: catalog-author
              manifest: |-
                {
                  "name": "Catalog Author",
                  "org": "my-org"
                }
        argumentDocs:
            bundle_key: '- Key used for internationalization'
            description: '- (Required) A description of the role'
            name: '- (Required) The name of the role.'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            read_only: '- Whether this role is read-only'
            rights: '- (Optional) Set of rights assigned to this role'
        importStatements: []
    vcd_security_tag:
        subCategory: ""
        description: Provides a VMware Cloud Director Security Tag resource. This can be used to assign security tag to VMs.
        name: vcd_security_tag
        title: security_tag
        examples:
            - name: my_tag
              manifest: |-
                {
                  "name": "test-tag",
                  "vm_ids": [
                    "${vcd_vm.my-vm-one.id}",
                    "${vcd_vm.my-vm-two.id}"
                  ]
                }
        argumentDocs:
            name: '- (Required) The name of the security tag.'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            vm_ids: '- (Required) List of VM IDs that the security tag is going to be applied to.'
        importStatements: []
    vcd_service_account:
        subCategory: ""
        description: Provides a resource to manage Service Accounts. Service Accounts can have defined roles and act just like a VCD user. Service Accounts, when activated, provide one-time use access tokens for authentication to the VCD API, during which a new access token is generated.
        name: vcd_service_account
        title: vcd_service_account
        examples:
            - name: example_service
              manifest: |-
                {
                  "active": true,
                  "file_name": "example_service.json",
                  "name": "example",
                  "org": "my-org",
                  "role": "${data.vcd_role.vapp_author.id}",
                  "software_id": "12345678-1234-1234-1234-1234567890ab",
                  "software_version": "1.0.0",
                  "uri": "example.com"
                }
              references:
                role: data.vcd_role.vapp_author.id
        argumentDocs:
            active: |-
                - (Required) Status of the Service Account. Can be set to false and back to true if
                the access token was lost to get a new one.
            allow_token_file: |-
                - (Optional) If set to false, will output a warning about the service account file
                containing sensitive information.
            file_name: |-
                - (Optional) Required only when active is set to true. Contains the access token
                that can be used for authenticating to VCD.
            name: '- (Required) A unique name for the Service Account in an organisation.'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            role: '- (Required) ID of a Role.'
            software_id: '- (Required) UUID of the Service Account.'
            software_version: '- (Optional) Version of the service using the Service Account'
            uri: '- (Optional) URI of the service using the Service Account'
        importStatements: []
    vcd_solution_add_on:
        subCategory: ""
        description: 'Provides a resource to manage Solution Add-Ons in Cloud Director. A Solution Add-On is the representation of a solution that is custom built for Cloud Director in the Cloud Director extensibility ecosystem. A Solution Add-On can encapsulate UI and API Cloud Director extensions together with their backend services and lifecycle management. Solution Add-Ons are distributed as .iso files. A Solution Add-on can contain numerous elements: UI plugins, vApps, users, roles, runtime defined entities, and more.'
        name: vcd_solution_add_on
        title: vcd_solution_add_on
        examples:
            - name: dse14
              manifest: |-
                {
                  "add_on_path": "/Users/demo/Downloads/vmware-vcd-ds-1.4.0-23376809.iso",
                  "auto_trust_certificate": true,
                  "catalog_item_id": "${data.vcd_catalog_media.dse14.catalog_item_id}"
                }
              references:
                catalog_item_id: data.vcd_catalog_media.dse14.catalog_item_id
              dependencies:
                vcd_catalog_media.dse14: |-
                    {
                      "catalog_id": "${tolist(data.vcd_solution_landing_zone.slz.catalog)[0].id}",
                      "description": "new os versions",
                      "media_path": "/Users/demo/Downloads/vmware-vcd-ds-1.4.0-23376809.iso",
                      "name": "${basename(\"/Users/demo/Downloads/vmware-vcd-ds-1.4.0-23376809.iso\")}",
                      "org": "solution_org",
                      "upload_any_file": false,
                      "upload_piece_size": 10
                    }
            - name: dse14
              manifest: |-
                {
                  "add_on_path": "/Users/demo/Downloads/vmware-vcd-ds-1.4.0-23376809.iso",
                  "auto_trust_certificate": true,
                  "catalog_item_id": "${data.vcd_catalog_media.dse14.catalog_item_id}",
                  "org": "solution_org"
                }
              references:
                catalog_item_id: data.vcd_catalog_media.dse14.catalog_item_id
        argumentDocs:
            add_on_path: |-
                - (Required) Local filesystem path of Solution Add-On. The Add-On image is required
                locally as some of the metadata must be extracted for creating the Solution Add-On entry in Cloud
                Director.
            auto_trust_certificate: |-
                - (Optional) Plugin can automatically trust the certificate of Solution
                Add-On. This is required for Solution Add-Ons to work and one will have to do it manually before
                using the Solution Add-On if not enabled here.
            catalog_item_id: |-
                - (Required) The catalog item ID of Solution Add-On. It can be uploaded using
                vcd_catalog_media
            name: |-
                - reports the name of Solution Add-On as defined in the system. This name can be also used
                in data source
                vcd_solution_add_on
            state: |-
                - reports the state of parent Runtime Defined
                Entity
        importStatements: []
    vcd_solution_add_on_instance:
        subCategory: ""
        description: Provides a resource to manage Solution Add-On Instances in Cloud Director. A Solution Add-On Instance is created from an existing Solution Add-On by supplying configuration values of that particular instance.
        name: vcd_solution_add_on_instance
        title: vcd_solution_add_on_instance
        examples:
            - name: dse14
              manifest: |-
                {
                  "accept_eula": true,
                  "add_on_id": "${vcd_solution_add_on.dse14.id}",
                  "delete_input": {
                    "force-delete": true
                  },
                  "input": {
                    "delete-previous-uiplugin-versions": true
                  },
                  "name": "MyDseInstance",
                  "validate_only_required_inputs": true
                }
              references:
                add_on_id: vcd_solution_add_on.dse14.id
              dependencies:
                vcd_solution_add_on.dse14: |-
                    {
                      "addon_path": "vmware-vcd-ds-1.4.0-23376809.iso",
                      "catalog_item_id": "${data.vcd_catalog_media.dse14.catalog_item_id}",
                      "depends_on": [
                        "${vcd_solution_landing_zone.slz}"
                      ],
                      "trust_certificate": true
                    }
        argumentDocs:
            accept_eula: |-
                - (Required) Solution Add-On Instance cannot be create if EULA is not accepted.
                Supplying a false value will print EULA.
            add_on_id: |-
                - (Required) Existing Solution Add-On ID
                vcd_solution_add_on
            delete_input: |-
                - (Required) Just like input field for creation, it is a map of keys and values
                as required for removal of a particular Solution Add-On. It will require all values that are
                specified in a particular Add-On schema unless validate_only_required_inputs=true is set. Missing
                a value will print an error message with all field descriptions and missing value. Update is a no-op
                operation
            input: |-
                - (Required) A map of keys and values as required for a particular Solution Add-On
                Instance. It will require all values that are specified in a particular Add-On schema unless
                validate_only_required_inputs=true is set. Missing a value will print an error message with all
                field descriptions and missing value.
            name: '- (Required) Name of Solution Add-On Instance'
            rde_state: |-
                - reports the state of parent Runtime Defined
                Entity
            validate_only_required_inputs: |-
                - (Optional) By default (false) will check that all fields are
                defined in input and delete_input fields. It will only validate fields that are marked as
                required when set to true. Update is a noop that will affect further operation.
        importStatements: []
    vcd_solution_add_on_instance_publish:
        subCategory: ""
        description: Provides a resource to manage publishing configuration of Solution Add-On Instances in Cloud Director.
        name: vcd_solution_add_on_instance_publish
        title: vcd_solution_add_on_instance_publish
        examples:
            - name: public
              manifest: |-
                {
                  "add_on_instance_id": "${vcd_solution_add_on_instance.dse14.id}",
                  "org_ids": [
                    "${data.vcd_org.recipient.id}"
                  ],
                  "publish_to_all_tenants": false
                }
              references:
                add_on_instance_id: vcd_solution_add_on_instance.dse14.id
              dependencies:
                vcd_solution_add_on.dse14: |-
                    {
                      "addon_path": "vmware-vcd-ds-1.4.0-23376809.iso",
                      "catalog_item_id": "${data.vcd_catalog_media.dse14.catalog_item_id}",
                      "trust_certificate": true
                    }
                vcd_solution_add_on_instance.dse14: |-
                    {
                      "accept_eula": true,
                      "add_on_id": "${vcd_solution_add_on.dse14.id}",
                      "input": {
                        "input-delete-previous-uiplugin-versions": false
                      },
                      "name": "MyDseInstanceName"
                    }
        argumentDocs:
            add_on_instance_id: '- (Required) Solution Add-On instance ID'
            org_ids: '- (Optional) Recipient Organization IDs'
            publish_to_all_tenants: '- (Optional) Set to true to publish to everyone'
        importStatements: []
    vcd_solution_landing_zone:
        subCategory: ""
        description: Provides a resource to configure VCD Solution Add-on Landing Zone
        name: vcd_solution_landing_zone
        title: vcd_solution_landing_zone
        examples:
            - name: slz
              manifest: |-
                {
                  "catalog": [
                    {
                      "id": "${data.vcd_catalog.nsxt.id}"
                    }
                  ],
                  "org": "datacloud",
                  "vdc": [
                    {
                      "compute_policy": [
                        {
                          "id": "${data.vcd_org_vdc.vdc1.default_compute_policy_id}",
                          "is_default": true
                        }
                      ],
                      "id": "${data.vcd_org_vdc.vdc1.id}",
                      "is_default": true,
                      "org_vdc_network": [
                        {
                          "id": "${data.vcd_network_routed_v2.r1.id}",
                          "is_default": true
                        }
                      ],
                      "storage_policy": [
                        {
                          "id": "${data.vcd_storage_profile.sp.id}",
                          "is_default": true
                        }
                      ]
                    }
                  ]
                }
              references:
                catalog.id: data.vcd_catalog.nsxt.id
                vdc.compute_policy.id: data.vcd_org_vdc.vdc1.default_compute_policy_id
                vdc.id: data.vcd_org_vdc.vdc1.id
                vdc.org_vdc_network.id: data.vcd_network_routed_v2.r1.id
                vdc.storage_policy.id: data.vcd_storage_profile.sp.id
        argumentDocs:
            catalog: |-
                - (Required) This catalog stores all executable .ISO files for solution add-ons. There
                can be a single catalog element and the required field is id.
            compute_policy: |-
                - (Required) At least Compute Policy is required. See vdc child
                block description for possible values.
            id: '- (Required) Destination VDC ID for Solution Add-ons'
            is_default: |-
                - (Optional) Defines which of the child entities is default (only one default is
                possible)
            org: '- (Required) Destination Organization name for Solution Add-ons'
            org_vdc_network: |-
                - (Required) At least one Org VDC Network is required. See vdc
                child block description for possible values.
            state: |-
                - reports the state of parent Runtime Defined
                Entity
            storage_policy: |-
                - (Required) At least Storage Policy is required. See vdc child
                block description for possible values.
            vdc: '- (Required)  A single vdc block that defines landing VDC configuration'
        importStatements: []
    vcd_subscribed_catalog:
        subCategory: ""
        description: Provides a VMware Cloud Director subscribed catalog resource. This can be used to create, update, and delete a subscribed catalog.
        name: vcd_subscribed_catalog
        title: vcd_catalog
        examples:
            - name: subscriber
              manifest: |-
                {
                  "delete_force": true,
                  "delete_recursive": true,
                  "make_local_copy": true,
                  "name": "subscriber",
                  "org": "my-org",
                  "subscription_password": "${var.subscription_password}",
                  "subscription_url": "${var.subscription_url}"
                }
              references:
                subscription_password: var.subscription_password
                subscription_url: var.subscription_url
            - name: subscriber
              manifest: |-
                {
                  "delete_force": true,
                  "delete_recursive": true,
                  "make_local_copy": false,
                  "name": "subscriber",
                  "org": "my-org",
                  "subscription_password": "${var.subscription_password}",
                  "subscription_url": "${var.subscription_url}",
                  "sync_all": true,
                  "sync_on_refresh": true
                }
              references:
                subscription_password: var.subscription_password
                subscription_url: var.subscription_url
            - name: my-catalog
              manifest: |-
                {
                  "delete_force": true,
                  "delete_recursive": true,
                  "name": "my-catalog",
                  "org": "my-org",
                  "subscription_url": "${var.publish_subscription_url}"
                }
              references:
                subscription_url: var.publish_subscription_url
        argumentDocs:
            cancel_failed_tasks: '- (Optional) When true, the subscribed catalog will attempt canceling failed tasks.'
            catalog_version: '- Version number from this catalog. This is inherited from the publishing catalog and updated on sync.'
            created: '- Date and time of catalog creation. This is the creation date of the subscription, not the original published catalog.'
            delete_force: '- (Optional) When destroying use delete_force=true with delete_recursive=true to remove a catalog and any objects it contains, regardless of their state.'
            delete_recursive: '- (Optional) When destroying use delete_recursive=true to remove the catalog and any objects it contains that are in a state that normally allows removal.'
            description: '- Description of catalog. This is inherited from the publishing catalog and updated on sync.'
            failed_tasks: '- List of synchronization tasks that are have failed. They can refer to the catalog or any of its catalog items.'
            href: '- the catalog''s Hyper reference.'
            is_local: '- (v3.8.1+) Indicates if this catalog was created in the current organization.'
            is_published: '- Indicates if this catalog is available for subscription. (Always false)'
            is_shared: '- Indicates if the catalog is shared.'
            make_local_copy: |-
                - (Optional) If true, subscription to a catalog creates a local copy of all items. Defaults to false, which does not create a local copy of catalog items unless a sync operation is performed.
                It can only be false if the user configured in the provider is the System administrator.
            media_item_list: List of media item names in this catalog, in alphabetical order.
            metadata: '- (Available until VCD 10.5) Optional metadata of the catalog. This is inherited from the publishing catalog and updated on sync.'
            name: '- (Required) Catalog name'
            number_of_media: '- Number of media items available in this catalog.'
            number_of_vapp_templates: '- Number of vApp templates available in this catalog.'
            org: '- (Optional) The name of organization to use, optional if defined at provider level.'
            owner_name: '- Owner of the catalog.'
            publish_subscription_type: '- Shows if the catalog is published, if it is a subscription from another one or none of those. (Always SUBSCRIBED)'
            running_tasks: '- List of running synchronization tasks that are still running. They can refer to the catalog or any of its catalog items.'
            storage_profile_id: '- (Optional) Allows to set specific storage profile to be used for catalog.'
            store_tasks: '- (Optional) if true, saves the list of tasks to a file for later update.'
            subscription_password: |-
                - (Optional) An optional password to access the catalog. Only ASCII characters are allowed in a valid password.
                The password is only required when set by the publishing catalog. Passing in six asterisks '******' indicates to keep current password.
                Passing in an empty string indicates to remove password.
            subscription_url: '- (Required) The URL to subscribe to the external catalog.'
            sync_all: '- (Optional) If true, synchronise this catalog and all items.'
            sync_all_media_items: '- (Optional) If true, synchronise all media items. Not to be used when sync_all is set.'
            sync_all_vapp_templates: '- (Optional) If true, synchronise all vApp templates. Not to be used when sync_all is set.'
            sync_catalog: '- (Optional) If true, synchronise this catalog. Not to be used when sync_all is set. This operation fetches the list of items. If make_local_copy is set, it also synchronises all the items.'
            sync_media_items: '- (Optional) Synchronise a list of media items. Not to be used when sync_all or sync_all_media_items are set.'
            sync_on_refresh: '- (Optional) Boolean value that shows if sync should be performed on every refresh.'
            sync_vapp_templates: '- (Optional) Synchronise a list of vApp templates. Not to be used when sync_all or sync_all_vapp_templates are set.'
            tasks_file_name: Where the running tasks IDs have been stored. Only if store_tasks is set.
            vapp_template_list: List of vApp template names in this catalog, in alphabetical order.
        importStatements: []
    vcd_ui_plugin:
        subCategory: ""
        description: Provides a VMware Cloud Director UI Plugin resource. This can be used to manage UI Plugins.
        name: vcd_ui_plugin
        title: vcd_ui_plugin
        examples:
            - name: my_plugin
              manifest: |-
                {
                  "enabled": true,
                  "plugin_path": "./container-ui-plugin-4.0.zip",
                  "tenant_ids": "${data.vcd_org.my_plugin_orgs[*].id}"
                }
            - name: my_plugin
              manifest: |-
                {
                  "enabled": true,
                  "plugin_path": "./container-ui-plugin-4.0.zip",
                  "tenant_ids": "${data.vcd_resource_list.all_orgs.list}"
                }
              references:
                tenant_ids: data.vcd_resource_list.all_orgs.list
            - name: my_existing_plugin
              manifest: |-
                {
                  "enabled": true
                }
        argumentDocs:
            description: '- The description of the UI Plugin'
            enabled: '- (Required) Whether the UI Plugin will be enabled (true) or not (false)'
            license: '- The license of the UI Plugin'
            link: '- The website or custom URL of the UI Plugin'
            name: '- The name of the UI Plugin'
            plugin_path: '- (Required) Path to a .zip file that contains the bundled UI Plugin'
            provider_scoped: |-
                - (Optional) Can only be set on updates, the initial value is taken from the JSON manifest.
                Changes the scope of the UI Plugin for System providers. It should be set to true when the UI Plugin is published to the System organization, to prevent
                unwanted updates-in-place.
            status: '- The status of the UI Plugin (for example, ready, unavailable, etc)'
            tenant_ids: |-
                - (Optional) The identifiers of the Organizations
                that will be able to use the UI Plugin if enabled. If not set, it doesn't publish to any Organization.
            tenant_scoped: |-
                - (Optional) Can only be set on updates, the initial value is taken from the JSON manifest.
                Changes the scope of the UI Plugin for Organization users. It should be set to true when the UI Plugin is published to any organization, to prevent
                unwanted updates-in-place.
            vendor: '- The vendor of the UI Plugin'
            version: '- The version of the UI Plugin'
        importStatements: []
    vcd_vapp:
        subCategory: ""
        description: Provides a VMware Cloud Director vApp resource. This can be used to create, modify, and delete vApps.
        name: vcd_vapp
        title: vcd_vapp
        examples:
            - name: web
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "key": "CostAccount",
                      "value": "Marketing Department"
                    }
                  ],
                  "name": "web"
                }
              dependencies:
                vcd_network_direct.direct-network: |-
                    {
                      "external_network": "my-ext-net",
                      "name": "net"
                    }
                vcd_vapp_org_network.direct-network: |-
                    {
                      "org_network_name": "${vcd_network_direct.direct-network.name}",
                      "vapp_name": "${vcd_vapp.web.name}"
                    }
                vcd_vapp_vm.web1: |-
                    {
                      "cpus": 1,
                      "guest_properties": {
                        "vapp.property1": "value1",
                        "vapp.property2": "value2"
                      },
                      "lease": [
                        {
                          "runtime_lease_in_sec": "${60 * 60 * 24 * 30}",
                          "storage_lease_in_sec": "${60 * 60 * 24 * 7}"
                        }
                      ],
                      "memory": 2048,
                      "name": "web1",
                      "network": [
                        {
                          "ip_allocation_mode": "POOL",
                          "name": "${vcd_vapp_org_network.direct-network.org_network_name}",
                          "type": "org"
                        }
                      ],
                      "vapp_name": "${vcd_vapp.web.name}",
                      "vapp_template_id": "${data.vcd_catalog_vapp_template.photon-os.id}"
                    }
                vcd_vapp_vm.web2: |-
                    {
                      "cpus": 1,
                      "memory": 2048,
                      "name": "web2",
                      "network": [
                        {
                          "ip_allocation_mode": "POOL",
                          "name": "${vcd_vapp_org_network.direct-network.org_network_name}",
                          "type": "org"
                        }
                      ],
                      "vapp_name": "${vcd_vapp.web.name}",
                      "vapp_template_id": "${data.vcd_catalog_vapp_template.photon-os.id}"
                    }
            - name: web
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "key": "boss",
                      "value": "Why is this vApp empty?"
                    },
                    {
                      "key": "john",
                      "value": "I don't really know. Maybe somebody did forget to clean it up."
                    }
                  ],
                  "name": "web"
                }
            - name: example
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "is_system": true,
                      "key": "foo",
                      "type": "MetadataStringValue",
                      "user_access": "PRIVATE",
                      "value": "bar"
                    },
                    {
                      "is_system": false,
                      "key": "myBool",
                      "type": "MetadataBooleanValue",
                      "user_access": "READWRITE",
                      "value": "true"
                    }
                  ]
                }
            - name: tf-vapp
              manifest: |-
                {
                  "name": "my-vapp",
                  "org": "my-org",
                  "vdc": "my-vdc"
                }
        argumentDocs:
            description: (Optional; v3.3) An optional description for the vApp, up to 256 characters.
            guest_properties: '- (Optional; v2.5+) Key value map of vApp guest properties'
            href: '- (Computed) The vApp Hyper Reference.'
            inherited_metadata: |-
                - (Computed; v3.11+; VCD 10.5.1+) A map that contains read-only metadata that is automatically added by VCD (10.5.1+) and provides
                details on the origin of the vApp (e.g. vapp.origin.id, vapp.origin.name, vapp.origin.type).
            is_system: '- (Required) Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            key: '- (Required) Key of this metadata entry.'
            lease: |-
                - (Optional v3.5+) the information about the vApp lease. It includes the fields below. When this section is
                included, both fields are mandatory. If lease values are higher than the ones allowed for the whole Org, the values
                are silently reduced to the highest value allowed.
            metadata: '- (Deprecated) Use metadata_entry instead. Key value map of metadata to assign to this vApp. Key and value can be any string. (Since v2.2+ metadata is added directly to vApp instead of first VM in vApp)'
            metadata_entry: '- (Optional; v3.8+) A set of metadata entries to assign. See Metadata section for details.'
            name: '- (Required) A unique name for the vApp'
            org: '- (Optional; v2.0+) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            power_on: '- (Optional) A boolean value stating if this vApp should be powered on. Default is false. Works only on update when vApp already has VMs.'
            runtime_lease_in_sec: '- How long any of the VMs in the vApp can run before the vApp is automatically powered off or suspended. 0 means never expires (or maximum allowed by Org). Regular values accepted from 3600+.'
            status: '- (Computed; v2.5+) The vApp status as a numeric code.'
            status_text: '- (Computed; v2.5+) The vApp status as text.'
            storage_lease_in_sec: '- How long the vApp is available before being automatically deleted or marked as expired. 0 means never expires (or maximum allowed by Org). Regular values accepted from 3600+.'
            type: '- (Required) Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.'
            user_access: '- (Required) User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            value: '- (Required) Value of this metadata entry.'
            vapp_network_names: '- (v3.13.0+) A list of vApp network names included in this vApp'
            vapp_org_network_names: '- (v3.13.0+) A list of vApp Org network names included in this vApp'
            vdc: '- (Optional; v2.0+) The name of VDC to use, optional if defined at provider level'
            vm_names: '- (v3.13.0+) A list of VM names included in this vApp'
        importStatements: []
    vcd_vapp_access_control:
        subCategory: ""
        description: Provides a VMware Cloud Director Access Control structure for a vApp.
        name: vcd_vapp_access_control
        title: vcd_vapp_access_control
        examples:
            - name: AC-not-shared
              manifest: |-
                {
                  "shared_with_everyone": false,
                  "vapp_id": "${data.vcd_vapp.Vapp-AC-0.id}"
                }
              references:
                vapp_id: data.vcd_vapp.Vapp-AC-0.id
            - name: AC-global
              manifest: |-
                {
                  "everyone_access_level": "Change",
                  "shared_with_everyone": true,
                  "vapp_id": "${data.vcd_vapp.Vapp-AC-1.id}"
                }
              references:
                vapp_id: data.vcd_vapp.Vapp-AC-1.id
            - name: AC-users
              manifest: |-
                {
                  "shared_with": [
                    {
                      "access_level": "FullControl",
                      "user_id": "${data.vcd_org_user.ac-admin1.id}"
                    },
                    {
                      "access_level": "Change",
                      "user_id": "${data.vcd_org_user.ac-vapp-creator2.id}"
                    }
                  ],
                  "shared_with_everyone": false,
                  "vapp_id": "${data.vcd_vapp.Vapp-AC-2.id}"
                }
              references:
                shared_with.user_id: data.vcd_org_user.ac-vapp-creator2.id
                vapp_id: data.vcd_vapp.Vapp-AC-2.id
            - name: my-ac
              manifest: |-
                {
                  "org": "my-org",
                  "vapp_id": "my-vapp",
                  "vdc": "my-vdc"
                }
        argumentDocs:
            everyone_access_level: |-
                - (Optional) Access level when the vApp is shared with everyone (one of ReadOnly, Change,
                FullControl). Required if shared_with_everyone is true.
            org: '- (Optional) The name of organization to which the vApp belongs. Optional if defined at provider level.'
            shared_with: |-
                - (Optional) one or more blocks defining a subject to which we are sharing.
                See shared_with below for detail. It cannot be used if shared_with_everyone is set.
            shared_with.access_level: '- (Required) The access level for the user or group to which we are sharing. (One of ReadOnly, Change, FullControl)'
            shared_with.group_id: '- (Optional) The ID of a group with which we are sharing. Required if user_id is not set.'
            shared_with.subject_name: '- (Computed) the name of the subject (group or user) with which we are sharing.'
            shared_with.user_id: '- (Optional) The ID of a user with which we are sharing. Required if group_id is not set.'
            shared_with_everyone: |-
                - (Required) Whether the vApp is shared with everyone. If any shared_with blocks are included,
                this property must be set to false.
            vapp_id: '- (Required) A unique identifier for the vApp.'
            vdc: '- (Optional) The name of organization to which the vApp belongs. Optional if defined at provider level.'
        importStatements: []
    vcd_vapp_firewall_rules:
        subCategory: ""
        description: Provides a VMware Cloud Director vApp Firewall resource. This can be used to create, modify, and delete firewall settings and rules.
        name: vcd_vapp_firewall_rules
        title: vcd_vapp_firewall_rules
        examples:
            - name: vapp-fw
              manifest: |-
                {
                  "default_action": "drop",
                  "network_id": "${vcd_vapp_network.vapp-net.id}",
                  "rule": [
                    {
                      "destination_ip": "any",
                      "destination_port": "21",
                      "name": "drop-ftp-out",
                      "policy": "drop",
                      "protocol": "tcp",
                      "source_ip": "10.10.0.0/24",
                      "source_port": "any"
                    },
                    {
                      "destination_ip": "any",
                      "destination_port": "any",
                      "name": "allow-outbound",
                      "policy": "allow",
                      "protocol": "any",
                      "source_ip": "10.10.0.0/24",
                      "source_port": "any"
                    }
                  ],
                  "vapp_id": "${vcd_vapp.web.id}"
                }
              references:
                network_id: vcd_vapp_network.vapp-net.id
                vapp_id: vcd_vapp.web.id
              dependencies:
                vcd_vapp.web: |-
                    {
                      "name": "web"
                    }
                vcd_vapp_network.vapp-net: |-
                    {
                      "dns1": "192.168.2.1",
                      "gateway": "192.168.2.1",
                      "name": "my-vapp-net",
                      "netmask": "255.255.255.0",
                      "org_network_name": "my-vdc-int-net",
                      "static_ip_pool": [
                        {
                          "end_address": "192.168.2.100",
                          "start_address": "192.168.2.51"
                        }
                      ],
                      "vapp_name": "${vcd_vapp.web.name}"
                    }
        argumentDocs:
            default_action: '- (Required) Either ''allow'' or ''drop''. Specifies what to do should none of the rules match.'
            destination_ip: '- (Optional) The destination IP to match. Either an IP address, IP range or any.'
            destination_port: '- (Optional) The destination port to match. Either a port number or any.'
            destination_vm_id: '- (Optional) Destination VM identifier.'
            destination_vm_ip_type: '- (Optional) The value can be one of: assigned - assigned internal IP will be automatically chosen, NAT - NATed external IP will be automatically chosen.'
            destination_vm_nic_id: '- (Optional) VM NIC ID to which this rule applies.'
            enable_logging: '- (Optional) true value will enable rule logging. Default is false.'
            enabled: '- (Optional) Enable or disable firewall. Default is true.'
            log_default_action: '- (Optional) Flag to enable logging for default action. Default value is false.'
            name: '- (Optional) Name of the firewall rule.'
            network_id: '- (Required) The identifier of vApp network.'
            org: '- The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations.'
            policy: '- (Optional) Specifies what to do when this rule is matched. Either allow or drop.'
            protocol: '- (Optional) The protocol to match. One of tcp, udp, icmp, any or tcp&udp. Default is any.'
            rule: '- (Optional) Configures a firewall rule; see Rules below for details.'
            source_ip: '- (Optional) The source IP to match. Either an IP address, IP range or any.'
            source_port: '- (Optional) The source port to match. Either a port number or any.'
            source_vm_id: '- (Optional) Source VM identifier.'
            source_vm_ip_type: '- (Optional) The value can be one of: assigned - assigned internal IP will be automatically chosen, NAT - NATed external IP will be automatically chosen.'
            source_vm_nic_id: '- (Optional) VM NIC ID to which this rule applies.'
            vapp_id: '- (Required) The identifier of vApp.'
            vdc: '- The name of VDC to use, optional if defined at provider level.'
        importStatements:
            - "$ terraform import vcd_vapp_firewall_rules.imported list@org-name.vdc-name.vapp-name\nvcd_vapp_firewall_rules.imported: Importing from ID \"list@org-name.vdc-name.vapp-name\"...\nRetrieving all vApp networks by name\nNo\tvApp ID                                                 ID                                      Name\t\n--\t-------                                                 --                                      ----\t\n1\turn:vcloud:vapp:77755b9c-5ec9-41f7-aceb-4cf158786482\t0027c6ae-7d59-457e-b33e-a89e97f0bdc1\tNet2\n2\turn:vcloud:vapp:77755b9c-5ec9-41f7-aceb-4cf158786482\t36986073-8051-4f6d-a1c6-bda648bdf6ba\tNet1      \t\t\n\nError: resource id must be specified in one of these formats:\n'org-name.vdc-name.vapp-name.network_name', 'org.vdc-name.vapp-id.network-id' or \n'list@org-name.vdc-name.vapp-name' to get a list of vapp networks with their IDs"
            - $ terraform import vcd_vapp_firewall_rules.imported org-name.vdc-name.urn:vcloud:vapp:77755b9c-5ec9-41f7-aceb-4cf158786482.0027c6ae-7d59-457e-b33e-a89e97f0bdc1
    vcd_vapp_nat_rules:
        subCategory: ""
        description: Provides a VMware Cloud Director vApp NAT resource. This can be used to create, modify, and delete NAT rules.
        name: vcd_vapp_nat_rules
        title: vcd_vapp_nat_rules
        examples:
            - name: vapp-nat
              manifest: |-
                {
                  "enable_ip_masquerade": false,
                  "nat_type": "portForwarding",
                  "network_id": "${vcd_vapp_network.vapp-net.id}",
                  "rule": [
                    {
                      "external_port": "22",
                      "forward_to_port": "-1",
                      "protocol": "TCP_UDP",
                      "vm_id": "${vcd_vapp_vm.vm1.id}",
                      "vm_nic_id": "0"
                    },
                    {
                      "external_port": "-1",
                      "forward_to_port": "80",
                      "protocol": "TCP",
                      "vm_id": "${vcd_vapp_vm.vm2.id}",
                      "vm_nic_id": "0"
                    }
                  ],
                  "vapp_id": "${vcd_vapp.web.id}"
                }
              references:
                network_id: vcd_vapp_network.vapp-net.id
                rule.vm_id: vcd_vapp_vm.vm2.id
                vapp_id: vcd_vapp.web.id
              dependencies:
                vcd_vapp.web: |-
                    {
                      "name": "web"
                    }
                vcd_vapp_firewall_rules.vapp_fw1: |-
                    {
                      "default_action": "drop",
                      "enabled": true,
                      "network_id": "${vcd_vapp_network.vapp-net.id}",
                      "vapp_id": "${vcd_vapp.web.id}"
                    }
                vcd_vapp_firewall_rules.vapp_fw2: |-
                    {
                      "default_action": "drop",
                      "enabled": true,
                      "network_id": "${vcd_vapp_network.vapp-org-net.id}",
                      "vapp_id": "${vcd_vapp.web.id}"
                    }
                vcd_vapp_network.vapp-net: |-
                    {
                      "dns1": "192.168.2.1",
                      "gateway": "192.168.2.1",
                      "name": "my-vapp-net",
                      "netmask": "255.255.255.0",
                      "org_network_name": "my-vdc-int-net",
                      "static_ip_pool": [
                        {
                          "end_address": "192.168.2.100",
                          "start_address": "192.168.2.51"
                        }
                      ],
                      "vapp_name": "${vcd_vapp.web.name}"
                    }
                vcd_vapp_org_network.vapp-org-net: |-
                    {
                      "is_fenced": true,
                      "org_network_name": "${vcd_network_routed.network-routed.name}",
                      "vapp_name": "${vcd_vapp.web.name}"
                    }
            - name: vapp-nat2
              manifest: |-
                {
                  "nat_type": "ipTranslation",
                  "network_id": "${vcd_vapp_network.vapp-org-net.id}",
                  "rule": [
                    {
                      "external_ip": "10.10.103.13",
                      "mapping_mode": "manual",
                      "vm_id": "${vcd_vapp_vm.vm1.id}",
                      "vm_nic_id": 0
                    },
                    {
                      "mapping_mode": "automatic",
                      "vm_id": "${vcd_vapp_vm.vm2.id}",
                      "vm_nic_id": 0
                    }
                  ],
                  "vapp_id": "${vcd_vapp.web.id}"
                }
              references:
                network_id: vcd_vapp_network.vapp-org-net.id
                rule.vm_id: vcd_vapp_vm.vm2.id
                vapp_id: vcd_vapp.web.id
              dependencies:
                vcd_vapp.web: |-
                    {
                      "name": "web"
                    }
                vcd_vapp_firewall_rules.vapp_fw1: |-
                    {
                      "default_action": "drop",
                      "enabled": true,
                      "network_id": "${vcd_vapp_network.vapp-net.id}",
                      "vapp_id": "${vcd_vapp.web.id}"
                    }
                vcd_vapp_firewall_rules.vapp_fw2: |-
                    {
                      "default_action": "drop",
                      "enabled": true,
                      "network_id": "${vcd_vapp_network.vapp-org-net.id}",
                      "vapp_id": "${vcd_vapp.web.id}"
                    }
                vcd_vapp_network.vapp-net: |-
                    {
                      "dns1": "192.168.2.1",
                      "gateway": "192.168.2.1",
                      "name": "my-vapp-net",
                      "netmask": "255.255.255.0",
                      "org_network_name": "my-vdc-int-net",
                      "static_ip_pool": [
                        {
                          "end_address": "192.168.2.100",
                          "start_address": "192.168.2.51"
                        }
                      ],
                      "vapp_name": "${vcd_vapp.web.name}"
                    }
                vcd_vapp_org_network.vapp-org-net: |-
                    {
                      "is_fenced": true,
                      "org_network_name": "${vcd_network_routed.network-routed.name}",
                      "vapp_name": "${vcd_vapp.web.name}"
                    }
        argumentDocs:
            enable_ip_masquerade: '- (Optional) When enabled translates a virtual machine''s private, internal IP address to a public IP address for outbound traffic. Default value is false.'
            enabled: '- (Optional) Enable or disable NAT. Default is true. To enable the NAT service, vcd_vapp_firewall_rules needs to be enabled as well.'
            external_ip: '- (Optional) External IP address to forward to or External IP address to map to VM.'
            external_port: '- (Optional) External port to forward. -1 value for any port.'
            forward_to_port: '- (Optional) Internal port to forward. -1 value for any port.'
            mapping_mode: '- (Optional) Mapping mode. One of: automatic, manual.'
            nat_type: '- (Required) "One of: ipTranslation (use IP translation), portForwarding (use port forwarding). For ipTranslation fields vm_id, vm_nic_id, mapping_mode are required and external_ip is optional. For portForwarding fields vm_id, vm_nic_id, protocol, external_port and forward_to_port are required.'
            network_id: '- (Required) The identifier of vApp network.'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations.'
            protocol: '- (Optional) Protocol to forward. One of: TCP (forward TCP packets), UDP (forward UDP packets), TCP_UDP (forward TCP and UDP packets).'
            rule: '- (Optional) Configures a NAT rule; see Rules below for details.'
            vapp_id: '- (Required) The identifier of vApp.'
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level.'
            vm_id: '- (Required) VM to which this rule applies.'
            vm_nic_id: '- (Required) VM NIC ID to which this rule applies.'
        importStatements:
            - "$ terraform import vcd_vapp_nat_rules.imported list@org-name.vdc-name.vapp-name\nvcd_vapp_nat_rules.imported: Importing from ID \"list@org-name.vdc-name.vapp-name\"...\nRetrieving all vApp networks by name\nNo\tvApp ID                                                 ID                                      Name\t\n--\t-------                                                 --                                      ----\t\n1\turn:vcloud:vapp:77755b9c-5ec9-41f7-aceb-4cf158786482\t0027c6ae-7d59-457e-b33e-a89e97f0bdc1\tNet2\n2\turn:vcloud:vapp:77755b9c-5ec9-41f7-aceb-4cf158786482\t36986073-8051-4f6d-a1c6-bda648bdf6ba\tNet1      \t\t\n\nError: resource id must be specified in one of these formats:\n'org-name.vdc-name.vapp-name.network_name', 'org.vdc-name.vapp-id.network-id' or \n'list@org-name.vdc-name.vapp-name' to get a list of vapp networks with their IDs"
            - $ terraform import vcd_vapp_nat_rules.imported org-name.vdc-name.urn:vcloud:vapp:77755b9c-5ec9-41f7-aceb-4cf158786482.0027c6ae-7d59-457e-b33e-a89e97f0bdc1
    vcd_vapp_network:
        subCategory: ""
        description: Allows to provision a vApp network and optionally connect it to an existing Org VDC network.
        name: vcd_vapp_network
        title: vcd_vapp_network
        examples:
            - name: vappNet
              manifest: |-
                {
                  "dhcp_pool": [
                    {
                      "end_address": "192.168.2.50",
                      "start_address": "192.168.2.2"
                    }
                  ],
                  "dns1": "192.168.2.1",
                  "dns2": "192.168.2.2",
                  "dns_suffix": "mybiz.biz",
                  "gateway": "192.168.2.1",
                  "guest_vlan_allowed": true,
                  "name": "my-net",
                  "org": "my-org",
                  "prefix_length": "24",
                  "static_ip_pool": [
                    {
                      "end_address": "192.168.2.100",
                      "start_address": "192.168.2.51"
                    }
                  ],
                  "vapp_name": "my-vapp",
                  "vdc": "my-vdc"
                }
            - name: vappNet_ipv6
              manifest: |-
                {
                  "dhcp_pool": [
                    {
                      "end_address": "fe80:0:0:0:0:0:0:aabb",
                      "start_address": "fe80:0:0:0:0:0:0:aaaa"
                    }
                  ],
                  "dns1": "2001:4860:4860:0:0:0:0:8888",
                  "dns2": "2001:4860:4860:0:0:0:0:8844",
                  "dns_suffix": "mybiz.biz",
                  "gateway": "fe80:0:0:0:0:0:0:aaaa",
                  "guest_vlan_allowed": true,
                  "name": "my-net-ipv6",
                  "org": "my-org",
                  "prefix_length": "24",
                  "static_ip_pool": [
                    {
                      "end_address": "fe80:0:0:0:0:0:0:aadd",
                      "start_address": "fe80:0:0:0:0:0:0:aacc"
                    }
                  ],
                  "vapp_name": "my-vapp",
                  "vdc": "my-vdc"
                }
        argumentDocs:
            default_lease_time: '- (Optional) The default DHCP lease time to use. Defaults to 3600.'
            description: '- (Optional; v2.7+, vCD 9.5+) Description of vApp network'
            dhcp_pool: '- (Optional) A range of IPs to issue to virtual machines that don''t have a static IP; see IP Pools below for details.'
            dns_suffix: '- (Optional) A FQDN for the virtual machines on this network.'
            dns1: '- (Optional) First DNS server to use.'
            dns2: '- (Optional) Second DNS server to use.'
            enabled: '- (Optional) Allows to enable or disable service. Default is true.'
            end_address: '- (Required) The final address in the IP Range.'
            gateway: '- (Required) The gateway for this network.'
            guest_vlan_allowed: '- (Optional) True if Network allows guest VLAN tagging.'
            max_lease_time: '- (Optional) The maximum DHCP lease time to use. Defaults to 7200.'
            name: '- (Required) A unique name for the network.'
            netmask: '- (Deprecated) Use prefix_length instead. The netmask for the new network.'
            org: |-
                - (Optional; v2.0+) The name of organization to use, optional if defined at provider level. Useful when
                connected as sysadmin working across different organisations.
            org_network_name: '- (Optional; v2.7+) An Org network name to which vApp network is connected. If not configured, then an isolated network is created.'
            prefix_length: '- (Optional) The subnet prefix length for the network.'
            reboot_vapp_on_removal: |-
                - (Optional; v3.9+) VCD 10.4.1+ API prohibits removal of vApp
                network from a powered on vApp. Set to true to power off the vApp during vApp network removal.
                If the vApp's original state was powered on, it will be powered back on after removing the
                network. (default false) Note. It only affects delete operation for the resource and will
                never power cycle vApp during update operations. Changing this value will cause plan change, but
                update will be a no-op operation.
            retain_ip_mac_enabled: '- (Optional; v2.7+) Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.'
            start_address: '- (Required) The first address in the IP Range.'
            static_ip_pool: '- (Optional) A range of IPs permitted to be used as static IPs for virtual machines; see IP Pools below for details.'
            vapp_name: '- (Required) The vApp this network belongs to.'
            vdc: '- (Optional; v2.0+) The name of VDC to use, optional if defined at provider level.'
        importStatements: []
    vcd_vapp_org_network:
        subCategory: ""
        description: Provides capability to attach an existing Org VDC Network to a vApp and toggle network features.
        name: vcd_vapp_org_network
        title: vcd_vapp_org_network
        examples:
            - name: vappOrgNet
              manifest: |-
                {
                  "org": "my-org",
                  "org_network_name": "my-org-network",
                  "vapp_name": "my-vapp",
                  "vdc": "my-vdc"
                }
        argumentDocs:
            is_fenced: (Optional) Fencing allows identical virtual machines in different vApp networks connect to organization VDC networks that are accessed in this vApp. Default is false.
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful when
                connected as sysadmin working across different organisations.
            org_network_name: '- (Optional; v2.7+) An Org network name to which vApp network is connected. If not configured, then an isolated network is created.'
            reboot_vapp_on_removal: |-
                - (Optional; v3.9+) VCD 10.4.1+ API prohibits removal of vApp
                network from a powered on vApp. Set to true to power off the vApp during vApp network removal.
                If the vApp's original state was powered on, it will be powered back on after removing the
                network. (default false) Note. It only affects delete operation for the resource and will
                never power cycle vApp during update operations. Changing this value will cause plan change, but
                update will be a no-op operation.
            retain_ip_mac_enabled: '- (Optional) Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Configurable when is_fenced is true.'
            vapp_name: '- (Required) The vApp this network belongs to.'
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level.'
        importStatements: []
    vcd_vapp_static_routing:
        subCategory: ""
        description: Provides a VMware Cloud Director vApp static routing resource. This can be used to create, modify, and delete static routing rules.
        name: vcd_vapp_static_routing
        title: vcd_vapp_static_routing
        examples:
            - name: vapp1-static-routing
              manifest: |-
                {
                  "enabled": true,
                  "network_id": "${vcd_vapp_network.vapp-net.id}",
                  "rule": [
                    {
                      "name": "rule1",
                      "network_cidr": "10.10.0.0/24",
                      "next_hop_ip": "192.168.2.2"
                    },
                    {
                      "name": "rule2",
                      "network_cidr": "10.10.1.0/24",
                      "next_hop_ip": "192.168.2.3"
                    }
                  ],
                  "vapp_id": "${vcd_vapp.web.id}"
                }
              references:
                network_id: vcd_vapp_network.vapp-net.id
                vapp_id: vcd_vapp.web.id
              dependencies:
                vcd_vapp.web: |-
                    {
                      "name": "web"
                    }
                vcd_vapp_network.vapp-net: |-
                    {
                      "dns1": "192.168.2.1",
                      "gateway": "192.168.2.1",
                      "name": "my-vapp-net",
                      "netmask": "255.255.255.0",
                      "org_network_name": "my-vdc-int-net",
                      "static_ip_pool": [
                        {
                          "end_address": "192.168.2.100",
                          "start_address": "192.168.2.51"
                        }
                      ],
                      "vapp_name": "${vcd_vapp.web.name}"
                    }
        argumentDocs:
            enabled: '- (Optional) Enable or disable static Routing. Default is true.'
            name: '- (Required) Name for the static route.'
            network_cidr: '- (Required) Network specification in CIDR.'
            network_id: '- (Required) The identifier of vApp network.'
            next_hop_ip: '- (Required) IP address of Next Hop router/gateway.'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations.'
            rule: '- (Optional) Configures a static routing rule; see Rules below for details.'
            vapp_id: '- (Required) The identifier of vApp.'
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level.'
        importStatements:
            - "$ terraform import vcd_vapp_static_routing.imported list@org-name.vdc-name.vapp-name\nvcd_vapp_static_routing.imported: Importing from ID \"list@org-name.vdc-name.vapp-name\"...\nRetrieving all vApp networks by name\nNo\tvApp ID                                                 ID                                      Name\t\n--\t-------                                                 --                                      ----\t\n1\turn:vcloud:vapp:77755b9c-5ec9-41f7-aceb-4cf158786482\t0027c6ae-7d59-457e-b33e-a89e97f0bdc1\tNet2\n2\turn:vcloud:vapp:77755b9c-5ec9-41f7-aceb-4cf158786482\t36986073-8051-4f6d-a1c6-bda648bdf6ba\tNet1      \t\t\n\nError: resource id must be specified in one of these formats:\n'org-name.vdc-name.vapp-name.network_name', 'org.vdc-name.vapp-id.network-id' or \n'list@org-name.vdc-name.vapp-name' to get a list of vapp networks with their IDs"
            - $ terraform import vcd_vapp_static_routing.imported org-name.vdc-name.urn:vcloud:vapp:77755b9c-5ec9-41f7-aceb-4cf158786482.0027c6ae-7d59-457e-b33e-a89e97f0bdc1
    vcd_vapp_vm:
        subCategory: ""
        description: Provides a VMware Cloud Director VM resource. This can be used to create, modify, and delete VMs within a vApp.
        name: vcd_vapp_vm
        title: vcd_vapp_vm
        examples:
            - name: web1
              manifest: |-
                {
                  "cpu_cores": 1,
                  "cpus": 2,
                  "guest_properties": {
                    "another.var.name": "var-value",
                    "guest.hostname": "my-host"
                  },
                  "memory": 1024,
                  "metadata_entry": [
                    {
                      "key": "role",
                      "value": "web"
                    },
                    {
                      "key": "env",
                      "value": "staging"
                    },
                    {
                      "key": "version",
                      "value": "v1"
                    },
                    {
                      "key": "my_key",
                      "value": "my value"
                    }
                  ],
                  "name": "web1",
                  "network": [
                    {
                      "ip_allocation_mode": "POOL",
                      "is_primary": true,
                      "name": "${vcd_vapp_org_network.direct-net.org_network_name}",
                      "type": "org"
                    }
                  ],
                  "vapp_name": "${vcd_vapp.web.name}",
                  "vapp_template_id": "${data.vcd_catalog_vapp_template.photon-os.id}"
                }
              references:
                network.name: vcd_vapp_org_network.direct-net.org_network_name
                vapp_name: vcd_vapp.web.name
                vapp_template_id: data.vcd_catalog_vapp_template.photon-os.id
              dependencies:
                vcd_independent_disk.disk1: |-
                    {
                      "bus_sub_type": "VirtualSCSI",
                      "bus_type": "SCSI",
                      "name": "logDisk",
                      "size": "512"
                    }
                vcd_network_direct.direct-external: |-
                    {
                      "external_network": "my-ext-net",
                      "name": "net"
                    }
                vcd_vapp.web: |-
                    {
                      "name": "web"
                    }
                vcd_vapp_network.vapp-net: |-
                    {
                      "dns1": "192.168.2.1",
                      "dns2": "192.168.2.2",
                      "dns_suffix": "mybiz.biz",
                      "gateway": "192.168.2.1",
                      "guest_vlan_allowed": true,
                      "name": "my-vapp-net",
                      "netmask": "255.255.255.0",
                      "static_ip_pool": [
                        {
                          "end_address": "192.168.2.100",
                          "start_address": "192.168.2.51"
                        }
                      ],
                      "vapp_name": "${vcd_vapp.web.name}"
                    }
                vcd_vapp_org_network.direct-net: |-
                    {
                      "org_network_name": "${vcd_network_direct.direct-external.name}",
                      "vapp_name": "${vcd_vapp.web.name}"
                    }
                vcd_vapp_org_network.routed-net: |-
                    {
                      "org_network_name": "my-vdc-int-net",
                      "vapp_name": "${vcd_vapp.web.name}"
                    }
            - name: web2
              manifest: |-
                {
                  "cpus": 1,
                  "disk": [
                    {
                      "bus_number": 1,
                      "name": "${vcd_independent_disk.disk1.name}",
                      "unit_number": 0
                    }
                  ],
                  "guest_properties": {
                    "guest.hostname": "my-hostname",
                    "guest.other": "another-setting"
                  },
                  "memory": 1024,
                  "metadata_entry": [
                    {
                      "key": "role",
                      "value": "web"
                    },
                    {
                      "key": "env",
                      "value": "staging"
                    },
                    {
                      "key": "env",
                      "value": "staging"
                    },
                    {
                      "key": "version",
                      "value": "v1"
                    },
                    {
                      "key": "my_key",
                      "value": "my value"
                    }
                  ],
                  "name": "web2",
                  "network": [
                    {
                      "ip_allocation_mode": "POOL",
                      "is_primary": true,
                      "name": "${vcd_vapp_org_network.routed-net.org_network_name}",
                      "type": "org"
                    },
                    {
                      "ip_allocation_mode": "POOL",
                      "name": "${vcd_vapp_network.vapp-net.name}",
                      "type": "vapp"
                    },
                    {
                      "connected": false,
                      "ip_allocation_mode": "NONE",
                      "type": "none"
                    }
                  ],
                  "vapp_name": "${vcd_vapp.web.name}",
                  "vapp_template_id": "${data.vcd_catalog_vapp_template.photon-os.id}"
                }
              references:
                disk.name: vcd_independent_disk.disk1.name
                network.name: vcd_vapp_network.vapp-net.name
                vapp_name: vcd_vapp.web.name
                vapp_template_id: data.vcd_catalog_vapp_template.photon-os.id
              dependencies:
                vcd_independent_disk.disk1: |-
                    {
                      "bus_sub_type": "VirtualSCSI",
                      "bus_type": "SCSI",
                      "name": "logDisk",
                      "size": "512"
                    }
                vcd_network_direct.direct-external: |-
                    {
                      "external_network": "my-ext-net",
                      "name": "net"
                    }
                vcd_vapp.web: |-
                    {
                      "name": "web"
                    }
                vcd_vapp_network.vapp-net: |-
                    {
                      "dns1": "192.168.2.1",
                      "dns2": "192.168.2.2",
                      "dns_suffix": "mybiz.biz",
                      "gateway": "192.168.2.1",
                      "guest_vlan_allowed": true,
                      "name": "my-vapp-net",
                      "netmask": "255.255.255.0",
                      "static_ip_pool": [
                        {
                          "end_address": "192.168.2.100",
                          "start_address": "192.168.2.51"
                        }
                      ],
                      "vapp_name": "${vcd_vapp.web.name}"
                    }
                vcd_vapp_org_network.direct-net: |-
                    {
                      "org_network_name": "${vcd_network_direct.direct-external.name}",
                      "vapp_name": "${vcd_vapp.web.name}"
                    }
                vcd_vapp_org_network.routed-net: |-
                    {
                      "org_network_name": "my-vdc-int-net",
                      "vapp_name": "${vcd_vapp.web.name}"
                    }
            - name: internalDiskOverride
              manifest: |-
                {
                  "cpu_cores": 1,
                  "cpus": 2,
                  "memory": 2048,
                  "name": "internalDiskOverride",
                  "override_template_disk": [
                    {
                      "bus_number": 0,
                      "bus_type": "paravirtual",
                      "iops": 0,
                      "size_in_mb": "22384",
                      "storage_profile": "*",
                      "unit_number": 0
                    }
                  ],
                  "vapp_name": "${vcd_vapp.web.name}",
                  "vapp_template_id": "${data.vcd_catalog_vapp_template.lampstack.id}"
                }
              references:
                vapp_name: vcd_vapp.web.name
                vapp_template_id: data.vcd_catalog_vapp_template.lampstack.id
            - name: TestAccVcdVAppVmDhcpWaitVM
              manifest: |-
                {
                  "computer_name": "dhcp-vm",
                  "cpu_cores": 1,
                  "cpus": 2,
                  "memory": 512,
                  "name": "brr",
                  "network": [
                    {
                      "ip_allocation_mode": "DHCP",
                      "is_primary": true,
                      "name": "${vcd_network_routed.net.name}",
                      "type": "org"
                    }
                  ],
                  "network_dhcp_wait_seconds": 300,
                  "vapp_name": "${vcd_vapp.TestAccVcdVAppVmDhcpWait.name}",
                  "vapp_template_id": "${data.vcd_catalog_vapp_template.photon-rev2.id}"
                }
              references:
                network.name: vcd_network_routed.net.name
                vapp_name: vcd_vapp.TestAccVcdVAppVmDhcpWait.name
                vapp_template_id: data.vcd_catalog_vapp_template.photon-rev2.id
              dependencies:
                vcd_nsxv_ip_set.test-ipset: |-
                    {
                      "ip_addresses": [
                        "${vcd_vapp_vm.TestAccVcdVAppVmDhcpWaitVM.network.0.ip}"
                      ],
                      "name": "ipset-with-dhcp-ip"
                    }
            - name: emptyVM
              manifest: |-
                {
                  "boot_image_id": "${data.vcd_catalog_media.myMedia.id}",
                  "computer_name": "emptyVM",
                  "cpu_cores": 1,
                  "cpus": 2,
                  "hardware_version": "vmx-14",
                  "memory": 2048,
                  "name": "VmWithoutTemplate",
                  "os_type": "sles10_64Guest",
                  "vapp_name": "${vcd_vapp.web.name}"
                }
              references:
                boot_image_id: data.vcd_catalog_media.myMedia.id
                vapp_name: vcd_vapp.web.name
            - name: secondVM
              manifest: |-
                {
                  "computer_name": "db-vm",
                  "cpu_cores": 1,
                  "cpus": 2,
                  "memory": 512,
                  "name": "secondVM",
                  "vapp_name": "${vcd_vapp.web.name}",
                  "vapp_template_id": "${data.vcd_catalog_vapp_template.vappWithMultiVm.id}",
                  "vm_name_in_template": "secondVM"
                }
              references:
                vapp_name: vcd_vapp.web.name
                vapp_template_id: data.vcd_catalog_vapp_template.vappWithMultiVm.id
            - name: secondVM
              manifest: |-
                {
                  "computer_name": "db-vm",
                  "name": "secondVM",
                  "sizing_policy_id": "${data.vcd_vm_sizing_policy.minSize.id}",
                  "vapp_name": "${vcd_vapp.web.name}",
                  "vapp_template_id": "${data.vcd_catalog_vapp_template.vappWithMultiVm.id}"
                }
              references:
                sizing_policy_id: data.vcd_vm_sizing_policy.minSize.id
                vapp_name: vcd_vapp.web.name
                vapp_template_id: data.vcd_catalog_vapp_template.vappWithMultiVm.id
            - name: secondVM
              manifest: |-
                {
                  "computer_name": "db-vm",
                  "name": "secondVM",
                  "placement_policy_id": "${data.vcd_vm_placement_policy.placementPolicy.id}",
                  "sizing_policy_id": "${data.vcd_vm_sizing_policy.minSize.id}",
                  "vapp_name": "${vcd_vapp.web.name}",
                  "vapp_template_id": "${data.vcd_catalog_vapp_template.vappWithMultiVm.id}"
                }
              references:
                placement_policy_id: data.vcd_vm_placement_policy.placementPolicy.id
                sizing_policy_id: data.vcd_vm_sizing_policy.minSize.id
                vapp_name: vcd_vapp.web.name
                vapp_template_id: data.vcd_catalog_vapp_template.vappWithMultiVm.id
            - name: secondVM
              manifest: |-
                {
                  "catalog_name": "cat-where-is-template",
                  "computer_name": "db-vm",
                  "name": "secondVM",
                  "placement_policy_id": "${data.vcd_vm_placement_policy.placementPolicy.id}",
                  "sizing_policy_id": "${data.vcd_vm_sizing_policy.minSize.id}",
                  "template_name": "vappWithMultiVm",
                  "vapp_name": "${vcd_vapp.web.name}"
                }
              references:
                placement_policy_id: data.vcd_vm_placement_policy.placementPolicy.id
                sizing_policy_id: data.vcd_vm_sizing_policy.minSize.id
                vapp_name: vcd_vapp.web.name
            - name: advancedVM
              manifest: |-
                {
                  "boot_image_id": "${data.vcd_catalog_media.myMedia.id}",
                  "computer_name": "advancedVM",
                  "cpu_cores": 1,
                  "cpu_limit": "1000",
                  "cpu_priority": "CUSTOM",
                  "cpu_reservation": "200",
                  "cpu_shares": "512",
                  "cpus": 2,
                  "hardware_version": "vmx-14",
                  "memory": 2048,
                  "memory_limit": "48",
                  "memory_priority": "CUSTOM",
                  "memory_reservation": "8",
                  "memory_shares": "480",
                  "name": "advancedVM",
                  "os_type": "sles10_64Guest",
                  "vapp_name": "${vcd_vapp.web.name}"
                }
              references:
                boot_image_id: data.vcd_catalog_media.myMedia.id
                vapp_name: vcd_vapp.web.name
            - name: vm-copy
              manifest: |-
                {
                  "copy_from_vm_id": "${data.vcd_vapp_vm.existing.id}",
                  "name": "VM Copy",
                  "network": [
                    {
                      "adapter_type": "VMXNET3",
                      "ip_allocation_mode": "POOL",
                      "name": "${data.vcd_vapp_org_network.net1.org_network_name}",
                      "type": "org"
                    }
                  ],
                  "org": "org",
                  "power_on": false,
                  "prevent_update_power_off": true,
                  "vapp_name": "${data.vcd_vapp_vm.existing.vapp_name}",
                  "vdc": "vdc"
                }
              references:
                copy_from_vm_id: data.vcd_vapp_vm.existing.id
                network.name: data.vcd_vapp_org_network.net1.org_network_name
                vapp_name: data.vcd_vapp_vm.existing.vapp_name
            - name: web2
              manifest: |-
                {
                  "cpus": 1,
                  "memory": 2048,
                  "name": "web2",
                  "network": [
                    {
                      "ip": "10.10.104.162",
                      "ip_allocation_mode": "MANUAL",
                      "name": "net",
                      "type": "org"
                    }
                  ],
                  "vapp_name": "${vcd_vapp.web.name}",
                  "vapp_template_id": "${data.vcd_catalog_vapp_template.windows.id}"
                }
              references:
                vapp_name: vcd_vapp.web.name
                vapp_template_id: data.vcd_catalog_vapp_template.windows.id
            - name: web2
              manifest: |-
                {
                  "customization": [
                    {
                      "admin_password": "my-secure-password",
                      "allow_local_admin_password": true,
                      "auto_generate_password": false,
                      "change_sid": true,
                      "force": true
                    }
                  ],
                  "network": [
                    {
                      "ip_allocation_mode": "DHCP",
                      "name": "net",
                      "type": "org"
                    }
                  ]
                }
            - name: web2
              manifest: |-
                {
                  "customization": [
                    {
                      "admin_password": "my-secure-password",
                      "allow_local_admin_password": true,
                      "auto_generate_password": false,
                      "change_sid": true,
                      "force": false
                    }
                  ],
                  "network": [
                    {
                      "ip_allocation_mode": "DHCP",
                      "name": "net",
                      "type": "org"
                    }
                  ]
                }
            - name: web2
              manifest: |-
                {
                  "network": [
                    {
                      "ip_allocation_mode": "DHCP",
                      "name": "net",
                      "type": "org"
                    }
                  ],
                  "set_extra_config": [
                    {
                      "key": "some-new-key",
                      "value": "some-new-value"
                    },
                    {
                      "key": "some-other-new--key",
                      "value": "some-other-new-value"
                    }
                  ]
                }
            - name: example
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "is_system": true,
                      "key": "foo",
                      "type": "MetadataStringValue",
                      "user_access": "PRIVATE",
                      "value": "bar"
                    },
                    {
                      "is_system": false,
                      "key": "myBool",
                      "type": "MetadataBooleanValue",
                      "user_access": "READWRITE",
                      "value": "true"
                    }
                  ]
                }
            - name: tf-vm
              manifest: |-
                {
                  "name": "my-vm",
                  "org": "my-org",
                  "vapp_name": "my-vapp",
                  "vdc": "my-vdc"
                }
        argumentDocs:
            DHCP: |-
                - IP address is obtained from a DHCP service. Field ip is not guaranteed to be populated. Because of this it may appear
                after multiple terraform refresh operations.  Note.
                network_dhcp_wait_seconds parameter can help to ensure IP is
                reported on first run.
            MANUAL: '- IP address is assigned manually in the ip field. Must be valid IP address from static pool.'
            NONE: '- No IP address will be set because VM will have a NIC without network.'
            POOL: '- Static IP address is allocated automatically from defined static pool in network.'
            SRIOVETHERNETCARD: |-
                must be connected to a direct vApp
                network connected to a direct VDC network. Unless such an SR-IOV-capable external network is
                available in your VDC, you cannot connect an SR-IOV device.
            accept_all_eulas: '- (Optional; v2.0+) Automatically accept EULA if OVA has it. Default is true'
            adapter_type: |-
                - (Optional, Computed) Adapter type (names are case insensitive). Some known adapter types - VMXNET3,
                E1000, E1000E, SRIOVETHERNETCARD, VMXNET2, PCNet32.
            admin_password: (Optional; v2.7+) Manually specify Administrator password.
            allow_local_admin_password: (Optional; v2.7+) Allow local administrator password.
            amazonlinux2_64Guest: '- Amazon Linux 2 (64-bit)'
            amazonlinux3_64Guest: '- Amazon Linux 3 (64-bit)'
            apply: |-
                operation because vCD does not
                support changing adapter type for existing resource.
            asianux3Guest: '- Asianux 3 (32-bit)'
            asianux3_64Guest: '- Asianux 3 (64-bit)'
            asianux4Guest: '- Asianux 4 (32-bit)'
            asianux4_64Guest: '- Asianux 4 (64-bit)'
            asianux7_64Guest: '- Asianux 7 (64-bit)'
            asianux8_64Guest: '- Asianux 8 (64-bit)'
            asianux9_64Guest: '- Asianux 9 (64-bit)'
            auto_generate_password: |-
                (Optional; v2.7+) Auto generate password. Note:
                allow_local_admin_password must be enabled, otherwise next plan will be inconsistent and report
                auto_generate_password=false
            boot_delay: '- (Optional) Delay between the power-on and boot of the VM in milliseconds.'
            boot_image: '- (Deprecated; v2.9+) Use boot_image_id instead. Media name to mount as boot image. Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use vcd_inserted_media.'
            boot_image_id: |-
                - (Optional; v3.8+) Media URN to mount as boot image. You can fetch it using a vcd_catalog_media data source.
                Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use vcd_inserted_media.
            boot_options: '- (Optional; v3.11+) A block to define boot options of the VM. See Boot Options'
            boot_retry_delay: '- (Optional, VCD 10.4.1+) Delay before the VM is rebooted after a failed boot. Has no effect if boot_retry_enabled is set to false'
            boot_retry_enabled: '- (Optional, VCD 10.4.1+) If set to true, will attempt to reboot the VM after a failed boot.'
            bus_number: '- (Required) Bus number on which to place the disk controller'
            bus_type: |-
                - (Required) The type of disk controller. Possible values: ide, parallel( LSI Logic Parallel SCSI),
                sas(LSI Logic SAS (SCSI)), paravirtual(Paravirtual (SCSI)), sata, nvme. Note nvme requires v3.5.0+ and
                VCD 10.2.1+
            catalog_name: '- (Deprecated; v2.9+) Use a vcd_catalog data source along with vapp_template_id or boot_image_id instead. The catalog name in which to find the given vApp Template or media for boot_image.'
            centos6Guest: '- CentOS 6 (32-bit)'
            centos6_64Guest: '- CentOS 6 (64-bit)'
            centos7_64Guest: '- CentOS 7 (64-bit)'
            centos8_64Guest: '- CentOS 8 (64-bit)'
            centos9_64Guest: '- CentOS 9 (64-bit)'
            centos64Guest: '- CentOS 4/5 (64-bit)'
            centosGuest: '- CentOS 4/5 (32-bit)'
            change_sid: (Optional; v2.7+) Allows to change SID (security identifier). Only applicable for Windows operating systems.
            computer_name: '- (Optional; v2.5+) Computer name to assign to this virtual machine.'
            connected: '- (Optional; v3.0+) It defines if NIC is connected or not. Network with ip_allocation_mode=NONE can''t be connected by default, please use connected=false in such case.'
            consolidate_disks_on_create: |-
                - (Optional; 3.12+) Performs disk consolidation during creation.
                The main use case is when one wants to grow template disk size using override_template_disk in
                fast provisioned VDCs. Note: Consolidating disks requires right vApp: VM Migrate, Force Undeploy, Relocate, Consolidate. This operation may take long time depending on disk size and
                storage performance.
            copy_from_vm_id: |-
                - (Optional; v3.12+) The ID of an existing VM to make a copy of it (it
                cannot be a vApp template). The source VM must be in the same Org (but can be in different VDC).
                Note: sizing_policy_id must be specified when creating a standalone VM (using vcd_vm
                resource) and using different source/destination VDCs.
            coreos64Guest: '- CoreOS Linux (64-bit)'
            cpu_cores: '- (Optional; v2.1+) The number of cores per socket.'
            cpu_hot_add_enabled: '- (Optional; v3.0+) True if the virtual machine supports addition of virtual CPUs while powered on. Default is false.'
            cpu_limit: '- The limit (in MHz) for how much of CPU can be consumed on the underlying virtualization infrastructure. -1 value for unlimited.'
            cpu_priority: '- Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload'
            cpu_reservation: '- The amount of MHz reservation on the underlying virtualization infrastructure.'
            cpu_shares: '- Custom priority for the resource in MHz. This is a read-only, unless the cpu_priority is "CUSTOM"'
            cpus: '- (Optional) The number of virtual CPUs to allocate to the VM. Socket count is a result of: virtual logical processors/cores per socket. If cpu_hot_add_enabled is true, then cpus will be increased without VM power off.'
            crxPod1Guest: '- VMware CRX Pod 1 (64-bit)'
            customization: '- (Optional; v2.5+) A block to define for guest customization options. See Customization'
            darwin10Guest: '- Apple Mac OS X 10.6 (32-bit)'
            darwin10_64Guest: '- Apple Mac OS X 10.6 (64-bit)'
            darwin11Guest: '- Apple Mac OS X 10.7 (32-bit)'
            darwin11_64Guest: '- Apple Mac OS X 10.7 (64-bit)'
            darwin12_64Guest: '- Apple Mac OS X 10.8 (64-bit)'
            darwin13_64Guest: '- Apple Mac OS X 10.9 (64-bit)'
            darwin14_64Guest: '- Apple Mac OS X 10.10 (64-bit)'
            darwin15_64Guest: '- Apple Mac OS X 10.11 (64-bit)'
            darwin16_64Guest: '- Apple macOS 10.12 (64-bit)'
            darwin17_64Guest: '- Apple macOS 10.13 (64-bit)'
            darwin18_64Guest: '- Apple macOS 10.14 (64-bit)'
            darwin19_64Guest: '- Apple macOS 10.15 (64-bit)'
            darwin20_64Guest: '- Apple macOS 11 (64-bit)'
            darwin21_64Guest: '- Apple macOS 12 (64-bit)'
            darwin64Guest: '- Apple Mac OS X 10.5 (64-bit)'
            darwinGuest: '- Apple Mac OS X 10.5 (32-bit)'
            debian4Guest: '- Debian GNU/Linux 4 (32-bit)'
            debian4_64Guest: '- Debian GNU/Linux 4 (64-bit)'
            debian5Guest: '- Debian GNU/Linux 5 (32-bit)'
            debian5_64Guest: '- Debian GNU/Linux 5 (64-bit)'
            debian6Guest: '- Debian GNU/Linux 6 (32-bit)'
            debian6_64Guest: '- Debian GNU/Linux 6 (64-bit)'
            debian7Guest: '- Debian GNU/Linux 7 (32-bit)'
            debian7_64Guest: '- Debian GNU/Linux 7 (64-bit)'
            debian8Guest: '- Debian GNU/Linux 8 (32-bit)'
            debian8_64Guest: '- Debian GNU/Linux 8 (64-bit)'
            debian9Guest: '- Debian GNU/Linux 9 (32-bit)'
            debian9_64Guest: '- Debian GNU/Linux 9 (64-bit)'
            debian10Guest: '- Debian GNU/Linux 10 (32-bit)'
            debian10_64Guest: '- Debian GNU/Linux 10 (64-bit)'
            debian11Guest: '- Debian GNU/Linux 11 (32-bit)'
            debian11_64Guest: '- Debian GNU/Linux 11 (64-bit)'
            description: |-
                - (Optional; v2.9+) The VM description. Note: for VM from Template description is read only. Currently, this field has
                the description of the OVA used to create the VM.
            disk: '- (Optional; v2.1+) Independent disk attachment configuration. See Disk below for details.'
            disk.size_in_mb: '- (v2.7+) Independent disk size in MB.'
            disk_id: '- (v2.7+) Specifies a unique identifier for this disk in the scope of the corresponding VM.'
            dosGuest: '- Microsoft MS-DOS'
            eComStation2Guest: '- Serenity Systems eComStation 2'
            eComStationGuest: '- Serenity Systems eComStation 1'
            efi_secure_boot: '- (Optional, VCD 10.4.1+) Enable EFI Secure Boot on subsequent boots, requires firmware to be set to efi.'
            enabled: |-
                (Optional; v2.7+) true will enable guest customization which may occur on first boot or if the force flag is used.
                This option should be selected for Power on and Force re-customization to work.
            enter_bios_setup_on_next_boot: |-
                - (Optional) Enter BIOS setup on the next boot of the VM. After a VM is booted, the value is set back to false in VCD, because of that,
                Terraform will return an inconsistent plan and try to set this field back to true. NOTE: If there are any cold changes on update that cause the VM to power-cycle with this field set to true,
                the VM will boot straight into BIOS. For reducing side effects, one should set this field to true and power_on to false, then switch power_on to true.
            expose_hardware_virtualization: |-
                - (Optional; v2.2+) Boolean for exposing full CPU virtualization to the
                guest operating system so that applications that require hardware virtualization can run on virtual machines without binary
                translation or paravirtualization. Useful for hypervisor nesting provided underlying hardware supports it. Default is false.
            extra_config: '- (v3.13.+) The VM extra configuration. See Extra Configuration for more detail. Not populated on VCD 10.4.0.'
            fedora64Guest: '- Red Hat Fedora (64-bit)'
            fedoraGuest: '- Red Hat Fedora (32-bit)'
            firmware: '- (Optional; v3.11+, VCD 10.4.1+) Specify boot firmware of the VM. Can be efi or bios. If unset, defaults to bios. Changing the value requires the VM to power off.'
            force: |-
                (Optional) Warning. true value will cause the VM to reboot on every apply operation.
                This field works as a flag and triggers force customization when true during an update
                (terraform apply) every time. It never complains about a change in statefile. Can be used when guest customization
                is needed after VM configuration (e.g. NIC change, customization options change, etc.) and then set back to false.
                Note. It will not have effect when power_on field is set to false. See example workflow below.
            freebsd11Guest: '- FreeBSD 11 (32-bit)'
            freebsd11_64Guest: '- FreeBSD 11 (64-bit)'
            freebsd12Guest: '- FreeBSD 12 (32-bit)'
            freebsd12_64Guest: '- FreeBSD 12 (64-bit)'
            freebsd13Guest: '- FreeBSD 13 or later versions (32-bit)'
            freebsd13_64Guest: '- FreeBSD 13 or later versions (64-bit)'
            freebsd64Guest: '- FreeBSD Pre-11 versions (64-bit)'
            freebsdGuest: '- FreeBSD Pre-11 versions (32-bit)'
            guest_properties: '- (Optional; v2.5+) Key value map of guest properties'
            hardware_version: '- (Optional; v2.9+) Virtual Hardware Version (e.g.vmx-14, vmx-13, vmx-12, etc.). Required when creating empty VM.'
            imported: '- (v3.13.+) A true/false value telling whether the resource was imported.'
            inherited_metadata: |-
                - (v3.11+; VCD 10.5.1+) A map that contains read-only metadata that is automatically added by VCD (10.5.1+) and provides
                details on the origin of the VM (e.g. vm.origin.id, vm.origin.name, vm.origin.type).
            initscript: (Optional; v2.7+) Provide initscript to be executed when customization is applied.
            internal_disk: '- (v2.7+) A block providing internal disk of VM details. See Internal Disk below for details.'
            iops: '- (Optional) Specifies the IOPS for the disk. Default is 0.'
            ip: '(Optional, Computed) Settings depend on ip_allocation_mode. Field requirements for each ip_allocation_mode are listed below:'
            ip_allocation_mode: '(Required) IP address allocation mode. One of POOL, DHCP, MANUAL, NONE:'
            ip_allocation_mode=DHCP: |-
                - ip value must be omitted or empty string "". Field ip is not
                guaranteed to be populated after run due to the VM lacking VMware tools or not working properly
                with DHCP. Because of this ip may also appear after multiple terraform refresh operations
                when is reported back to vCD. Note.
                network_dhcp_wait_seconds parameter can help to ensure IP is
                reported on first run.
            ip_allocation_mode=MANUAL: '- ip value must be valid IP address from a subnet defined in static pool for network.'
            ip_allocation_mode=NONE: '- ip field can be omitted or set to an empty string "". Empty string may be useful when doing HCL variable interpolation.'
            ip_allocation_mode=POOL: |-
                - ip value must be omitted or empty string "". Empty string may be useful when doing HCL
                variable interpolation. Field ip will be populated with an assigned IP from static pool after run.
            is_primary: (Optional) Set to true if network interface should be primary. First network card in the list will be primary by default.
            is_system: '- (Required) Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            join_domain: (Optional; v2.7+) Enable this VM to join a domain.
            join_domain_account_ou: (Optional; v2.7+) Organizational unit to be used for domain join.
            join_domain_name: (Optional; v2.7+) Set the domain name to override organization's domain name.
            join_domain_password: (Optional; v2.7+) Password to be used for domain join.
            join_domain_user: (Optional; v2.7+) User to be used for domain join.
            join_org_domain: (Optional; v2.7+) Set to true to use organization's domain.
            key: '- The key that identifies this entry'
            mac: '- (Computed) Mac address of network interface.'
            memory: '- (Optional) The amount of RAM (in MB) to allocate to the VM. If memory_hot_add_enabled is true, then memory will be increased without VM power off'
            memory_hot_add_enabled: '- (Optional; v3.0+) True if the virtual machine supports addition of memory while powered on. Default is false.'
            memory_limit: '- The limit (in MB) for how much of memory can be consumed on the underlying virtualization infrastructure. -1 value for unlimited.'
            memory_priority: '- Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload'
            memory_reservation: '- The amount of RAM (in MB) reservation on the underlying virtualization infrastructure'
            memory_shares: '- Custom priority for the resource in MB. This is a read-only, unless the memory_priority is "CUSTOM"'
            metadata: '- (Deprecated; v2.2+) Use metadata_entry instead. Key value map of metadata to assign to this VM'
            metadata_entry: '- (Optional; v3.8+) A set of metadata entries to assign. See Metadata section for details.'
            must_change_password_on_first_login: (Optional; v2.7+) Require Administrator to change password on first login.
            name: '- (Required) A name for the VM, unique within the vApp'
            netware5Guest: '- Novell NetWare 5.1'
            netware6Guest: '- Novell NetWare 6.x'
            network: |-
                - (Optional; v2.2+) A block to define network interface. Multiple can be used. See Network and
                example for usage details.
            network_dhcp_wait_seconds: |-
                - (Optional; v2.7+) Optional number of seconds to try and wait for DHCP IP (only valid
                for adapters in network block with ip_allocation_mode=DHCP). It constantly checks if IP is present so the time given
                is a maximum. VM must be powered on and at least one of the following must be true:
            number_of_auto_logons: (Optional; v2.7+) Number of times to log on automatically. 0 means disabled.
            oesGuest: '- Novell Open Enterprise Server'
            openServer5Guest: '- SCO OpenServer 5'
            openServer6Guest: '- SCO OpenServer 6'
            opensuse64Guest: '- SUSE openSUSE (64-bit)'
            opensuseGuest: '- SUSE openSUSE (32-bit)'
            oracleLinux6Guest: '- Oracle Linux 6 (32-bit)'
            oracleLinux6_64Guest: '- Oracle Linux 6 (64-bit)'
            oracleLinux7_64Guest: '- Oracle Linux 7 (64-bit)'
            oracleLinux8_64Guest: '- Oracle Linux 8 (64-bit)'
            oracleLinux9_64Guest: '- Oracle Linux 9 (64-bit)'
            oracleLinux64Guest: '- Oracle Linux 4/5 (64-bit)'
            oracleLinuxGuest: '- Oracle Linux 4/5 (32-bit)'
            org: '- (Optional; v2.0+) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            os_type: '- (Optional; v2.9+) Operating System type. Possible values can be found in Os Types. Required when creating empty VM.'
            os2Guest: '- IBM OS/2'
            other3xLinux64Guest: '- Other 3.x Linux (64-bit)'
            other3xLinuxGuest: '- Other 3.x Linux (32-bit)'
            other4xLinux64Guest: '- Other 4.x Linux (64-bit)'
            other4xLinuxGuest: '- Other 4.x Linux (32-bit)'
            other5xLinux64Guest: '- Other 5.x or later Linux (64-bit)'
            other5xLinuxGuest: '- Other 5.x or later Linux (32-bit)'
            other24xLinux64Guest: '- Other 2.4.x Linux (64-bit)'
            other24xLinuxGuest: '- Other 2.4.x Linux (32-bit)'
            other26xLinux64Guest: '- Other 2.6.x Linux (64-bit)'
            other26xLinuxGuest: '- Other 2.6.x Linux (32-bit)'
            otherGuest: '- Other (32-bit)'
            otherGuest64: '- Other (64-bit)'
            otherLinux64Guest: '- Other Linux (64-bit)'
            otherLinuxGuest: '- Other Linux (32-bit)'
            override_template_disk: '- (Optional; v2.7+) Allows to update internal disk in template before first VM boot. Disk is matched by bus_type, bus_number and unit_number. See Override template Disk below for details.'
            placement_policy_id: |-
                (Optional; v3.8+) VM placement policy or vGPU policy (3.11+) ID. To be used, it needs to be assigned to Org VDC
                In this case, if the placement policy is not set, it will pick the VDC default on creation. It must be set explicitly
                if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to "" to be removed.
            power_on: '- (Optional) A boolean value stating if this VM should be powered on. Default is true'
            power_on=false: can be used to power off the VM before removing NICs.
            prevent_update_power_off: '- (Optional; v3.0+) True if the update of resource should fail when virtual machine power off needed. Default is false.'
            required: '- Whether the entry is required'
            rhel2Guest: '- Red Hat Enterprise Linux 2.1'
            rhel3Guest: '- Red Hat Enterprise Linux 3 (32-bit)'
            rhel3_64Guest: '- Red Hat Enterprise Linux 3 (64-bit)'
            rhel4Guest: '- Red Hat Enterprise Linux 4 (32-bit)'
            rhel4_64Guest: '- Red Hat Enterprise Linux 4 (64-bit)'
            rhel5Guest: '- Red Hat Enterprise Linux 5 (32-bit)'
            rhel5_64Guest: '- Red Hat Enterprise Linux 5 (64-bit)'
            rhel6Guest: '- Red Hat Enterprise Linux 6 (32-bit)'
            rhel6_64Guest: '- Red Hat Enterprise Linux 6 (64-bit)'
            rhel7_64Guest: '- Red Hat Enterprise Linux 7 (64-bit)'
            rhel8_64Guest: '- Red Hat Enterprise Linux 8 (64-bit)'
            rhel9_64Guest: '- Red Hat Enterprise Linux 9 (64-bit)'
            secondary_ip: |-
                (Optional; v3.14+) IPv6 IP address. The same configuration methods as the ones
                for ip field apply.
            secondary_ip_allocation_mode: |-
                (Optional; v3.14+) IPv6 allocation mode if enabled. Same values as for
                ip_allocation_mode apply. Default NONE.
            security_tags: |-
                - (Optional; v3.9+) Set of security tags to be managed by the vcd_vapp_vm resource.
                To remove security_tags you must set security_tags = [] and do not remove the attribute. Removing the attribute will cause the tags to remain unchanged and just stop being managed by this resource.
                This is to be consistent with existing security tags that were created by the vcd_security_tags resource.
            set_extra_config: '- (Optional; v3.13+) Set of extra configuration key/values to be added or modified. See Extra Configuration'
            set_extra_config.key: '- (Required) Is the unique identifier of this item. It must not contain any spaces.'
            set_extra_config.value: |-
                - (Optional) A value for this item. You can use it to insert new items or modify existing ones. Setting
                the value to an empty string will remove the item.
            size_in_mb: '- (Required) The size of the disk in MB.'
            sizing_policy_id: |-
                (Optional; v3.0+, vCD 10.0+) VM sizing policy ID. To be used, it needs to be assigned to Org VDC
                using vcd_org_vdc.vm_sizing_policy_ids (and vcd_org_vdc.default_compute_policy_id to make it default).
                In this case, if the sizing policy is not set, it will pick the VDC default on creation. It must be set explicitly
                if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to "" to be removed.
            sles10Guest: '- SUSE Linux Enterprise 10 (32-bit)'
            sles10_64Guest: '- SUSE Linux Enterprise 10 (64-bit)'
            sles11Guest: '- SUSE Linux Enterprise 11 (32-bit)'
            sles11_64Guest: '- SUSE Linux Enterprise 11 (64-bit)'
            sles12_64Guest: '- SUSE Linux Enterprise 12 (64-bit)'
            sles15_64Guest: '- SUSE Linux Enterprise 15 (64-bit)'
            sles16_64Guest: '- SUSE Linux Enterprise 16 (64-bit)'
            sles64Guest: '- SUSE Linux Enterprise 8/9 (64-bit)'
            slesGuest: '- SUSE Linux Enterprise 8/9 (32-bit)'
            solaris8Guest: '- Sun Microsystems Solaris 8'
            solaris9Guest: '- Sun Microsystems Solaris 9'
            solaris10Guest: '- Oracle Solaris 10 (32-bit)'
            solaris10_64Guest: '- Oracle Solaris 10 (64-bit)'
            solaris11_64Guest: '- Oracle Solaris 11 (64-bit)'
            status: '- (v3.8+) The vApp status as a numeric code.'
            status_text: '- (v3.8+) The vApp status as text.'
            storage_profile: (Optional; v2.6+) Storage profile to override the default one
            template_name: '- (Deprecated; v2.9+) Use vapp_template_id instead. The name of the vApp Template to use'
            thin_provisioned: '- (v2.7+) Specifies whether the disk storage is pre-allocated or allocated on demand.'
            type: '(Required) Network type, one of: none, vapp or org. none creates a NIC with no network attached. vapp requires name of existing vApp network (created with vcd_vapp_network). org requires attached vApp Org network name (attached with vcd_vapp_org_network).'
            ubuntu64Guest: '- Ubuntu Linux (64-bit)'
            ubuntuGuest: '- Ubuntu Linux (32-bit)'
            unit_number: '- (Required) Unit number (slot) on the bus specified by BusNumber.'
            unixWare7Guest: '- SCO UnixWare 7'
            user_access: '- (Required) User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            value: '- The value for this entry'
            vapp_id: '- (v3.12+) Parent vApp ID.'
            vapp_name: '- (Required) The vApp this VM belongs to.'
            vapp_template_id: '- (Optional; v3.8+) The URN of the vApp Template to use. You can fetch it using a vcd_catalog_vapp_template data source.'
            vdc: '- (Optional; v2.0+) The name of VDC to use, optional if defined at provider level'
            vm_name_in_template: '- (Optional; v2.9+) The name of the VM in vApp Template to use. For cases when vApp template has more than one VM.'
            vm_type: '- (3.2+) Type of the VM (either vcd_vapp_vm or vcd_vm).'
            vmkernel5Guest: '- VMware ESXi 5.x'
            vmkernel6Guest: '- VMware ESXi 6.0'
            vmkernel65Guest: '- VMware ESXi 6.x'
            vmkernelGuest: '- VMware ESX 4.x'
            vmwarePhoton64Guest: '- VMware Photon OS (64-bit)'
            win31Guest: '- Microsoft Windows 3.1'
            win95Guest: '- Microsoft Windows 95'
            win98Guest: '- Microsoft Windows 98'
            win2000AdvServGuest: '- Microsoft Windows 2000'
            win2000ProGuest: '- Microsoft Windows 2000 Professional'
            win2000ServGuest: '- Microsoft Windows 2000 Server'
            winLonghorn64Guest: '- Microsoft Windows Server 2008 (64-bit)'
            winLonghornGuest: '- Microsoft Windows Server 2008 (32-bit)'
            winNTGuest: '- Microsoft Windows NT'
            winNetBusinessGuest: '- Microsoft Small Business Server 2003'
            winNetDatacenter64Guest: '- Microsoft Windows Server 2003 Datacenter (64-bit)'
            winNetDatacenterGuest: '- Microsoft Windows Server 2003 Datacenter (32-bit)'
            winNetEnterprise64Guest: '- Microsoft Windows Server 2003 (64-bit)'
            winNetEnterpriseGuest: '- Microsoft Windows Server 2003 (32-bit)'
            winNetStandard64Guest: '- Microsoft Windows Server 2003 Standard (64-bit)'
            winNetStandardGuest: '- Microsoft Windows Server 2003 Standard (32-bit)'
            winNetWebGuest: '- Microsoft Windows Server 2003 Web Edition (32-bit)'
            winVista64Guest: '- Microsoft Windows Vista (64-bit)'
            winVistaGuest: '- Microsoft Windows Vista (32-bit)'
            winXPPro64Guest: '- Microsoft Windows XP Professional (64-bit)'
            winXPProGuest: '- Microsoft Windows XP Professional (32-bit)'
            windows7Guest: '- Microsoft Windows 7 (32-bit)'
            windows7Server64Guest: '- Microsoft Windows Server 2008 R2 (64-bit)'
            windows7_64Guest: '- Microsoft Windows 7 (64-bit)'
            windows8Guest: '- Microsoft Windows 8.x (32-bit)'
            windows8Server64Guest: '- Microsoft Windows Server 2012 (64-bit)'
            windows8_64Guest: '- Microsoft Windows 8.x (64-bit)'
            windows9Guest: '- Microsoft Windows 10 (32-bit)'
            windows9Server64Guest: '- Microsoft Windows Server 2016 (64-bit)'
            windows9_64Guest: '- Microsoft Windows 10 (64-bit)'
            windows2019srv_64Guest: '- Microsoft Windows Server 2019 (64-bit)'
            windows2019srvNext_64Guest: '- Microsoft Windows Server 2022 (64-bit)'
        importStatements: []
    vcd_vdc_group:
        subCategory: ""
        description: Provides a VDC group resource.
        name: vcd_vdc_group
        title: vcd_vdc_group
        examples:
            - name: new-vdc-group
              manifest: |-
                {
                  "default_policy_status": true,
                  "description": "my description",
                  "dfw_enabled": true,
                  "name": "newVdcGroup",
                  "org": "myOrg",
                  "participating_vdc_ids": [
                    "${data.vcd_org_vdc.startVdc.id}",
                    "${data.vcd_org_vdc.additionalVdc.id}"
                  ],
                  "starting_vdc_id": "${data.vcd_org_vdc.startVdc.id}"
                }
              references:
                starting_vdc_id: data.vcd_org_vdc.startVdc.id
        argumentDocs:
            default_policy_status: '- (Optional) Whether this security policy is enabled. dfw_enabled must be true.'
            description: '- (Optional) VDC group description'
            dfw_enabled: '- (Optional) Whether Distributed Firewall is enabled for this VDC group.'
            error_message: '- More detailed error message when VDC group has error status'
            fault_domain_tag: '- Represents the fault domain of a given organization VDC.'
            force_delete: |-
                - (Optional, 3.11+) When true, will request VCD to force VDC Group deletion. It
                should clean up child components. Default false (VCD may fail removing VDC Group if there are
                child components remaining). Note: when setting it to true for existing resource, it will
                cause a plan change (update), but this will not alter the resource in any way.
            id: '- The VDC group ID'
            is_remote_org: '- Specifies whether the VDC is local to this VCD site.'
            local_egress: '- Status whether local egress is enabled for a universal router belonging to a universal VDC group.'
            name: '- (Required) The name for VDC group'
            network_pool_id: '- ID of used network pool.'
            network_pool_universal_id: '- The network provider’s universal id that is backing the universal network pool.'
            network_provider_scope: '- Specifies the network provider scope of the VDC.'
            network_provider_type: '- Defines the networking provider backing the VDC group.'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations'
            org_id: '- Organization ID.'
            org_name: '- Organization name.'
            participating_org_vdcs: '- A list of blocks providing organization VDCs that are participating in this group details. See Participating Org VDCs below for details.'
            participating_vdc_ids: '- (Required) The list of organization VDCs that are participating in this group. Note: starting_vdc_id isn''t automatically included in this list.'
            remove_default_firewall_rule: |-
                - (Optional, 3.10+) Marks whether default firewall rule should be
                removed after activating. Both dfw_enabled and default_policy_status must be true. Note.
                This is mainly useful when using
                vcd_nsxt_distributed_firewall_rule
                resource as it cannot remove the default rule.
            site_id: '- Site ID.'
            site_name: '- Site name.'
            starting_vdc_id: '- (Required) With selecting a starting VDC you will be able to create a group in which this VDC can participate. Note: starting_vdc_id must be included in participating_vdc_ids to participate in this group.'
            status: '- The status that the group can be in (e.g. ''SAVING'', ''SAVED'', ''CONFIGURING'', ''REALIZED'', ''REALIZATION_FAILED'', ''DELETING'', ''DELETE_FAILED'', ''OBJECT_NOT_FOUND'', ''UNCONFIGURED'').'
            type: '- Defines the group as LOCAL or UNIVERSAL.'
            universal_networking_enabled: '- True means that a VDC group router has been created.'
            vdc_id: '- VDC ID.'
            vdc_name: '- VDC name.'
        importStatements: []
    vcd_vm:
        subCategory: ""
        description: Provides a VMware Cloud Director standalone VM resource. This can be used to create, modify, and delete Standalone VMs.
        name: vcd_vm
        title: vcd_vm
        examples:
            - name: TestVm
              manifest: |-
                {
                  "cpus": 2,
                  "memory": 2048,
                  "name": "TestVm",
                  "network": [
                    {
                      "ip_allocation_mode": "POOL",
                      "name": "net-datacloud-r",
                      "type": "org"
                    }
                  ],
                  "vapp_template_id": "${data.vcd_catalog_vapp_template.photon-hw11.id}"
                }
              references:
                vapp_template_id: data.vcd_catalog_vapp_template.photon-hw11.id
            - name: TestVm
              manifest: |-
                {
                  "name": "TestVm",
                  "org": "datacloud",
                  "vdc": "vdc-datacloud"
                }
        argumentDocs:
            org-name.vdc-name.vapp-name.vm-name: |-
                , for a standalone VM you can use org-name.vdc-name.vm-name. If you know the vApp
                name (as retrieved through a data source, for example), you can safely use it in the path, as if it were a vcd_vapp_vm.
            vapp_name: |-
                is populated
                with the hidden vApp name, and readable in Terraform state.
        importStatements: []
    vcd_vm_affinity_rule:
        subCategory: ""
        description: Provides a VMware Cloud Director VM affinity rule resource. This can be used to create, modify, and delete VM affinity and anti-affinity rules.
        name: vcd_vm_affinity_rule
        title: vcd_vm_affinity_rule
        examples:
            - name: Test_VmAffinityRule1
              manifest: |-
                {
                  "enabled": true,
                  "name": "Test_VmAffinityRule1",
                  "polarity": "Affinity",
                  "required": true,
                  "vm_ids": [
                    "${data.vcd_vapp_vm.Test_EmptyVm1a.id}",
                    "${data.vcd_vapp_vm.Test_EmptyVm1b.id}",
                    "${data.vcd_vapp_vm.Test_EmptyVm1c.id}"
                  ]
                }
            - name: tf-myar
              manifest: '{}'
        argumentDocs:
            enabled: (Optional) True if this affinity rule is enabled. The default is true
            name: |-
                - (Required) The name of VM affinity rule. Duplicates are allowed, although the name can be used to retrieve
                the rule (as data source or when importing) only if it is unique.
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations'
            polarity: |-
                - (Required) One of Affinity or Anti-Affinity. This property cannot be changed. Once created, if we
                need to change polarity, we need to remove the rule and create a new one.
            required: |-
                (Optional) True if this affinity rule is required. When a rule is mandatory, a host failover will not
                power on the VM if doing so would violate the rule. The default is true
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level'
            vm_ids: (Required) A set of virtual machine IDs that compose this rule. At least 2 IDs must be provided.
        importStatements: []
    vcd_vm_internal_disk:
        subCategory: ""
        description: Provides a VMware Cloud Director VM internal disk resource. This can be used to create and delete VM internal disks.
        name: vcd_vm_internal_disk
        title: vcd_vm_internal_disk
        examples:
            - name: disk1
              manifest: |-
                {
                  "allow_vm_reboot": true,
                  "bus_number": 0,
                  "bus_type": "sata",
                  "depends_on": [
                    "vcd_vapp_vm.web1"
                  ],
                  "size_in_mb": "13333",
                  "storage_profile": "Development",
                  "unit_number": 1,
                  "vapp_name": "my-vapp",
                  "vm_name": "my-vm1"
                }
            - name: tf-myInternalDisk
              manifest: |-
                {
                  "org": "my-org",
                  "vapp_name": "my-vapp",
                  "vdc": "my-vdc",
                  "vm_name": "my-vm"
                }
        argumentDocs:
            allow_vm_reboot: '- (Optional) Powers off VM when changing any attribute of an IDE disk or unit/bus number of other disk types, after the change is complete VM is powered back on. Without this setting enabled, such changes on a powered-on VM would fail. Defaults to false.'
            bus_number: '- (Required) The number of the SCSI or IDE controller itself.'
            bus_type: |-
                - (Required) The type of disk controller. Possible values: ide, parallel( LSI Logic Parallel SCSI),
                sas(LSI Logic SAS (SCSI)), paravirtual(Paravirtual (SCSI)), sata, nvme. Note nvme requires v3.4.0+ and
                VCD 10.2.1+
            iops: '- (Optional) Specifies the IOPS for the disk. Default is 0.'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            size_in_mb: '- (Required) The size of the disk in MB.'
            storage_profile: '- (Optional) Storage profile which overrides the VM default one.'
            thin_provisioned: '- Specifies whether the disk storage is pre-allocated or allocated on demand.'
            unit_number: '- (Required) The device number on the SCSI or IDE controller of the disk.'
            vapp_name: '- (Required) The vAPP this VM internal disk belongs to.'
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level'
            vm_name: '- (Required) VM in vAPP in which internal disk is created.'
        importStatements:
            - |-
              $ terraform import vcd_vm_internal_disk.imported list@org-name.vdc-name.vapp-name.vm-name
              vcd_vm_internal_disk.imported: Importing from ID "list@org-name.vdc-name.vapp-name.vm-name"...
              Retrieving all disks
              No	ID	    BusType		BusNumber	UnitNumber	Size	StoragePofile	Iops	ThinProvisioned
              --	--	    -------		---------	----------	----	-------------	----	---------------
              1	2000	paravirtual	0		    0		    16384	*               0	    true
              2	3001	ide	     	0		    1		    17384	*               0	    true
              3	16000	sata		0		    0		    18384	*               0	    true
              4	16001	sata		0		    1		    13333	Development     0	    true

              Error: resource was not imported! resource id must be specified in one of these formats:
              'org-name.vdc-name.vapp-name.vm-name.my-internal-disk-id' to import by rule id
              'list@org-name.vdc-name.vapp-name.vm-name' to get a list of internal disks with their IDs
            - $ terraform import vcd_vm_internal_disk.imported org-name.vdc-name.vapp-name.vm-name.3001
    vcd_vm_placement_policy:
        subCategory: ""
        description: Provides a VMware Cloud Director VM Placement Policy resource. This can be used to create, modify, and delete VM Placement Policies.
        name: vcd_vm_placement_policy
        title: vcd_vm_placement_policy
        examples:
            - name: test-placement-pol
              manifest: |-
                {
                  "description": "My awesome VM Placement Policy",
                  "name": "my-placement-pol",
                  "provider_vdc_id": "${data.vcd_provider_vdc.pvdc.id}",
                  "vm_group_ids": [
                    "${data.vcd_vm_group.vm-group.id}"
                  ]
                }
              references:
                provider_vdc_id: data.vcd_provider_vdc.pvdc.id
        argumentDocs:
            description: '- (Optional) description of VM Placement Policy.'
            logical_vm_group_ids: '- (Optional) IDs of one or more Logical VM Groups to define this VM Placement policy. There is an AND relationship among all the entries set in this attribute. Note: Either vm_group_ids or logical_vm_group_ids must be set.'
            name: '- (Required) The name of VM Placement Policy.'
            provider_vdc_id: '- (Required) The ID of the Provider VDC to which this VM Placement Policy belongs.'
            vm_group_ids: '- (Optional) IDs of the collection of VMs with similar host requirements. Note: Either vm_group_ids or logical_vm_group_ids must be set.'
        importStatements:
            - $ terraform import vcd_vm_placement_policy.imported urn:vcloud:vdcComputePolicy:446d623e-1eec-4c8c-8a14-2f7e6086546b
    vcd_vm_sizing_policy:
        subCategory: ""
        description: Provides a VMware Cloud Director VM sizing policy resource. This can be used to create, modify, and delete VM sizing policy.
        name: vcd_vm_sizing_policy
        title: vcd_vm_sizing_policy
        examples:
            - name: minSize
              manifest: |-
                {
                  "cpu": [
                    {
                      "cores_per_socket": "3",
                      "count": "9",
                      "limit_in_mhz": "2400",
                      "reservation_guarantee": "0.55",
                      "shares": "886",
                      "speed_in_mhz": "2500"
                    }
                  ],
                  "description": "smallest size",
                  "memory": [
                    {
                      "limit_in_mb": "2800",
                      "reservation_guarantee": "0.3",
                      "shares": "1580",
                      "size_in_mb": "3200"
                    }
                  ],
                  "name": "min-size"
                }
        argumentDocs:
            cores_per_socket: '- (Optional) The number of cores per socket for a VM. This is a VM hardware configuration. The number of vCPUs that is defined in the VM sizing policy must be divisible by the number of cores per socket. If the number of vCPUs is not divisible by the number of cores per socket, the number of cores per socket becomes invalid.'
            count: '- (Required) Defines the number of vCPUs configured for a VM. This is a VM hardware configuration. When a tenant assigns the VM sizing policy to a VM, this count becomes the configured number of vCPUs for the VM.'
            cpu: '- (Optional) Configures cpu policy; see Cpu below for details.'
            description: '- (Optional) description of VM sizing policy.'
            limit_in_mb: '- (Optional) Defines the memory limit in MB for a VM. If not defined in the VM sizing policy, memory limit is equal to the allocated memory for the VM.'
            limit_in_mhz: '- (Optional) Defines the CPU limit in MHz for a VM. If not defined in the VDC compute policy, CPU limit is equal to the vCPU speed multiplied by the number of vCPUs. Since v3.14, -1 means unlimited.'
            memory: '- (Optional) Configures memory policy; see Memory below for details.'
            name: '- (Required) The name of VM sizing policy.'
            reservation_guarantee: '- (Optional) Defines how much of the CPU resources of a VM are reserved. The allocated CPU for a VM equals the number of vCPUs times the vCPU speed in MHz. The value of the attribute ranges between 0 and one. Value of 0 CPU reservation guarantee defines no CPU reservation. Value of 1 defines 100% of CPU reserved.'
            shares: '- (Optional) Defines the number of CPU shares for a VM. Shares specify the relative importance of a VM within a virtual data center. If a VM has twice as many shares of CPU as another VM, it is entitled to consume twice as much CPU when these two virtual machines are competing for resources. If not defined in the VDC compute policy, normal shares are applied to the VM.'
            size_in_mb: '- (Optional) Defines the memory configured for a VM in MB. This is a VM hardware configuration. When a tenant assigns the VM sizing policy to a VM, the VM receives the amount of memory defined by this attribute.'
            speed_in_mhz: '- (Optional) Defines the vCPU speed of a core in MHz.'
        importStatements:
            - $ terraform import vcd_vm_sizing_policy.imported urn:vcloud:vdcComputePolicy:446d623e-1eec-4c8c-8a14-2f7e6086546b
    vcd_vm_vgpu_policy:
        subCategory: ""
        description: Provides a resource to manage vGPU policies for virtual machines in VMware Cloud Director.
        name: vcd_vm_vgpu_policy
        title: vcd_vm_vgpu_policy
        examples:
            - name: example_vgpu_policy
              manifest: |-
                {
                  "cpu": [
                    {
                      "cores_per_socket": "3",
                      "count": "9",
                      "limit_in_mhz": "2400",
                      "reservation_guarantee": "0.55",
                      "shares": "886",
                      "speed_in_mhz": "2500"
                    }
                  ],
                  "description": "An example vGPU policy configuration",
                  "memory": [
                    {
                      "limit_in_mb": "2800",
                      "shares": "1580",
                      "size_in_mb": "3200"
                    }
                  ],
                  "name": "example-vgpu-policy",
                  "provider_vdc_scope": [
                    {
                      "cluster_names": [
                        "cluster1"
                      ],
                      "provider_vdc_id": "${data.vcd_provider_vdc.example_provider_vdc.id}",
                      "vm_group_id": "${data.vcd_vm_group.vm_group_example.id}"
                    }
                  ],
                  "vgpu_profile": [
                    {
                      "count": 1,
                      "id": "${data.vcd_vgpu_profile.example_vgpu_profile.id}"
                    }
                  ]
                }
              references:
                provider_vdc_scope.provider_vdc_id: data.vcd_provider_vdc.example_provider_vdc.id
                provider_vdc_scope.vm_group_id: data.vcd_vm_group.vm_group_example.id
                vgpu_profile.id: data.vcd_vgpu_profile.example_vgpu_profile.id
              dependencies:
                vcd_org_vdc.example_org_vdc: |-
                    {
                      "allocation_model": "Flex",
                      "compute_capacity": [
                        {
                          "cpu": [
                            {
                              "allocated": 2048
                            }
                          ],
                          "memory": [
                            {
                              "allocated": 2048
                            }
                          ]
                        }
                      ],
                      "default_compute_policy_id": "${vcd_vm_vgpu_policy.example_vgpu_policy.id}",
                      "delete_force": true,
                      "elasticity": true,
                      "include_vm_memory_overhead": true,
                      "memory_guaranteed": 1,
                      "name": "test-org-vdc",
                      "org": "${data.vcd_org.example_org.name}",
                      "provider_vdc_name": "${data.vcd_provider_vdc.example_provider_vdc.name}",
                      "storage_profile": [
                        {
                          "default": true,
                          "limit": 10240,
                          "name": "*"
                        }
                      ],
                      "vm_vgpu_policy_ids": [
                        "${vcd_vm_vgpu_policy.example_vgpu_policy.id}"
                      ]
                    }
                vcd_vm.test_vm: |-
                    {
                      "computer_name": "emptyVM",
                      "cpu_cores": 1,
                      "cpus": 2,
                      "hardware_version": "vmx-19",
                      "memory": 2048,
                      "name": "terraform-provider-vm",
                      "org": "${data.vcd_org.example_org.name}",
                      "os_type": "sles11_64Guest",
                      "placement_policy_id": "${vcd_vm_vgpu_policy.example_vgpu_policy.id}",
                      "power_on": false,
                      "vdc": "${vcd_org_vdc.example_org_vdc.name}"
                    }
            - name: example_vgpu_policy_without_sizing
              manifest: |-
                {
                  "description": "An example vGPU policy configuration",
                  "name": "example-vgpu-policy-without-sizing",
                  "provider_vdc_scope": [
                    {
                      "cluster_names": [
                        "cluster1"
                      ],
                      "provider_vdc_id": "${data.vcd_provider_vdc.example_provider_vdc.id}",
                      "vm_group_id": "${data.vcd_vm_group.vm_group_example.id}"
                    }
                  ],
                  "vgpu_profile": [
                    {
                      "count": 1,
                      "id": "${data.vcd_vgpu_profile.example_vgpu_profile.id}"
                    }
                  ]
                }
              references:
                provider_vdc_scope.provider_vdc_id: data.vcd_provider_vdc.example_provider_vdc.id
                provider_vdc_scope.vm_group_id: data.vcd_vm_group.vm_group_example.id
                vgpu_profile.id: data.vcd_vgpu_profile.example_vgpu_profile.id
            - name: imported_policy
              manifest: |-
                {
                  "name": "existing-policy-name"
                }
        argumentDocs:
            cluster_names: |-
                - (Optional) A set of vCenter cluster names on which the provider VDC is hosted.
                If none are provided, the provider attempts to find one automatically. Can be fetched using data.vcd_resource_pool.cluster_moref attribute.
            cpu: |-
                - (Optional) Configuration options for CPU resources. If this is set,
                a VM created with this policy can't specify a custom sizing policy. See cpu for more details.
            description: '- (Optional) A brief description of the vGPU policy.'
            memory: |-
                - (Optional) Memory resource configuration settings. If this is set,
                a VM created with this policy can't specify a custom sizing policy. See memory for more details.
            name: '- (Required) The unique name assigned to the vGPU policy for a virtual machine.'
            provider_vdc_id: '- (Required) The ID of the provider VDC that should be in the scope.'
            provider_vdc_scope: |-
                - (Optional) Defines the scope of the policy within
                provider virtual data centers. If not provided, applies to all the current ant future PVDCs.
                See provider_vdc_scope for more details.
            vgpu_profile: '- (Required) Defines the vGPU profile ID and count.'
            vm_group_id: |-
                - (Optional) The ID of a VM group to which the policy is available. If not provided, the policy can be applied to all VMs created
                on the PVDC.
        importStatements:
            - $ terraform import vcd_vm_vgpu_policy.imported urn:vcloud:vdcComputePolicy:446d623e-1eec-4c8c-8a14-2f7e6086546b
