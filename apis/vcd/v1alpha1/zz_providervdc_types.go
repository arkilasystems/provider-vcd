// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ComputeCapacityCPUInitParameters struct {
}

type ComputeCapacityCPUObservation struct {

	// Allocated CPU/Memory for this Provider VDC.
	Allocation *float64 `json:"allocation,omitempty" tf:"allocation,omitempty"`

	// CPU/Memory overhead for this Provider VDC.
	Overhead *float64 `json:"overhead,omitempty" tf:"overhead,omitempty"`

	// Reserved CPU/Memory for this Provider VDC.
	Reserved *float64 `json:"reserved,omitempty" tf:"reserved,omitempty"`

	// Total CPU/Memory for this Provider VDC.
	Total *float64 `json:"total,omitempty" tf:"total,omitempty"`

	// Units for the CPU/Memory of this Provider VDC.
	Units *string `json:"units,omitempty" tf:"units,omitempty"`

	// Used CPU/Memory in this Provider VDC.
	Used *float64 `json:"used,omitempty" tf:"used,omitempty"`
}

type ComputeCapacityCPUParameters struct {
}

type ComputeCapacityMemoryInitParameters struct {
}

type ComputeCapacityMemoryObservation struct {

	// Allocated CPU/Memory for this Provider VDC.
	Allocation *float64 `json:"allocation,omitempty" tf:"allocation,omitempty"`

	// CPU/Memory overhead for this Provider VDC.
	Overhead *float64 `json:"overhead,omitempty" tf:"overhead,omitempty"`

	// Reserved CPU/Memory for this Provider VDC.
	Reserved *float64 `json:"reserved,omitempty" tf:"reserved,omitempty"`

	// Total CPU/Memory for this Provider VDC.
	Total *float64 `json:"total,omitempty" tf:"total,omitempty"`

	// Units for the CPU/Memory of this Provider VDC.
	Units *string `json:"units,omitempty" tf:"units,omitempty"`

	// Used CPU/Memory in this Provider VDC.
	Used *float64 `json:"used,omitempty" tf:"used,omitempty"`
}

type ComputeCapacityMemoryParameters struct {
}

type ProviderVdcComputeCapacityInitParameters struct {
}

type ProviderVdcComputeCapacityObservation struct {

	// An indicator of CPU. See CPU and memory below.
	CPU []ComputeCapacityCPUObservation `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// True if compute capacity can grow or shrink based on demand.
	IsElastic *bool `json:"isElastic,omitempty" tf:"is_elastic,omitempty"`

	// True if compute capacity is highly available.
	IsHa *bool `json:"isHa,omitempty" tf:"is_ha,omitempty"`

	// An indicator of memory. See CPU and memory below.
	Memory []ComputeCapacityMemoryObservation `json:"memory,omitempty" tf:"memory,omitempty"`
}

type ProviderVdcComputeCapacityParameters struct {
}

type ProviderVdcInitParameters struct {

	// Description of the Provider VDC.
	// Optional description of the Provider VDC
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The highest virtual hardware version supported by this Provider VDC. This value cannot be changed to a lower version, and can only be updated when adding a new resource pool.
	// The highest virtual hardware version supported by this Provider VDC
	HighestSupportedHardwareVersion *string `json:"highestSupportedHardwareVersion,omitempty" tf:"highest_supported_hardware_version,omitempty"`

	// True if this Provider VDC is enabled and can provide resources to organization VDCs. A Provider VDC is always enabled on creation.
	// True if this Provider VDC is enabled and can provide resources to organization VDCs. A Provider VDC is always enabled on creation
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// A set of metadata entries assigned to the Provider VDC. See Metadata section for details.
	// Metadata entries for the given Provider VDC
	MetadataEntry []ProviderVdcMetadataEntryInitParameters `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// Provider VDC name
	// Name of the Provider VDC
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Set IDs of the Network Pools used by this Provider VDC.
	// Set IDs of the network pools used by this Provider VDC
	// +listType=set
	NetworkPoolIds []*string `json:"networkPoolIds,omitempty" tf:"network_pool_ids,omitempty"`

	// ID of the registered NSX-T Manager that backs networking operations for this Provider VDC.
	// ID of the registered NSX-T Manager that backs networking operations for this Provider VDC
	NsxtManagerID *string `json:"nsxtManagerId,omitempty" tf:"nsxt_manager_id,omitempty"`

	// Set of IDs of the Resource Pools backing this provider VDC. (Note: only one resource pool can be set at creation).
	// Set of IDs of the resource pools backing this provider VDC
	// +listType=set
	ResourcePoolIds []*string `json:"resourcePoolIds,omitempty" tf:"resource_pool_ids,omitempty"`

	// Set of Storage Profile names used to create this provider VDC.
	// Set of storage profile names used to create this Provider VDC
	// +listType=set
	StorageProfileNames []*string `json:"storageProfileNames,omitempty" tf:"storage_profile_names,omitempty"`

	// ID of the vCenter Server that provides the Resource Pools and Datastores.
	// ID of the vCenter server that provides the resource pools and datastores
	VcenterID *string `json:"vcenterId,omitempty" tf:"vcenter_id,omitempty"`
}

type ProviderVdcMetadataEntryInitParameters struct {

	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.
	// Domain for this metadata entry. true, if it belongs to SYSTEM. false, if it belongs to GENERAL. Defaults to false
	IsSystem *bool `json:"isSystem,omitempty" tf:"is_system,omitempty"`

	// Key of this metadata entry.
	// Key of this metadata entry
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.
	// Type of this metadata entry. One of: 'MetadataStringValue', 'MetadataNumberValue', 'MetadataBooleanValue', 'MetadataDateTimeValue'. Defaults to 'MetadataStringValue'
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).
	// User access level for this metadata entry. One of: 'READWRITE', 'READONLY', 'PRIVATE'. Defaults to 'READWRITE'
	UserAccess *string `json:"userAccess,omitempty" tf:"user_access,omitempty"`

	// Value of this metadata entry.
	// Value of this metadata entry
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ProviderVdcMetadataEntryObservation struct {

	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.
	// Domain for this metadata entry. true, if it belongs to SYSTEM. false, if it belongs to GENERAL. Defaults to false
	IsSystem *bool `json:"isSystem,omitempty" tf:"is_system,omitempty"`

	// Key of this metadata entry.
	// Key of this metadata entry
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.
	// Type of this metadata entry. One of: 'MetadataStringValue', 'MetadataNumberValue', 'MetadataBooleanValue', 'MetadataDateTimeValue'. Defaults to 'MetadataStringValue'
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).
	// User access level for this metadata entry. One of: 'READWRITE', 'READONLY', 'PRIVATE'. Defaults to 'READWRITE'
	UserAccess *string `json:"userAccess,omitempty" tf:"user_access,omitempty"`

	// Value of this metadata entry.
	// Value of this metadata entry
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ProviderVdcMetadataEntryParameters struct {

	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.
	// Domain for this metadata entry. true, if it belongs to SYSTEM. false, if it belongs to GENERAL. Defaults to false
	// +kubebuilder:validation:Optional
	IsSystem *bool `json:"isSystem,omitempty" tf:"is_system,omitempty"`

	// Key of this metadata entry.
	// Key of this metadata entry
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.
	// Type of this metadata entry. One of: 'MetadataStringValue', 'MetadataNumberValue', 'MetadataBooleanValue', 'MetadataDateTimeValue'. Defaults to 'MetadataStringValue'
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).
	// User access level for this metadata entry. One of: 'READWRITE', 'READONLY', 'PRIVATE'. Defaults to 'READWRITE'
	// +kubebuilder:validation:Optional
	UserAccess *string `json:"userAccess,omitempty" tf:"user_access,omitempty"`

	// Value of this metadata entry.
	// Value of this metadata entry
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type ProviderVdcObservation struct {

	// Set of virtual hardware versions supported by this Provider VDC.
	// Set of virtual hardware versions supported by this Provider VDC
	// +listType=set
	Capabilities []*string `json:"capabilities,omitempty" tf:"capabilities,omitempty"`

	// An indicator of CPU and memory capacity. See Compute Capacity below for details.
	// Single-element list with an indicator of CPU and memory capacity
	ComputeCapacity []ProviderVdcComputeCapacityObservation `json:"computeCapacity,omitempty" tf:"compute_capacity,omitempty"`

	// Represents the compute fault domain for this Provider VDC. This value is a tenant-facing tag that is shown to tenants when viewing fault domains of the child Organization VDCs (for example, a VDC Group).
	// Represents the compute fault domain for this Provider VDC. This value is a tenant-facing tag that is shown to tenants when viewing fault domains of the child Organization VDCs (for example, a VDC Group)
	ComputeProviderScope *string `json:"computeProviderScope,omitempty" tf:"compute_provider_scope,omitempty"`

	// Description of the Provider VDC.
	// Optional description of the Provider VDC
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Set of IDs of External Networks.
	// Set of IDs of external networks
	// +listType=set
	ExternalNetworkIds []*string `json:"externalNetworkIds,omitempty" tf:"external_network_ids,omitempty"`

	// The highest virtual hardware version supported by this Provider VDC. This value cannot be changed to a lower version, and can only be updated when adding a new resource pool.
	// The highest virtual hardware version supported by this Provider VDC
	HighestSupportedHardwareVersion *string `json:"highestSupportedHardwareVersion,omitempty" tf:"highest_supported_hardware_version,omitempty"`

	// Set containing all the hosts which are connected to VC server.
	// Set with all the hosts which are connected to VC server
	// +listType=set
	HostIds []*string `json:"hostIds,omitempty" tf:"host_ids,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// True if this Provider VDC is enabled and can provide resources to organization VDCs. A Provider VDC is always enabled on creation.
	// True if this Provider VDC is enabled and can provide resources to organization VDCs. A Provider VDC is always enabled on creation
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// A set of metadata entries assigned to the Provider VDC. See Metadata section for details.
	// Metadata entries for the given Provider VDC
	MetadataEntry []ProviderVdcMetadataEntryObservation `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// Provider VDC name
	// Name of the Provider VDC
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Set IDs of the Network Pools used by this Provider VDC.
	// Set IDs of the network pools used by this Provider VDC
	// +listType=set
	NetworkPoolIds []*string `json:"networkPoolIds,omitempty" tf:"network_pool_ids,omitempty"`

	// ID of the registered NSX-T Manager that backs networking operations for this Provider VDC.
	// ID of the registered NSX-T Manager that backs networking operations for this Provider VDC
	NsxtManagerID *string `json:"nsxtManagerId,omitempty" tf:"nsxt_manager_id,omitempty"`

	// Set of IDs of the Resource Pools backing this provider VDC. (Note: only one resource pool can be set at creation).
	// Set of IDs of the resource pools backing this provider VDC
	// +listType=set
	ResourcePoolIds []*string `json:"resourcePoolIds,omitempty" tf:"resource_pool_ids,omitempty"`

	// Status of the Provider VDC: -1 (creation failed), 0 (not ready), 1 (ready), 2 (unknown) or 3 (unrecognized).
	// Status of the Provider VDC, it can be -1 (creation failed), 0 (not ready), 1 (ready), 2 (unknown) or 3 (unrecognized)
	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`

	// Set of IDs of the vSphere datastores backing this provider VDC
	// +listType=set
	StorageContainerIds []*string `json:"storageContainerIds,omitempty" tf:"storage_container_ids,omitempty"`

	// Set of IDs to the Storage Profiles available to this Provider VDC.
	// Set of IDs to the storage profiles available to this Provider VDC
	// +listType=set
	StorageProfileIds []*string `json:"storageProfileIds,omitempty" tf:"storage_profile_ids,omitempty"`

	// Set of Storage Profile names used to create this provider VDC.
	// Set of storage profile names used to create this Provider VDC
	// +listType=set
	StorageProfileNames []*string `json:"storageProfileNames,omitempty" tf:"storage_profile_names,omitempty"`

	// ID of the universal network reference.
	// ID of the universal network reference
	UniversalNetworkPoolID *string `json:"universalNetworkPoolId,omitempty" tf:"universal_network_pool_id,omitempty"`

	// ID of the vCenter Server that provides the Resource Pools and Datastores.
	// ID of the vCenter server that provides the resource pools and datastores
	VcenterID *string `json:"vcenterId,omitempty" tf:"vcenter_id,omitempty"`
}

type ProviderVdcParameters struct {

	// Description of the Provider VDC.
	// Optional description of the Provider VDC
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The highest virtual hardware version supported by this Provider VDC. This value cannot be changed to a lower version, and can only be updated when adding a new resource pool.
	// The highest virtual hardware version supported by this Provider VDC
	// +kubebuilder:validation:Optional
	HighestSupportedHardwareVersion *string `json:"highestSupportedHardwareVersion,omitempty" tf:"highest_supported_hardware_version,omitempty"`

	// True if this Provider VDC is enabled and can provide resources to organization VDCs. A Provider VDC is always enabled on creation.
	// True if this Provider VDC is enabled and can provide resources to organization VDCs. A Provider VDC is always enabled on creation
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// A set of metadata entries assigned to the Provider VDC. See Metadata section for details.
	// Metadata entries for the given Provider VDC
	// +kubebuilder:validation:Optional
	MetadataEntry []ProviderVdcMetadataEntryParameters `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// Provider VDC name
	// Name of the Provider VDC
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Set IDs of the Network Pools used by this Provider VDC.
	// Set IDs of the network pools used by this Provider VDC
	// +kubebuilder:validation:Optional
	// +listType=set
	NetworkPoolIds []*string `json:"networkPoolIds,omitempty" tf:"network_pool_ids,omitempty"`

	// ID of the registered NSX-T Manager that backs networking operations for this Provider VDC.
	// ID of the registered NSX-T Manager that backs networking operations for this Provider VDC
	// +kubebuilder:validation:Optional
	NsxtManagerID *string `json:"nsxtManagerId,omitempty" tf:"nsxt_manager_id,omitempty"`

	// Set of IDs of the Resource Pools backing this provider VDC. (Note: only one resource pool can be set at creation).
	// Set of IDs of the resource pools backing this provider VDC
	// +kubebuilder:validation:Optional
	// +listType=set
	ResourcePoolIds []*string `json:"resourcePoolIds,omitempty" tf:"resource_pool_ids,omitempty"`

	// Set of Storage Profile names used to create this provider VDC.
	// Set of storage profile names used to create this Provider VDC
	// +kubebuilder:validation:Optional
	// +listType=set
	StorageProfileNames []*string `json:"storageProfileNames,omitempty" tf:"storage_profile_names,omitempty"`

	// ID of the vCenter Server that provides the Resource Pools and Datastores.
	// ID of the vCenter server that provides the resource pools and datastores
	// +kubebuilder:validation:Optional
	VcenterID *string `json:"vcenterId,omitempty" tf:"vcenter_id,omitempty"`
}

// ProviderVdcSpec defines the desired state of ProviderVdc
type ProviderVdcSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProviderVdcParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProviderVdcInitParameters `json:"initProvider,omitempty"`
}

// ProviderVdcStatus defines the observed state of ProviderVdc.
type ProviderVdcStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProviderVdcObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ProviderVdc is the Schema for the ProviderVdcs API. Provides a Provider VDC resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type ProviderVdc struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.highestSupportedHardwareVersion) || (has(self.initProvider) && has(self.initProvider.highestSupportedHardwareVersion))",message="spec.forProvider.highestSupportedHardwareVersion is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourcePoolIds) || (has(self.initProvider) && has(self.initProvider.resourcePoolIds))",message="spec.forProvider.resourcePoolIds is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.storageProfileNames) || (has(self.initProvider) && has(self.initProvider.storageProfileNames))",message="spec.forProvider.storageProfileNames is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vcenterId) || (has(self.initProvider) && has(self.initProvider.vcenterId))",message="spec.forProvider.vcenterId is a required parameter"
	Spec   ProviderVdcSpec   `json:"spec"`
	Status ProviderVdcStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProviderVdcList contains a list of ProviderVdcs
type ProviderVdcList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProviderVdc `json:"items"`
}

// Repository type metadata.
var (
	ProviderVdc_Kind             = "ProviderVdc"
	ProviderVdc_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProviderVdc_Kind}.String()
	ProviderVdc_KindAPIVersion   = ProviderVdc_Kind + "." + CRDGroupVersion.String()
	ProviderVdc_GroupVersionKind = CRDGroupVersion.WithKind(ProviderVdc_Kind)
)

func init() {
	SchemeBuilder.Register(&ProviderVdc{}, &ProviderVdcList{})
}
