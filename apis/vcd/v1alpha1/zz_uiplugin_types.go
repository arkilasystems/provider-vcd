// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UiPluginInitParameters struct {

	// Whether the UI Plugin will be enabled (true) or not (false)
	// true to make the UI Plugin enabled. 'false' to make it disabled
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Path to a .zip file that contains the bundled UI Plugin
	// Absolute or relative path to the ZIP file containing the UI Plugin
	PluginPath *string `json:"pluginPath,omitempty" tf:"plugin_path,omitempty"`

	// Can only be set on updates, the initial value is taken from the JSON manifest.
	// Changes the scope of the UI Plugin for System providers. It should be set to true when the UI Plugin is published to the System organization, to prevent
	// unwanted updates-in-place.
	// This value is calculated automatically on create by reading the UI Plugin ZIP file contents. You can updateit to `true` to make it provider scoped or `false` otherwise
	ProviderScoped *bool `json:"providerScoped,omitempty" tf:"provider_scoped,omitempty"`

	// The identifiers of the Organizations
	// that will be able to use the UI Plugin if enabled. If not set, it doesn't publish to any Organization.
	// Set of organization IDs to which this UI Plugin must be published
	// +listType=set
	TenantIds []*string `json:"tenantIds,omitempty" tf:"tenant_ids,omitempty"`

	// Can only be set on updates, the initial value is taken from the JSON manifest.
	// Changes the scope of the UI Plugin for Organization users. It should be set to true when the UI Plugin is published to any organization, to prevent
	// unwanted updates-in-place.
	// This value is calculated automatically on create by reading the UI Plugin ZIP file contents. You can updateit to `true` to make it tenant scoped or `false` otherwise
	TenantScoped *bool `json:"tenantScoped,omitempty" tf:"tenant_scoped,omitempty"`
}

type UiPluginObservation struct {

	// The description of the UI Plugin
	// The description of the UI Plugin
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether the UI Plugin will be enabled (true) or not (false)
	// true to make the UI Plugin enabled. 'false' to make it disabled
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The license of the UI Plugin
	// The license of the UI Plugin
	License *string `json:"license,omitempty" tf:"license,omitempty"`

	// The website or custom URL of the UI Plugin
	// The website of the UI Plugin
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The name of the UI Plugin
	// The UI Plugin name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Path to a .zip file that contains the bundled UI Plugin
	// Absolute or relative path to the ZIP file containing the UI Plugin
	PluginPath *string `json:"pluginPath,omitempty" tf:"plugin_path,omitempty"`

	// Can only be set on updates, the initial value is taken from the JSON manifest.
	// Changes the scope of the UI Plugin for System providers. It should be set to true when the UI Plugin is published to the System organization, to prevent
	// unwanted updates-in-place.
	// This value is calculated automatically on create by reading the UI Plugin ZIP file contents. You can updateit to `true` to make it provider scoped or `false` otherwise
	ProviderScoped *bool `json:"providerScoped,omitempty" tf:"provider_scoped,omitempty"`

	// The status of the UI Plugin (for example, ready, unavailable, etc)
	// The status of the UI Plugin
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The identifiers of the Organizations
	// that will be able to use the UI Plugin if enabled. If not set, it doesn't publish to any Organization.
	// Set of organization IDs to which this UI Plugin must be published
	// +listType=set
	TenantIds []*string `json:"tenantIds,omitempty" tf:"tenant_ids,omitempty"`

	// Can only be set on updates, the initial value is taken from the JSON manifest.
	// Changes the scope of the UI Plugin for Organization users. It should be set to true when the UI Plugin is published to any organization, to prevent
	// unwanted updates-in-place.
	// This value is calculated automatically on create by reading the UI Plugin ZIP file contents. You can updateit to `true` to make it tenant scoped or `false` otherwise
	TenantScoped *bool `json:"tenantScoped,omitempty" tf:"tenant_scoped,omitempty"`

	// The vendor of the UI Plugin
	// The UI Plugin vendor name
	Vendor *string `json:"vendor,omitempty" tf:"vendor,omitempty"`

	// The version of the UI Plugin
	// The version of the UI Plugin
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type UiPluginParameters struct {

	// Whether the UI Plugin will be enabled (true) or not (false)
	// true to make the UI Plugin enabled. 'false' to make it disabled
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Path to a .zip file that contains the bundled UI Plugin
	// Absolute or relative path to the ZIP file containing the UI Plugin
	// +kubebuilder:validation:Optional
	PluginPath *string `json:"pluginPath,omitempty" tf:"plugin_path,omitempty"`

	// Can only be set on updates, the initial value is taken from the JSON manifest.
	// Changes the scope of the UI Plugin for System providers. It should be set to true when the UI Plugin is published to the System organization, to prevent
	// unwanted updates-in-place.
	// This value is calculated automatically on create by reading the UI Plugin ZIP file contents. You can updateit to `true` to make it provider scoped or `false` otherwise
	// +kubebuilder:validation:Optional
	ProviderScoped *bool `json:"providerScoped,omitempty" tf:"provider_scoped,omitempty"`

	// The identifiers of the Organizations
	// that will be able to use the UI Plugin if enabled. If not set, it doesn't publish to any Organization.
	// Set of organization IDs to which this UI Plugin must be published
	// +kubebuilder:validation:Optional
	// +listType=set
	TenantIds []*string `json:"tenantIds,omitempty" tf:"tenant_ids,omitempty"`

	// Can only be set on updates, the initial value is taken from the JSON manifest.
	// Changes the scope of the UI Plugin for Organization users. It should be set to true when the UI Plugin is published to any organization, to prevent
	// unwanted updates-in-place.
	// This value is calculated automatically on create by reading the UI Plugin ZIP file contents. You can updateit to `true` to make it tenant scoped or `false` otherwise
	// +kubebuilder:validation:Optional
	TenantScoped *bool `json:"tenantScoped,omitempty" tf:"tenant_scoped,omitempty"`
}

// UiPluginSpec defines the desired state of UiPlugin
type UiPluginSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UiPluginParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UiPluginInitParameters `json:"initProvider,omitempty"`
}

// UiPluginStatus defines the observed state of UiPlugin.
type UiPluginStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UiPluginObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// UiPlugin is the Schema for the UiPlugins API. Provides a VMware Cloud Director UI Plugin resource. This can be used to manage UI Plugins.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type UiPlugin struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	Spec   UiPluginSpec   `json:"spec"`
	Status UiPluginStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UiPluginList contains a list of UiPlugins
type UiPluginList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UiPlugin `json:"items"`
}

// Repository type metadata.
var (
	UiPlugin_Kind             = "UiPlugin"
	UiPlugin_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UiPlugin_Kind}.String()
	UiPlugin_KindAPIVersion   = UiPlugin_Kind + "." + CRDGroupVersion.String()
	UiPlugin_GroupVersionKind = CRDGroupVersion.WithKind(UiPlugin_Kind)
)

func init() {
	SchemeBuilder.Register(&UiPlugin{}, &UiPluginList{})
}
