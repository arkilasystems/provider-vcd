// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LbServiceMonitorInitParameters struct {

	// The name of the edge gateway on which the service monitor is to be created
	// Edge gateway name in which the LB Service Monitor is located
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// For types http and https. String that the monitor expects to match in the status line of
	// the HTTP or HTTPS response (for example, HTTP/1.1)
	// String that the monitor expects to match in the status line of the http or https response (for example, HTTP/1.1)
	Expected *string `json:"expected,omitempty" tf:"expected,omitempty"`

	// A map of advanced monitor parameters as key=value pairs (i.e. max-age=SECONDS, invert-regex)
	// Note: When you need a value of key only format just set value to empty string (i.e. linespan = "")
	// Advanced monitor parameters as key=value pairs
	// +mapType=granular
	Extension map[string]*string `json:"extension,omitempty" tf:"extension,omitempty"`

	// Interval in seconds at which a server is to be monitored using the specified Method.
	// Defaults to 10
	// Interval in seconds at which a server is to be monitored (defaults to 10)
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// Number of times the specified monitoring Method must fail sequentially before the server is
	// declared down. Defaults to 3
	// Number of times the specified monitoring Method must fail sequentially before the server is declared down  (defaults to 3)
	MaxRetries *float64 `json:"maxRetries,omitempty" tf:"max_retries,omitempty"`

	// For types http and https. Select http method to be used to detect server status. One of
	// OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT
	// Method to be used to detect server status. One of OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// Service Monitor name
	// Unique LB Service Monitor name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// For types http,  https, and udp. The string to be matched in the response content.
	// Note: When expected is not matched, the monitor does not try to match the Receive content
	// String to be matched in the response content
	Receive *string `json:"receive,omitempty" tf:"receive,omitempty"`

	// For types http,  https, and udp. The data to be sent.
	// Data to be sent
	Send *string `json:"send,omitempty" tf:"send,omitempty"`

	// Maximum time in seconds within which a response from the server must be received. Defaults to 15
	// Maximum time in seconds within which a response from the server must be received  (defaults to 15)
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Select the way in which you want to send the health check request to the server — http, https,
	// tcp, icmp, or udp. Depending on the type selected, the remaining attributes are allowed or not
	// Way in which you want to send the health check request to the server. One of http, https, tcp, icmp, or udp
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// For types http and https. URL to be used in the server status request
	// URL to be used in the server status request
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type LbServiceMonitorObservation struct {

	// The name of the edge gateway on which the service monitor is to be created
	// Edge gateway name in which the LB Service Monitor is located
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// For types http and https. String that the monitor expects to match in the status line of
	// the HTTP or HTTPS response (for example, HTTP/1.1)
	// String that the monitor expects to match in the status line of the http or https response (for example, HTTP/1.1)
	Expected *string `json:"expected,omitempty" tf:"expected,omitempty"`

	// A map of advanced monitor parameters as key=value pairs (i.e. max-age=SECONDS, invert-regex)
	// Note: When you need a value of key only format just set value to empty string (i.e. linespan = "")
	// Advanced monitor parameters as key=value pairs
	// +mapType=granular
	Extension map[string]*string `json:"extension,omitempty" tf:"extension,omitempty"`

	// The NSX ID of the load balancer service monitor
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Interval in seconds at which a server is to be monitored using the specified Method.
	// Defaults to 10
	// Interval in seconds at which a server is to be monitored (defaults to 10)
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// Number of times the specified monitoring Method must fail sequentially before the server is
	// declared down. Defaults to 3
	// Number of times the specified monitoring Method must fail sequentially before the server is declared down  (defaults to 3)
	MaxRetries *float64 `json:"maxRetries,omitempty" tf:"max_retries,omitempty"`

	// For types http and https. Select http method to be used to detect server status. One of
	// OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT
	// Method to be used to detect server status. One of OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// Service Monitor name
	// Unique LB Service Monitor name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// For types http,  https, and udp. The string to be matched in the response content.
	// Note: When expected is not matched, the monitor does not try to match the Receive content
	// String to be matched in the response content
	Receive *string `json:"receive,omitempty" tf:"receive,omitempty"`

	// For types http,  https, and udp. The data to be sent.
	// Data to be sent
	Send *string `json:"send,omitempty" tf:"send,omitempty"`

	// Maximum time in seconds within which a response from the server must be received. Defaults to 15
	// Maximum time in seconds within which a response from the server must be received  (defaults to 15)
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Select the way in which you want to send the health check request to the server — http, https,
	// tcp, icmp, or udp. Depending on the type selected, the remaining attributes are allowed or not
	// Way in which you want to send the health check request to the server. One of http, https, tcp, icmp, or udp
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// For types http and https. URL to be used in the server status request
	// URL to be used in the server status request
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type LbServiceMonitorParameters struct {

	// The name of the edge gateway on which the service monitor is to be created
	// Edge gateway name in which the LB Service Monitor is located
	// +kubebuilder:validation:Optional
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// For types http and https. String that the monitor expects to match in the status line of
	// the HTTP or HTTPS response (for example, HTTP/1.1)
	// String that the monitor expects to match in the status line of the http or https response (for example, HTTP/1.1)
	// +kubebuilder:validation:Optional
	Expected *string `json:"expected,omitempty" tf:"expected,omitempty"`

	// A map of advanced monitor parameters as key=value pairs (i.e. max-age=SECONDS, invert-regex)
	// Note: When you need a value of key only format just set value to empty string (i.e. linespan = "")
	// Advanced monitor parameters as key=value pairs
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Extension map[string]*string `json:"extension,omitempty" tf:"extension,omitempty"`

	// Interval in seconds at which a server is to be monitored using the specified Method.
	// Defaults to 10
	// Interval in seconds at which a server is to be monitored (defaults to 10)
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// Number of times the specified monitoring Method must fail sequentially before the server is
	// declared down. Defaults to 3
	// Number of times the specified monitoring Method must fail sequentially before the server is declared down  (defaults to 3)
	// +kubebuilder:validation:Optional
	MaxRetries *float64 `json:"maxRetries,omitempty" tf:"max_retries,omitempty"`

	// For types http and https. Select http method to be used to detect server status. One of
	// OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT
	// Method to be used to detect server status. One of OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT
	// +kubebuilder:validation:Optional
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// Service Monitor name
	// Unique LB Service Monitor name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// For types http,  https, and udp. The string to be matched in the response content.
	// Note: When expected is not matched, the monitor does not try to match the Receive content
	// String to be matched in the response content
	// +kubebuilder:validation:Optional
	Receive *string `json:"receive,omitempty" tf:"receive,omitempty"`

	// For types http,  https, and udp. The data to be sent.
	// Data to be sent
	// +kubebuilder:validation:Optional
	Send *string `json:"send,omitempty" tf:"send,omitempty"`

	// Maximum time in seconds within which a response from the server must be received. Defaults to 15
	// Maximum time in seconds within which a response from the server must be received  (defaults to 15)
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Select the way in which you want to send the health check request to the server — http, https,
	// tcp, icmp, or udp. Depending on the type selected, the remaining attributes are allowed or not
	// Way in which you want to send the health check request to the server. One of http, https, tcp, icmp, or udp
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// For types http and https. URL to be used in the server status request
	// URL to be used in the server status request
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

// LbServiceMonitorSpec defines the desired state of LbServiceMonitor
type LbServiceMonitorSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LbServiceMonitorParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LbServiceMonitorInitParameters `json:"initProvider,omitempty"`
}

// LbServiceMonitorStatus defines the observed state of LbServiceMonitor.
type LbServiceMonitorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LbServiceMonitorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// LbServiceMonitor is the Schema for the LbServiceMonitors API. Provides an NSX edge gateway load balancer service monitor resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type LbServiceMonitor struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.edgeGateway) || (has(self.initProvider) && has(self.initProvider.edgeGateway))",message="spec.forProvider.edgeGateway is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   LbServiceMonitorSpec   `json:"spec"`
	Status LbServiceMonitorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LbServiceMonitorList contains a list of LbServiceMonitors
type LbServiceMonitorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LbServiceMonitor `json:"items"`
}

// Repository type metadata.
var (
	LbServiceMonitor_Kind             = "LbServiceMonitor"
	LbServiceMonitor_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LbServiceMonitor_Kind}.String()
	LbServiceMonitor_KindAPIVersion   = LbServiceMonitor_Kind + "." + CRDGroupVersion.String()
	LbServiceMonitor_GroupVersionKind = CRDGroupVersion.WithKind(LbServiceMonitor_Kind)
)

func init() {
	SchemeBuilder.Register(&LbServiceMonitor{}, &LbServiceMonitorList{})
}
