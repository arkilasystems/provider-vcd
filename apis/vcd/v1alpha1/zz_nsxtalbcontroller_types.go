// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NsxtAlbControllerInitParameters struct {

	// An optional description ALB Controller
	// NSX-T ALB Controller description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// License type of ALB Controller (ENTERPRISE or BASIC)
	// NSX-T ALB License type. One of 'BASIC', 'ENTERPRISE'. Must not be used from VCD 10.4.0 onwards
	LicenseType *string `json:"licenseType,omitempty" tf:"license_type,omitempty"`

	// A name for ALB Controller
	// NSX-T ALB Controller name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The password for ALB Controller. Password will not be refreshed.
	// NSX-T ALB Controller Password
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// The URL of ALB Controller
	// NSX-T ALB Controller URL
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// The username for ALB Controller
	// NSX-T ALB Controller Username
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type NsxtAlbControllerObservation struct {

	// An optional description ALB Controller
	// NSX-T ALB Controller description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// License type of ALB Controller (ENTERPRISE or BASIC)
	// NSX-T ALB License type. One of 'BASIC', 'ENTERPRISE'. Must not be used from VCD 10.4.0 onwards
	LicenseType *string `json:"licenseType,omitempty" tf:"license_type,omitempty"`

	// A name for ALB Controller
	// NSX-T ALB Controller name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The URL of ALB Controller
	// NSX-T ALB Controller URL
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// The username for ALB Controller
	// NSX-T ALB Controller Username
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// ALB Controller version (e.g. 20.1.3)
	// NSX-T ALB Controller version
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type NsxtAlbControllerParameters struct {

	// An optional description ALB Controller
	// NSX-T ALB Controller description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// License type of ALB Controller (ENTERPRISE or BASIC)
	// NSX-T ALB License type. One of 'BASIC', 'ENTERPRISE'. Must not be used from VCD 10.4.0 onwards
	// +kubebuilder:validation:Optional
	LicenseType *string `json:"licenseType,omitempty" tf:"license_type,omitempty"`

	// A name for ALB Controller
	// NSX-T ALB Controller name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The password for ALB Controller. Password will not be refreshed.
	// NSX-T ALB Controller Password
	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// The URL of ALB Controller
	// NSX-T ALB Controller URL
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// The username for ALB Controller
	// NSX-T ALB Controller Username
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

// NsxtAlbControllerSpec defines the desired state of NsxtAlbController
type NsxtAlbControllerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NsxtAlbControllerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NsxtAlbControllerInitParameters `json:"initProvider,omitempty"`
}

// NsxtAlbControllerStatus defines the observed state of NsxtAlbController.
type NsxtAlbControllerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NsxtAlbControllerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NsxtAlbController is the Schema for the NsxtAlbControllers API. Provides a resource to manage ALB Controller for Providers. It helps to integrate VMware Cloud Director with Avi Load Balancer deployment. Controller instances are registered with VMware Cloud Director instance. Controller instances serve as a central control plane for the load-balancing services provided by Avi Load Balancer.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type NsxtAlbController struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.passwordSecretRef)",message="spec.forProvider.passwordSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.url) || (has(self.initProvider) && has(self.initProvider.url))",message="spec.forProvider.url is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.username) || (has(self.initProvider) && has(self.initProvider.username))",message="spec.forProvider.username is a required parameter"
	Spec   NsxtAlbControllerSpec   `json:"spec"`
	Status NsxtAlbControllerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtAlbControllerList contains a list of NsxtAlbControllers
type NsxtAlbControllerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NsxtAlbController `json:"items"`
}

// Repository type metadata.
var (
	NsxtAlbController_Kind             = "NsxtAlbController"
	NsxtAlbController_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NsxtAlbController_Kind}.String()
	NsxtAlbController_KindAPIVersion   = NsxtAlbController_Kind + "." + CRDGroupVersion.String()
	NsxtAlbController_GroupVersionKind = CRDGroupVersion.WithKind(NsxtAlbController_Kind)
)

func init() {
	SchemeBuilder.Register(&NsxtAlbController{}, &NsxtAlbControllerList{})
}
