// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AppPortInitParameters struct {

	// A set of port numbers or port ranges (e.g. "10000", "20000-20010")
	// Set of ports or ranges
	// +listType=set
	Port []*string `json:"port,omitempty" tf:"port,omitempty"`

	// One of protocols ICMPv4, ICMPv6, TCP, UDP
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type AppPortObservation struct {

	// A set of port numbers or port ranges (e.g. "10000", "20000-20010")
	// Set of ports or ranges
	// +listType=set
	Port []*string `json:"port,omitempty" tf:"port,omitempty"`

	// One of protocols ICMPv4, ICMPv6, TCP, UDP
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type AppPortParameters struct {

	// A set of port numbers or port ranges (e.g. "10000", "20000-20010")
	// Set of ports or ranges
	// +kubebuilder:validation:Optional
	// +listType=set
	Port []*string `json:"port,omitempty" tf:"port,omitempty"`

	// One of protocols ICMPv4, ICMPv6, TCP, UDP
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`
}

type NsxtAppPortProfileInitParameters struct {

	// At least one block of Application Port definition
	AppPort []AppPortInitParameters `json:"appPort,omitempty" tf:"app_port,omitempty"`

	// ID of NSX-T Manager, VDC or VDC Group. Replaces deprecated fields vdc
	// and nsxt_manager_id. It accepts VDC, VDC Group or NSX-T Manager ID.
	// ID of VDC, VDC Group, or NSX-T Manager
	ContextID *string `json:"contextId,omitempty" tf:"context_id,omitempty"`

	// Application Port Profile description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A unique name for Security Group
	// Application Port Profile name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Deprecated; Optional) Required only when scope is PROVIDER. Deprecated
	// and replaced by context_id
	// ID of NSX-T manager. Only required for 'PROVIDER' scope
	NsxtManagerID *string `json:"nsxtManagerId,omitempty" tf:"nsxt_manager_id,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Application Port Profile scope - PROVIDER, TENANT
	// Scope - 'PROVIDER' or 'TENANT'
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (Deprecated; Optional) The name of VDC to use, optional if defined at provider level.
	// Deprecated and replaced by context_id
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type NsxtAppPortProfileObservation struct {

	// At least one block of Application Port definition
	AppPort []AppPortObservation `json:"appPort,omitempty" tf:"app_port,omitempty"`

	// ID of NSX-T Manager, VDC or VDC Group. Replaces deprecated fields vdc
	// and nsxt_manager_id. It accepts VDC, VDC Group or NSX-T Manager ID.
	// ID of VDC, VDC Group, or NSX-T Manager
	ContextID *string `json:"contextId,omitempty" tf:"context_id,omitempty"`

	// Application Port Profile description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A unique name for Security Group
	// Application Port Profile name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Deprecated; Optional) Required only when scope is PROVIDER. Deprecated
	// and replaced by context_id
	// ID of NSX-T manager. Only required for 'PROVIDER' scope
	NsxtManagerID *string `json:"nsxtManagerId,omitempty" tf:"nsxt_manager_id,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Application Port Profile scope - PROVIDER, TENANT
	// Scope - 'PROVIDER' or 'TENANT'
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (Deprecated; Optional) The name of VDC to use, optional if defined at provider level.
	// Deprecated and replaced by context_id
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type NsxtAppPortProfileParameters struct {

	// At least one block of Application Port definition
	// +kubebuilder:validation:Optional
	AppPort []AppPortParameters `json:"appPort,omitempty" tf:"app_port,omitempty"`

	// ID of NSX-T Manager, VDC or VDC Group. Replaces deprecated fields vdc
	// and nsxt_manager_id. It accepts VDC, VDC Group or NSX-T Manager ID.
	// ID of VDC, VDC Group, or NSX-T Manager
	// +kubebuilder:validation:Optional
	ContextID *string `json:"contextId,omitempty" tf:"context_id,omitempty"`

	// Application Port Profile description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A unique name for Security Group
	// Application Port Profile name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Deprecated; Optional) Required only when scope is PROVIDER. Deprecated
	// and replaced by context_id
	// ID of NSX-T manager. Only required for 'PROVIDER' scope
	// +kubebuilder:validation:Optional
	NsxtManagerID *string `json:"nsxtManagerId,omitempty" tf:"nsxt_manager_id,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Application Port Profile scope - PROVIDER, TENANT
	// Scope - 'PROVIDER' or 'TENANT'
	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (Deprecated; Optional) The name of VDC to use, optional if defined at provider level.
	// Deprecated and replaced by context_id
	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

// NsxtAppPortProfileSpec defines the desired state of NsxtAppPortProfile
type NsxtAppPortProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NsxtAppPortProfileParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NsxtAppPortProfileInitParameters `json:"initProvider,omitempty"`
}

// NsxtAppPortProfileStatus defines the observed state of NsxtAppPortProfile.
type NsxtAppPortProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NsxtAppPortProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NsxtAppPortProfile is the Schema for the NsxtAppPortProfiles API. Provides a resource to manage NSX-T Application Port Profiles. Application Port Profiles include a combination of a protocol and a port, or a group of ports, that is used for Firewall and NAT services on the Edge Gateway. In addition to the default Port Profiles that are preconfigured for NSX-T Data Center, you can create custom Application Port Profiles.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type NsxtAppPortProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.appPort) || (has(self.initProvider) && has(self.initProvider.appPort))",message="spec.forProvider.appPort is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.scope) || (has(self.initProvider) && has(self.initProvider.scope))",message="spec.forProvider.scope is a required parameter"
	Spec   NsxtAppPortProfileSpec   `json:"spec"`
	Status NsxtAppPortProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtAppPortProfileList contains a list of NsxtAppPortProfiles
type NsxtAppPortProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NsxtAppPortProfile `json:"items"`
}

// Repository type metadata.
var (
	NsxtAppPortProfile_Kind             = "NsxtAppPortProfile"
	NsxtAppPortProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NsxtAppPortProfile_Kind}.String()
	NsxtAppPortProfile_KindAPIVersion   = NsxtAppPortProfile_Kind + "." + CRDGroupVersion.String()
	NsxtAppPortProfile_GroupVersionKind = CRDGroupVersion.WithKind(NsxtAppPortProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&NsxtAppPortProfile{}, &NsxtAppPortProfileList{})
}
